{"task_id": 1, "prompt": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n", "label": "\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"}
{"task_id": 2, "prompt": "def similar_elements(test_tup1, test_tup2):\r\n", "label": "  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "}
{"task_id": 3, "prompt": "import math\r\ndef is_not_prime(n):\r\n", "label": "    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"}
{"task_id": 4, "prompt": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n", "label": "  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"}
{"task_id": 5, "prompt": "def count_ways(n): \r\n", "label": "\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "}
{"task_id": 6, "prompt": "def is_Power_Of_Two (x): \r\n", "label": "    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"}
{"task_id": 7, "prompt": "import re\r\ndef find_char_long(text):\r\n", "label": "  return (re.findall(r\"\\b\\w{4,}\\b\", text))"}
{"task_id": 8, "prompt": "def square_nums(nums):\r\n", "label": " square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"}
{"task_id": 9, "prompt": "def find_Rotations(str): \r\n", "label": "    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "}
{"task_id": 10, "prompt": "import heapq\r\ndef small_nnum(list1,n):\r\n", "label": "  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"}
{"task_id": 11, "prompt": "def remove_Occ(s,ch): \r\n", "label": "    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "}
{"task_id": 12, "prompt": "def sort_matrix(M):\r\n", "label": "    result = sorted(M, key=sum)\r\n    return result"}
{"task_id": 13, "prompt": "from collections import Counter\r\ndef count_common(words):\r\n", "label": "  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"}
{"task_id": 14, "prompt": "def find_Volume(l,b,h) : \r\n", "label": "    return ((l * b * h) / 2) "}
{"task_id": 15, "prompt": "import re\r\ndef split_lowerstring(text):\r\n", "label": " return (re.findall('[a-z][^a-z]*', text))"}
{"task_id": 16, "prompt": "import re\r\ndef text_lowercase_underscore(text):\r\n", "label": "        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": 17, "prompt": "def square_perimeter(a):\r\n", "label": "  perimeter=4*a\r\n  return perimeter"}
{"task_id": 18, "prompt": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n", "label": "\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "}
{"task_id": 19, "prompt": "def test_duplicate(arraynums):\r\n", "label": "    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "}
{"task_id": 20, "prompt": "def is_woodall(x): \r\n", "label": "\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"}
{"task_id": 21, "prompt": "def multiples_of_num(m,n): \r\n", "label": "    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"}
{"task_id": 22, "prompt": "def find_first_duplicate(nums):\r\n", "label": "    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"}
{"task_id": 23, "prompt": "def maximum_Sum(list1): \r\n", "label": "    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "}
{"task_id": 24, "prompt": "def binary_to_decimal(binary): \r\n", "label": "    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"}
{"task_id": 25, "prompt": "def find_Product(arr,n): \r\n", "label": "    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "}
{"task_id": 26, "prompt": "def check_k_elements(test_list, K):\r\n", "label": "  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "}
{"task_id": 27, "prompt": "import re  \r\ndef remove(list): \r\n", "label": "    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"}
{"task_id": 28, "prompt": "def binomial_Coeff(n,k): \r\n", "label": "    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "}
{"task_id": 29, "prompt": "def get_Odd_Occurrence(arr,arr_size):   \r\n", "label": "    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"}
{"task_id": 30, "prompt": "def check_Equality(s): \r\n", "label": "    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "}
{"task_id": 31, "prompt": "def func(nums, k):\r\n", "label": "    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"}
{"task_id": 32, "prompt": "import math \r\ndef max_Prime_Factors (n): \r\n", "label": "    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"}
{"task_id": 33, "prompt": "def decimal_To_Binary(N): \r\n", "label": "    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "}
{"task_id": 34, "prompt": "def find_missing(ar,N): \r\n", "label": "    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "}
{"task_id": 35, "prompt": "def find_rect_num(n):\r\n", "label": "  return n*(n + 1) "}
{"task_id": 36, "prompt": "def find_Nth_Digit(p,q,N) :  \r\n", "label": "    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "}
{"task_id": 37, "prompt": "def sort_mixed_list(mixed_list):\r\n", "label": "    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"}
{"task_id": 38, "prompt": "def div_even_odd(list1):\r\n", "label": "    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"}
{"task_id": 39, "prompt": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n", "label": "    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"}
{"task_id": 40, "prompt": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n", "label": "  result = Counter(chain.from_iterable(nums))\r\n  return result"}
{"task_id": 41, "prompt": "def filter_evennumbers(nums):\r\n", "label": " even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"}
{"task_id": 42, "prompt": "def find_Sum(arr,n): \r\n", "label": "    return sum([x for x in arr if arr.count(x) > 1])"}
{"task_id": 43, "prompt": "import re\r\ndef text_match(text):\r\n", "label": "  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"task_id": 44, "prompt": "import re\r\ndef text_match_string(text):\r\n", "label": "        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"}
{"task_id": 45, "prompt": "def find_gcd(x, y): \r\n", "label": "\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"}
{"task_id": 46, "prompt": "def test_distinct(data):\r\n", "label": "  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"}
{"task_id": 47, "prompt": "def compute_Last_Digit(A,B): \r\n", "label": "    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"}
{"task_id": 48, "prompt": "def odd_bit_set_number(n):\r\n", "label": "    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"}
{"task_id": 49, "prompt": "def specified_element(nums, N):\r\n", "label": "    result = [i[N] for i in nums]\r\n    return result\r\n    "}
{"task_id": 50, "prompt": "def min_length_list(input_list):\r\n", "label": "    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"}
{"task_id": 51, "prompt": "def check_equilateral(x,y,z):\r\n", "label": "  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"}
{"task_id": 52, "prompt": "def parallelogram_area(b,h):\r\n", "label": "  area=b*h\r\n  return area"}
{"task_id": 53, "prompt": "def check_Equality(str):\r\n", "label": "  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "}
{"task_id": 54, "prompt": "def counting_sort(my_list):\r\n", "label": "    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"}
{"task_id": 55, "prompt": "import math\r\ndef tn_gp(a,n,r):\r\n", "label": "  tn = a * (math.pow(r, n - 1))\r\n  return tn"}
{"task_id": 56, "prompt": "def rev(num):    \r\n", "label": "    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "}
{"task_id": 57, "prompt": "def find_Max_Num(arr,n) : \r\n", "label": "    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "}
{"task_id": 58, "prompt": "def opposite_Signs(x,y): \r\n", "label": "    return ((x ^ y) < 0); "}
{"task_id": 59, "prompt": "def is_octagonal(n): \r\n", "label": "\treturn 3 * n * n - 2 * n "}
{"task_id": 60, "prompt": "def max_len_sub( arr, n): \r\n", "label": "\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"}
{"task_id": 61, "prompt": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n", "label": "    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"}
{"task_id": 62, "prompt": "def smallest_num(xs):\n", "label": "  return min(xs)\n"}
{"task_id": 63, "prompt": "def max_difference(test_list):\r\n", "label": "  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "}
{"task_id": 64, "prompt": "def subject_marks(subjectmarks):\r\n", "label": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"}
{"task_id": 65, "prompt": "def recursive_list_sum(data_list):\r\n", "label": "\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"}
{"task_id": 66, "prompt": "def pos_count(list):\r\n", "label": "  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "}
{"task_id": 67, "prompt": "def bell_number(n):   \r\n", "label": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "}
{"task_id": 68, "prompt": "def is_Monotonic(A): \r\n", "label": "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "}
{"task_id": 69, "prompt": "def is_sublist(l, s):\r\n", "label": "\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"}
{"task_id": 70, "prompt": "def find_equal_tuple(Input, k):\r\n", "label": "  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"}
{"task_id": 71, "prompt": "def comb_sort(nums):\r\n", "label": "    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"}
{"task_id": 72, "prompt": "def dif_Square(n): \r\n", "label": "    if (n % 4 != 2): \r\n        return True\r\n    return False"}
{"task_id": 73, "prompt": "import re\r\ndef multiple_split(text):\r\n", "label": "  return (re.split('; |, |\\*|\\n',text))"}
{"task_id": 74, "prompt": "def is_samepatterns(colors, patterns):    \r\n", "label": "    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"}
{"task_id": 75, "prompt": "def find_tuples(test_list, K):\r\n", "label": "  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "}
{"task_id": 76, "prompt": "def count_Squares(m,n):\r\n", "label": "    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"}
{"task_id": 77, "prompt": "def is_Diff(n): \r\n", "label": "    return (n % 11 == 0) "}
{"task_id": 78, "prompt": "def count_With_Odd_SetBits(n): \r\n", "label": "    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "}
{"task_id": 79, "prompt": "def word_len(s): \r\n", "label": "    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"}
{"task_id": 80, "prompt": "def tetrahedral_number(n): \r\n", "label": "\treturn (n * (n + 1) * (n + 2)) / 6"}
{"task_id": 81, "prompt": "def zip_tuples(test_tup1, test_tup2):\r\n", "label": "  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "}
{"task_id": 82, "prompt": "import math\r\ndef volume_sphere(r):\r\n", "label": "  volume=(4/3)*math.pi*r*r*r\r\n  return volume"}
{"task_id": 83, "prompt": "def get_Char(strr):  \r\n", "label": "    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"}
{"task_id": 84, "prompt": "def sequence(n): \r\n", "label": "\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"}
{"task_id": 85, "prompt": "import math\r\ndef surfacearea_sphere(r):\r\n", "label": "  surfacearea=4*math.pi*r*r\r\n  return surfacearea"}
{"task_id": 86, "prompt": "def centered_hexagonal_number(n):\r\n", "label": "  return 3 * n * (n - 1) + 1"}
{"task_id": 87, "prompt": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n", "label": "    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"}
{"task_id": 88, "prompt": "import collections\r\ndef freq_count(list1):\r\n", "label": "  freq_count= collections.Counter(list1)\r\n  return freq_count"}
{"task_id": 89, "prompt": "def closest_num(N):\r\n", "label": "  return (N - 1)"}
{"task_id": 90, "prompt": "def len_log(list1):\r\n", "label": "    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"}
{"task_id": 91, "prompt": "def find_substring(str1, sub_str):\r\n", "label": "   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"}
{"task_id": 92, "prompt": "def is_undulating(n): \r\n", "label": "\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"}
{"task_id": 93, "prompt": "def power(a,b):\r\n", "label": "\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"}
{"task_id": 94, "prompt": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n", "label": "  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "}
{"task_id": 95, "prompt": "def Find_Min_Length(lst):  \r\n", "label": "    minLength = min(len(x) for x in lst )\r\n    return minLength "}
{"task_id": 96, "prompt": "def divisor(n):\r\n", "label": "  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"}
{"task_id": 97, "prompt": "def frequency_lists(list1):\r\n", "label": "    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"}
{"task_id": 98, "prompt": "def multiply_num(numbers):  \r\n", "label": "    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "}
{"task_id": 99, "prompt": "def decimal_to_binary(n): \r\n", "label": "    return bin(n).replace(\"0b\",\"\") "}
{"task_id": 100, "prompt": "import sys\r\ndef next_smallest_palindrome(num):\r\n", "label": "    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"}
{"task_id": 101, "prompt": "def kth_element(arr, n, k):\r\n", "label": "  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"}
{"task_id": 102, "prompt": "def snake_to_camel(word):\r\n", "label": "        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"task_id": 103, "prompt": "def eulerian_num(n, m): \r\n", "label": "\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"}
{"task_id": 104, "prompt": "def sort_sublists(input_list):\r\n", "label": "    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"}
{"task_id": 105, "prompt": "def count(lst):   \r\n", "label": "    return sum(lst) "}
{"task_id": 106, "prompt": "def add_lists(test_list, test_tup):\r\n", "label": "  res = tuple(list(test_tup) + test_list)\r\n  return (res) "}
{"task_id": 107, "prompt": "def count_Hexadecimal(L,R) :  \r\n", "label": "    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "}
{"task_id": 108, "prompt": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n", "label": "  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"}
{"task_id": 109, "prompt": "def odd_Equivalent(s,n): \r\n", "label": "    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "}
{"task_id": 110, "prompt": "def extract_missing(test_list, strt_val, stop_val):\r\n", "label": "  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "}
{"task_id": 111, "prompt": "def common_in_nested_lists(nestedlist):\r\n", "label": "    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"}
{"task_id": 112, "prompt": "def perimeter(diameter,height) : \r\n", "label": "    return 2*(diameter+height)  "}
{"task_id": 113, "prompt": "def check_integer(text):\r\n", "label": " text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"}
{"task_id": 114, "prompt": "from collections import Counter \r\ndef assign_freq(test_list):\r\n", "label": "  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "}
{"task_id": 115, "prompt": "def empty_dit(list1):\r\n", "label": " empty_dit=all(not d for d in list1)\r\n return empty_dit"}
{"task_id": 116, "prompt": "def tuple_to_int(nums):\r\n", "label": "    result = int(''.join(map(str,nums)))\r\n    return result"}
{"task_id": 117, "prompt": "def list_to_float(test_list):\r\n", "label": "  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "}
{"task_id": 118, "prompt": "def string_to_list(string): \r\n", "label": "    lst = list(string.split(\" \")) \r\n    return lst"}
{"task_id": 119, "prompt": "def search(arr,n) :\r\n", "label": "    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"}
{"task_id": 120, "prompt": "def max_product_tuple(list1):\r\n", "label": "    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"}
{"task_id": 121, "prompt": "def check_triplet(A, n, sum, count):\r\n", "label": "    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"}
{"task_id": 122, "prompt": "MAX = 3000 \r\ndef smartNumber(n): \r\n", "label": "\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "}
{"task_id": 123, "prompt": "def amicable_numbers_sum(limit):\r\n", "label": "    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"}
{"task_id": 124, "prompt": "import cmath\r\ndef angle_complex(a,b):\r\n", "label": "  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"}
{"task_id": 125, "prompt": "def find_length(string, n): \r\n", "label": "\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"}
{"task_id": 126, "prompt": "def sum(a,b): \r\n", "label": "    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"}
{"task_id": 127, "prompt": "def multiply_int(x, y):\r\n", "label": "    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"}
{"task_id": 128, "prompt": "def long_words(n, str):\r\n", "label": "    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"}
{"task_id": 129, "prompt": "def magic_square_test(my_matrix):\r\n", "label": "    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"}
{"task_id": 130, "prompt": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n", "label": "    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"}
{"task_id": 131, "prompt": "def reverse_vowels(str1):\r\n", "label": "\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"}
{"task_id": 132, "prompt": "def tup_string(tup1):\r\n", "label": "  str =  ''.join(tup1)\r\n  return str"}
{"task_id": 133, "prompt": "def sum_negativenum(nums):\r\n", "label": "  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"}
{"task_id": 134, "prompt": "def check_last (arr,n,p): \r\n", "label": "    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "}
{"task_id": 135, "prompt": "def hexagonal_num(n): \r\n", "label": "\treturn n*(2*n - 1) "}
{"task_id": 136, "prompt": "def cal_electbill(units):\r\n", "label": " if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"}
{"task_id": 137, "prompt": "from array import array\r\ndef zero_count(nums):\r\n", "label": "    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"}
{"task_id": 138, "prompt": "def is_Sum_Of_Powers_Of_Two(n): \r\n", "label": "    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"}
{"task_id": 139, "prompt": "def circle_circumference(r):\r\n", "label": "  perimeter=2*3.1415*r\r\n  return perimeter"}
{"task_id": 140, "prompt": "def extract_singly(test_list):\r\n", "label": "  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "}
{"task_id": 141, "prompt": "def pancake_sort(nums):\r\n", "label": "    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"}
{"task_id": 142, "prompt": "def count_samepair(list1,list2,list3):\r\n", "label": "    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"}
{"task_id": 143, "prompt": "def find_lists(Input): \r\n", "label": "\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "}
{"task_id": 144, "prompt": "def sum_Pairs(arr,n): \r\n", "label": "    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"}
{"task_id": 145, "prompt": "def max_Abs_Diff(arr,n): \r\n", "label": "    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "}
{"task_id": 146, "prompt": "def ascii_value_string(str1):\r\n", "label": "  for i in range(len(str1)):\r\n   return ord(str1[i])"}
{"task_id": 147, "prompt": "def max_path_sum(tri, m, n): \r\n", "label": "\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"}
{"task_id": 148, "prompt": "def sum_digits_single(x) : \r\n", "label": "    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "}
{"task_id": 149, "prompt": "def longest_subseq_with_diff_one(arr, n): \r\n", "label": "\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"}
{"task_id": 150, "prompt": "def does_Contain_B(a,b,c): \r\n", "label": "    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"}
{"task_id": 151, "prompt": "def gcd(p,q):\r\n", "label": "    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"}
{"task_id": 152, "prompt": "def merge(a,b):\r\n", "label": "    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"}
{"task_id": 153, "prompt": "def parabola_vertex(a, b, c): \r\n", "label": "  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"}
{"task_id": 154, "prompt": "def specified_element(nums, N):\r\n", "label": "    result = [i[N] for i in nums]\r\n    return result"}
{"task_id": 155, "prompt": "def even_bit_toggle_number(n) : \r\n", "label": "    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "}
{"task_id": 156, "prompt": "def tuple_int_str(tuple_str):\r\n", "label": "    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"}
{"task_id": 157, "prompt": "from itertools import groupby\r\ndef encode_list(list1):\r\n", "label": "    return [[len(list(group)), key] for key, group in groupby(list1)]"}
{"task_id": 158, "prompt": "def min_Ops(arr,n,k): \r\n", "label": "    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "}
{"task_id": 159, "prompt": "def month_season(month,days):\r\n", "label": " if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"}
{"task_id": 160, "prompt": "def solution (a, b, n): \r\n", "label": "\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "}
{"task_id": 161, "prompt": "def remove_elements(list1, list2):\r\n", "label": "    result = [x for x in list1 if x not in list2]\r\n    return result"}
{"task_id": 162, "prompt": "def sum_series(n):\r\n", "label": "  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"}
{"task_id": 163, "prompt": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n", "label": "  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"}
{"task_id": 164, "prompt": "import math \r\ndef divSum(n): \r\n", "label": "    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "}
{"task_id": 165, "prompt": "def count_char_position(str1): \r\n", "label": "    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "}
{"task_id": 166, "prompt": "def find_even_Pair(A,N): \r\n", "label": "    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "}
{"task_id": 167, "prompt": "def next_Power_Of_2(n): \r\n", "label": "    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "}
{"task_id": 168, "prompt": "def frequency(a,x): \r\n", "label": "    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "}
{"task_id": 169, "prompt": "def get_pell(n): \r\n", "label": "\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "}
{"task_id": 170, "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n", "label": "    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "}
{"task_id": 171, "prompt": "import math\r\ndef perimeter_pentagon(a):\r\n", "label": "  perimeter=(5*a)\r\n  return perimeter"}
{"task_id": 172, "prompt": "def count_occurance(s):\r\n", "label": "  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"}
{"task_id": 173, "prompt": "import re\r\ndef remove_splchar(text): \r\n", "label": " pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"}
{"task_id": 174, "prompt": "def group_keyvalue(l):\r\n", "label": "    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"}
{"task_id": 175, "prompt": "def is_valid_parenthese( str1):\r\n", "label": "        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"}
{"task_id": 176, "prompt": "def perimeter_triangle(a,b,c):\r\n", "label": "  perimeter=a+b+c\r\n  return perimeter"}
{"task_id": 177, "prompt": "def answer(L,R): \r\n", "label": "    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "}
{"task_id": 178, "prompt": "import re\r\ndef string_literals(patterns,text):\r\n", "label": "  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"}
{"task_id": 179, "prompt": "def is_num_keith(x): \r\n", "label": "\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "}
{"task_id": 180, "prompt": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n", "label": " dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"}
{"task_id": 181, "prompt": "def common_prefix_util(str1, str2): \r\n", "label": "\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "}
{"task_id": 182, "prompt": "import re\r\ndef find_character(string):\r\n", "label": "  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"}
{"task_id": 183, "prompt": "def count_pairs(arr, n, k):\r\n", "label": "  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"}
{"task_id": 184, "prompt": "def greater_specificnum(list,num):\r\n", "label": " greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"}
{"task_id": 185, "prompt": "def parabola_focus(a, b, c): \r\n", "label": "  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"}
{"task_id": 186, "prompt": "import re\r\ndef check_literals(text, patterns):\r\n", "label": "  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"}
{"task_id": 187, "prompt": "def longest_common_subsequence(X, Y, m, n): \r\n", "label": "    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"}
{"task_id": 188, "prompt": "def prod_Square(n):\r\n", "label": "    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"}
{"task_id": 189, "prompt": "def first_Missing_Positive(arr,n): \r\n", "label": "    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"}
{"task_id": 190, "prompt": "def count_Intgral_Points(x1,y1,x2,y2): \r\n", "label": "    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "}
{"task_id": 191, "prompt": "def check_monthnumber(monthname3):\r\n", "label": "  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": 192, "prompt": "def check_String(str): \r\n", "label": "    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "}
{"task_id": 193, "prompt": "def remove_tuple(test_tup):\r\n", "label": "  res = tuple(set(test_tup))\r\n  return (res) "}
{"task_id": 194, "prompt": "def octal_To_Decimal(n):  \r\n", "label": "    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "}
{"task_id": 195, "prompt": "def first(arr,x,n): \r\n", "label": "    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"}
{"task_id": 196, "prompt": "def remove_tuples(test_list, K):\r\n", "label": "  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "}
{"task_id": 197, "prompt": "def find_exponentio(test_tup1, test_tup2):\r\n", "label": "  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"}
{"task_id": 198, "prompt": "import math\r\ndef largest_triangle(a,b): \r\n", "label": "    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "}
{"task_id": 199, "prompt": "def highest_Power_of_2(n): \r\n", "label": "    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "}
{"task_id": 200, "prompt": "def position_max(list1):\r\n", "label": "    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"}
{"task_id": 201, "prompt": "def chkList(lst): \r\n", "label": "    return len(set(lst)) == 1"}
{"task_id": 202, "prompt": "def remove_even(str1):\r\n", "label": " str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"}
{"task_id": 203, "prompt": "def hamming_Distance(n1,n2) : \r\n", "label": "    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "}
{"task_id": 204, "prompt": "def count(s,c) : \r\n", "label": "    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "}
{"task_id": 205, "prompt": "def inversion_elements(test_tup):\r\n", "label": "  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "}
{"task_id": 206, "prompt": "def concatenate_elements(test_tup):\r\n", "label": "  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "}
{"task_id": 207, "prompt": "def find_longest_repeating_subseq(str): \r\n", "label": "\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"}
{"task_id": 208, "prompt": "import re\r\ndef is_decimal(num):\r\n", "label": "  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"}
{"task_id": 209, "prompt": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n", "label": "  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"}
{"task_id": 210, "prompt": "import re\r\ndef is_allowed_specific_char(string):\r\n", "label": "    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"}
{"task_id": 211, "prompt": "def count_Num(n): \r\n", "label": "    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "}
{"task_id": 212, "prompt": "import math  \r\ndef fourth_Power_Sum(n): \r\n", "label": "    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"}
{"task_id": 213, "prompt": "def concatenate_strings(test_tup1, test_tup2):\r\n", "label": "  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 214, "prompt": "import math\r\ndef degree_radian(radian):\r\n", "label": " degree = radian*(180/math.pi)\r\n return degree"}
{"task_id": 215, "prompt": "def decode_list(alist):\r\n", "label": "    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"}
{"task_id": 216, "prompt": "def check_subset_list(list1, list2): \r\n", "label": "    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "}
{"task_id": 217, "prompt": "def first_Repeated_Char(str): \r\n", "label": "    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"}
{"task_id": 218, "prompt": "import math   \r\ndef min_Operations(A,B):  \r\n", "label": "    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"}
{"task_id": 219, "prompt": "\r\ndef extract_min_max(test_tup, K):\r\n", "label": "  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "}
{"task_id": 220, "prompt": "import re\r\ndef replace_max_specialchar(text,n):\r\n", "label": " return (re.sub(\"[ ,.]\", \":\", text, n))"}
{"task_id": 221, "prompt": "def first_even(nums):\r\n", "label": "    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"}
{"task_id": 222, "prompt": "def check_type(test_tuple):\r\n", "label": "  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "}
{"task_id": 223, "prompt": "def is_majority(arr, n, x):\r\n", "label": "\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"}
{"task_id": 224, "prompt": "def count_Set_Bits(n): \r\n", "label": "    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "}
{"task_id": 225, "prompt": "def find_Min(arr,low,high): \r\n", "label": "    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "}
{"task_id": 226, "prompt": "def odd_values_string(str):\r\n", "label": "  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"}
{"task_id": 227, "prompt": "def min_of_three(a,b,c): \r\n", "label": "      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "}
{"task_id": 228, "prompt": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n", "label": "    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"}
{"task_id": 229, "prompt": "def re_arrange_array(arr, n):\r\n", "label": "  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"}
{"task_id": 230, "prompt": "def replace_blank(str1,char):\r\n", "label": " str2 = str1.replace(' ', char)\r\n return str2"}
{"task_id": 231, "prompt": "def max_sum(tri, n): \r\n", "label": "\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"}
{"task_id": 232, "prompt": "import heapq\r\ndef larg_nnum(list1,n):\r\n", "label": " largest=heapq.nlargest(n,list1)\r\n return largest"}
{"task_id": 233, "prompt": "def lateralsuface_cylinder(r,h):\r\n", "label": "  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"}
{"task_id": 234, "prompt": "def volume_cube(l):\r\n", "label": "  volume = l * l * l\r\n  return volume"}
{"task_id": 235, "prompt": "def even_bit_set_number(n): \r\n", "label": "    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "}
{"task_id": 236, "prompt": "def No_of_Triangle(N,K):\r\n", "label": "    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"}
{"task_id": 237, "prompt": "from collections import Counter \r\ndef check_occurences(test_list):\r\n", "label": "  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "}
{"task_id": 238, "prompt": "def number_of_substrings(str): \r\n", "label": "\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "}
{"task_id": 239, "prompt": "def get_total_number_of_sequences(m,n): \r\n", "label": "\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"}
{"task_id": 240, "prompt": "def replace_list(list1,list2):\r\n", "label": " list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"}
{"task_id": 241, "prompt": "def array_3d(m,n,o):\r\n", "label": " array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"}
{"task_id": 242, "prompt": "def count_charac(str1):\r\n", "label": " total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"}
{"task_id": 243, "prompt": "def sort_on_occurence(lst): \r\n", "label": "\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "}
{"task_id": 244, "prompt": "import math  \r\ndef next_Perfect_Square(N): \r\n", "label": "    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "}
{"task_id": 245, "prompt": "def max_sum(arr, n): \r\n", "label": "\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"}
{"task_id": 246, "prompt": "def babylonian_squareroot(number):\r\n", "label": "    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"}
{"task_id": 247, "prompt": "def lps(str): \r\n", "label": "\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"}
{"task_id": 248, "prompt": "def harmonic_sum(n):\r\n", "label": "  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "}
{"task_id": 249, "prompt": "def intersection_array(array_nums1,array_nums2):\r\n", "label": " result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"}
{"task_id": 250, "prompt": "def count_X(tup, x): \r\n", "label": "    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "}
{"task_id": 251, "prompt": "def insert_element(list,element):\r\n", "label": " list = [v for elt in list for v in (element, elt)]\r\n return list"}
{"task_id": 252, "prompt": "import cmath  \r\ndef convert(numbers):    \r\n", "label": "  num = cmath.polar(numbers)  \r\n  return (num) "}
{"task_id": 253, "prompt": "def count_integer(list1):\r\n", "label": "    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"}
{"task_id": 254, "prompt": "import re\r\ndef words_ae(text):\r\n", "label": " list = re.findall(\"[ae]\\w+\", text)\r\n return list"}
{"task_id": 255, "prompt": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n", "label": "    return list(combinations_with_replacement(l,n))\r"}
{"task_id": 256, "prompt": "def count_Primes_nums(n):\r\n", "label": "    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"}
{"task_id": 257, "prompt": "def swap_numbers(a,b):\r\n", "label": " temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"}
{"task_id": 258, "prompt": "def count_odd(array_nums):\r\n", "label": "   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"}
{"task_id": 259, "prompt": "def maximize_elements(test_tup1, test_tup2):\r\n", "label": "  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 260, "prompt": "def newman_prime(n): \r\n", "label": "\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"}
{"task_id": 261, "prompt": "def division_elements(test_tup1, test_tup2):\r\n", "label": "  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 262, "prompt": "def split_two_parts(list1, L):\r\n", "label": "    return list1[:L], list1[L:]"}
{"task_id": 263, "prompt": "def merge_dict(d1,d2):\r\n", "label": " d = d1.copy()\r\n d.update(d2)\r\n return d"}
{"task_id": 264, "prompt": "def dog_age(h_age):\r\n", "label": " if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"}
{"task_id": 265, "prompt": "def list_split(S, step):\r\n", "label": "    return [S[i::step] for i in range(step)]"}
{"task_id": 266, "prompt": "def lateralsurface_cube(l):\r\n", "label": "  LSA = 4 * (l * l)\r\n  return LSA"}
{"task_id": 267, "prompt": "def square_Sum(n):  \r\n", "label": "    return int(n*(4*n*n-1)/3) "}
{"task_id": 268, "prompt": "def find_star_num(n): \r\n", "label": "\treturn (6 * n * (n - 1) + 1) "}
{"task_id": 269, "prompt": "def ascii_value(k):\r\n", "label": "  ch=k\r\n  return ord(ch)"}
{"task_id": 270, "prompt": "def sum_even_and_even_index(arr,n):  \r\n", "label": "    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"}
{"task_id": 271, "prompt": "def even_Power_Sum(n): \r\n", "label": "    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "}
{"task_id": 272, "prompt": "def rear_extract(test_list):\r\n", "label": "  res = [lis[-1] for lis in test_list]\r\n  return (res) "}
{"task_id": 273, "prompt": "def substract_elements(test_tup1, test_tup2):\r\n", "label": "  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 274, "prompt": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n", "label": "    return (1 << (n - 1)) "}
{"task_id": 275, "prompt": "import math as mt \r\ndef get_Position(a,n,m): \r\n", "label": "    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"}
{"task_id": 276, "prompt": "def volume_cylinder(r,h):\r\n", "label": "  volume=3.1415*r*r*h\r\n  return volume"}
{"task_id": 277, "prompt": "def dict_filter(dict,n):\r\n", "label": " result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"}
{"task_id": 278, "prompt": "def count_first_elements(test_tup):\r\n", "label": "  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "}
{"task_id": 279, "prompt": "def is_num_decagonal(n): \r\n", "label": "\treturn 4 * n * n - 3 * n "}
{"task_id": 280, "prompt": "def sequential_search(dlist, item):\r\n", "label": "    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"}
{"task_id": 281, "prompt": "def all_unique(test_list):\r\n", "label": "    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"}
{"task_id": 282, "prompt": "def sub_list(nums1,nums2):\r\n", "label": "  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"}
{"task_id": 283, "prompt": "def validate(n): \r\n", "label": "    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"}
{"task_id": 284, "prompt": "def check_element(list,element):\r\n", "label": "  check_element=all(v== element for v in list)\r\n  return check_element"}
{"task_id": 285, "prompt": "import re\r\ndef text_match_two_three(text):\r\n", "label": "        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": 286, "prompt": "def max_sub_array_sum_repeated(a, n, k): \r\n", "label": "\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"}
{"task_id": 287, "prompt": "def square_Sum(n):  \r\n", "label": "    return int(2*n*(n+1)*(2*n+1)/3)"}
{"task_id": 288, "prompt": "def modular_inverse(arr, N, P):\r\n", "label": "\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"}
{"task_id": 289, "prompt": "def odd_Days(N): \r\n", "label": "    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "}
{"task_id": 290, "prompt": "def max_length(list1):\r\n", "label": "    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"}
{"task_id": 291, "prompt": "def count_no_of_ways(n, k): \r\n", "label": "\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"}
{"task_id": 292, "prompt": "def find(n,m):  \r\n", "label": "    q = n//m \r\n    return (q)"}
{"task_id": 293, "prompt": "import math\r\ndef otherside_rightangle(w,h):\r\n", "label": "  s=math.sqrt((w*w)+(h*h))\r\n  return s"}
{"task_id": 294, "prompt": "def max_val(listval):\r\n", "label": "     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"}
{"task_id": 295, "prompt": "def sum_div(number):\r\n", "label": "    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"}
{"task_id": 296, "prompt": "def get_Inv_Count(arr,n): \r\n", "label": "    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "}
{"task_id": 297, "prompt": "def flatten_list(list1):\r\n", "label": "    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "}
{"task_id": 298, "prompt": "def intersection_nested_lists(l1, l2):\r\n", "label": "    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"}
{"task_id": 299, "prompt": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n", "label": "    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"}
{"task_id": 300, "prompt": "def count_binary_seq(n): \r\n", "label": "\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "}
{"task_id": 301, "prompt": "def dict_depth(d):\r\n", "label": "    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"}
{"task_id": 302, "prompt": "def set_Bit_Number(n): \r\n", "label": "    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"}
{"task_id": 303, "prompt": "import sys \r\ndef solve(a,n):   \r\n", "label": "    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"}
{"task_id": 304, "prompt": "def find_Element(arr,ranges,rotations,index) :  \r\n", "label": "    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "}
{"task_id": 305, "prompt": "import re\r\ndef start_withp(words):\r\n", "label": " for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"}
{"task_id": 306, "prompt": "def max_sum_increasing_subseq(a, n, index, k):\r\n", "label": "\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"}
{"task_id": 307, "prompt": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n", "label": "  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"}
{"task_id": 308, "prompt": "def large_product(nums1, nums2, N):\r\n", "label": "    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"}
{"task_id": 309, "prompt": "def maximum(a,b):   \r\n", "label": "    if a >= b: \r\n        return a \r\n    else: \r\n        return b "}
{"task_id": 310, "prompt": "def string_to_tuple(str1):\r\n", "label": "    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"}
{"task_id": 311, "prompt": "def set_left_most_unset_bit(n): \r\n", "label": "    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "}
{"task_id": 312, "prompt": "import math\r\ndef volume_cone(r,h):\r\n", "label": "  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"}
{"task_id": 313, "prompt": "def pos_nos(list1):\r\n", "label": "  for num in list1: \r\n    if num >= 0: \r\n       return num "}
{"task_id": 314, "prompt": "def max_sum_rectangular_grid(grid, n) : \r\n", "label": "\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"}
{"task_id": 315, "prompt": "def find_Max_Len_Even(str): \r\n", "label": "    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "}
{"task_id": 316, "prompt": "def find_last_occurrence(A, x):\r\n", "label": "    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "}
{"task_id": 317, "prompt": "from itertools import groupby\r\ndef modified_encode(alist):\r\n", "label": "        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"}
{"task_id": 318, "prompt": "def max_volume (s): \r\n", "label": "    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "}
{"task_id": 319, "prompt": "import re\r\ndef find_long_word(text):\r\n", "label": "  return (re.findall(r\"\\b\\w{5}\\b\", text))"}
{"task_id": 320, "prompt": "def sum_difference(n):\r\n", "label": "    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"}
{"task_id": 321, "prompt": "def find_demlo(s): \r\n", "label": "\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"}
{"task_id": 322, "prompt": "def position_min(list1):\r\n", "label": "    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"}
{"task_id": 323, "prompt": "def right_rotate(arr, n, out_of_place, cur):\r\n", "label": "\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"}
{"task_id": 324, "prompt": "def sum_of_alternates(test_tuple):\r\n", "label": "  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "}
{"task_id": 325, "prompt": "def get_Min_Squares(n):\r\n", "label": "    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"}
{"task_id": 326, "prompt": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n", "label": "  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "}
{"task_id": 327, "prompt": "def check_isosceles(x,y,z):\r\n", "label": "  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"}
{"task_id": 328, "prompt": "def rotate_left(list1,m,n):\r\n", "label": "  result =  list1[m:]+list1[:n]\r\n  return result"}
{"task_id": 329, "prompt": "def neg_count(list):\r\n", "label": "  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "}
{"task_id": 330, "prompt": "import re\r\ndef find_char(text):\r\n", "label": "  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"}
{"task_id": 331, "prompt": "def count_unset_bits(n): \r\n", "label": "    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "}
{"task_id": 332, "prompt": "def char_frequency(str1):\r\n", "label": "    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"}
{"task_id": 333, "prompt": "def Sort(sub_li): \r\n", "label": "    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "}
{"task_id": 334, "prompt": "def check_Validity(a,b,c):  \r\n", "label": "    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "}
{"task_id": 335, "prompt": "def ap_sum(a,n,d):\r\n", "label": "  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"}
{"task_id": 336, "prompt": "def check_monthnum(monthname1):\r\n", "label": "  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": 337, "prompt": "import re\r\ndef text_match_word(text):\r\n", "label": "        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"}
{"task_id": 338, "prompt": "def check_Equality(s): \r\n", "label": "    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "}
{"task_id": 339, "prompt": "def find_Divisor(x,y):  \r\n", "label": "    if (x==y): \r\n        return y \r\n    return 2"}
{"task_id": 340, "prompt": "def sum_three_smallest_nums(lst):\r\n", "label": "\treturn sum(sorted([x for x in lst if x > 0])[:3])"}
{"task_id": 341, "prompt": "def set_to_tuple(s):\r\n", "label": "  t = tuple(sorted(s))\r\n  return (t)"}
{"task_id": 342, "prompt": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n", "label": "    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"}
{"task_id": 343, "prompt": "def dig_let(s):\r\n", "label": " d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"}
{"task_id": 344, "prompt": "def count_Odd_Squares(n,m): \r\n", "label": "    return int(m**0.5) - int((n-1)**0.5) "}
{"task_id": 345, "prompt": "def diff_consecutivenums(nums):\r\n", "label": "    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"task_id": 346, "prompt": "def zigzag(n, k): \r\n", "label": "\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"}
{"task_id": 347, "prompt": "def count_Squares(m,n): \r\n", "label": "    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"}
{"task_id": 348, "prompt": "def bin_coff(n, r): \r\n", "label": "\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "}
{"task_id": 349, "prompt": "def check(string) :\r\n", "label": "    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "}
{"task_id": 350, "prompt": "def minimum_Length(s) : \r\n", "label": "    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "}
{"task_id": 351, "prompt": "def first_Element(arr,n,k): \r\n", "label": "    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"}
{"task_id": 352, "prompt": "def unique_Characters(str):\r\n", "label": "    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"}
{"task_id": 353, "prompt": "def remove_column(list1, n):\r\n", "label": "   for i in list1: \r\n    del i[n] \r\n   return list1"}
{"task_id": 354, "prompt": "def tn_ap(a,n,d):\r\n", "label": "  tn = a + (n - 1) * d\r\n  return tn"}
{"task_id": 355, "prompt": "def count_Rectangles(radius):  \r\n", "label": "    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "}
{"task_id": 356, "prompt": "def find_angle(a,b):\r\n", "label": " c = 180 - (a + b)\r\n return c\r\n"}
{"task_id": 357, "prompt": "def find_max(test_list):\r\n", "label": "  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "}
{"task_id": 358, "prompt": "def moddiv_list(nums1,nums2):\r\n", "label": "  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"}
{"task_id": 359, "prompt": "def Check_Solution(a,b,c): \r\n", "label": "    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "}
{"task_id": 360, "prompt": "def get_carol(n): \r\n", "label": "\tresult = (2**n) - 1\r\n\treturn result * result - 2"}
{"task_id": 361, "prompt": "def remove_empty(list1):\r\n", "label": "  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"}
{"task_id": 362, "prompt": "def max_occurrences(nums):\r\n", "label": "    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}
{"task_id": 363, "prompt": "def add_K_element(test_list, K):\r\n", "label": "  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "}
{"task_id": 364, "prompt": "def make_flip(ch): \r\n", "label": "\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "}
{"task_id": 365, "prompt": "def count_Digit(n):\r\n", "label": "    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"}
{"task_id": 366, "prompt": "def adjacent_num_product(list_nums):\r\n", "label": "    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"}
{"task_id": 367, "prompt": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n", "label": "\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"}
{"task_id": 368, "prompt": "def repeat_tuples(test_tup, N):\r\n", "label": "  res = ((test_tup, ) * N)\r\n  return (res) "}
{"task_id": 369, "prompt": "def lateralsurface_cuboid(l,w,h):\r\n", "label": "  LSA = 2*h*(l+w)\r\n  return LSA"}
{"task_id": 370, "prompt": "def float_sort(price):\r\n", "label": "  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"}
{"task_id": 371, "prompt": "def smallest_missing(A, left_element, right_element):\r\n", "label": "    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"}
{"task_id": 372, "prompt": "import heapq as hq\r\ndef heap_assending(nums):\r\n", "label": "  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"}
{"task_id": 373, "prompt": "def volume_cuboid(l,w,h):\r\n", "label": "  volume=l*w*h\r\n  return volume"}
{"task_id": 374, "prompt": "def permute_string(str):\r\n", "label": "    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"}
{"task_id": 375, "prompt": "def round_num(n,m):\r\n", "label": "    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"}
{"task_id": 376, "prompt": "def remove_replica(test_tup):\r\n", "label": "  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"}
{"task_id": 377, "prompt": "def remove_Char(s,c) :  \r\n", "label": "    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "}
{"task_id": 378, "prompt": "def move_first(test_list):\r\n", "label": "  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"}
{"task_id": 379, "prompt": "def surfacearea_cuboid(l,w,h):\r\n", "label": "  SA = 2*(l*w + l * h + w * h)\r\n  return SA"}
{"task_id": 380, "prompt": "def multi_list(rownum,colnum):\r\n", "label": "  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"}
{"task_id": 381, "prompt": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n", "label": "    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"}
{"task_id": 382, "prompt": "def find_rotation_count(A):\r\n", "label": "    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"}
{"task_id": 383, "prompt": "def even_bit_toggle_number(n) : \r\n", "label": "    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "}
{"task_id": 384, "prompt": "def frequency_Of_Smallest(n,arr): \r\n", "label": "    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "}
{"task_id": 385, "prompt": "def get_perrin(n):\r\n", "label": "  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"}
{"task_id": 386, "prompt": "def swap_count(s):\r\n", "label": "\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"}
{"task_id": 387, "prompt": "def even_or_odd(N): \r\n", "label": "    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "}
{"task_id": 388, "prompt": "def highest_Power_of_2(n): \r\n", "label": "    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "}
{"task_id": 389, "prompt": "def find_lucas(n): \r\n", "label": "\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "}
{"task_id": 390, "prompt": "def add_string(list,string):\r\n", "label": " add_string=[string.format(i) for i in  list]\r\n return add_string"}
{"task_id": 391, "prompt": "def convert_list_dictionary(l1, l2, l3):\r\n", "label": "     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"}
{"task_id": 392, "prompt": "def get_max_sum (n):\r\n", "label": "\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"}
{"task_id": 393, "prompt": "def max_length_list(input_list):\r\n", "label": "    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"}
{"task_id": 394, "prompt": "def check_distinct(test_tup):\r\n", "label": "  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "}
{"task_id": 395, "prompt": "def first_non_repeating_character(str1):\r\n", "label": "  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"}
{"task_id": 396, "prompt": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n", "label": "\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "}
{"task_id": 397, "prompt": "def median_numbers(a,b,c):\r\n", "label": " if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"}
{"task_id": 398, "prompt": "def sum_of_digits(nums):\r\n", "label": "    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"}
{"task_id": 399, "prompt": "def bitwise_xor(test_tup1, test_tup2):\r\n", "label": "  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 400, "prompt": "def extract_freq(test_list):\r\n", "label": "  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"}
{"task_id": 401, "prompt": "def add_nested_tuples(test_tup1, test_tup2):\r\n", "label": "  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 402, "prompt": "def ncr_modp(n, r, p): \r\n", "label": "    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "}
{"task_id": 403, "prompt": "import re\r\ndef is_valid_URL(str):\r\n", "label": "\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"}
{"task_id": 404, "prompt": "def minimum(a,b):   \r\n", "label": "    if a <= b: \r\n        return a \r\n    else: \r\n        return b "}
{"task_id": 405, "prompt": "def check_tuplex(tuplex,tuple1): \r\n", "label": "  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"}
{"task_id": 406, "prompt": "def find_Parity(x): \r\n", "label": "    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "}
{"task_id": 407, "prompt": "def rearrange_bigger(n):\r\n", "label": "    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"}
{"task_id": 408, "prompt": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n", "label": "   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"}
{"task_id": 409, "prompt": "def min_product_tuple(list1):\r\n", "label": "    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"}
{"task_id": 410, "prompt": "def min_val(listval):\r\n", "label": "     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"}
{"task_id": 411, "prompt": "import re\r\ndef snake_to_camel(word):\r\n", "label": "  return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"task_id": 412, "prompt": "def remove_odd(l):\r\n", "label": "    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"}
{"task_id": 413, "prompt": "def extract_nth_element(list1, n):\r\n", "label": "    result = [x[n] for x in list1]\r\n    return result"}
{"task_id": 414, "prompt": "def overlapping(list1,list2):  \r\n", "label": "    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"}
{"task_id": 415, "prompt": "def max_Product(arr): \r\n", "label": "    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "}
{"task_id": 416, "prompt": "MAX = 1000000\r\ndef breakSum(n): \r\n", "label": "\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"}
{"task_id": 417, "prompt": "def group_tuples(Input): \r\n", "label": "\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "}
{"task_id": 418, "prompt": "def Find_Max(lst): \r\n", "label": "    maxList = max((x) for x in lst) \r\n    return maxList"}
{"task_id": 419, "prompt": "def round_and_sum(list1):\r\n", "label": "  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"}
{"task_id": 420, "prompt": "def cube_Sum(n): \r\n", "label": "    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"}
{"task_id": 421, "prompt": "def concatenate_tuple(test_tup):\r\n", "label": "    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "}
{"task_id": 422, "prompt": "def find_Average_Of_Cube(n):  \r\n", "label": "    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "}
{"task_id": 423, "prompt": "def get_maxgold(gold, m, n): \r\n", "label": "    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "}
{"task_id": 424, "prompt": "def extract_rear(test_tuple):\r\n", "label": "  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "}
{"task_id": 425, "prompt": "def count_element_in_list(list1, x): \r\n", "label": "    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"}
{"task_id": 426, "prompt": "def filter_oddnumbers(nums):\r\n", "label": " odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"}
{"task_id": 427, "prompt": "import re\r\ndef change_date_format(dt):\r\n", "label": "        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"}
{"task_id": 428, "prompt": "def shell_sort(my_list):\r\n", "label": "    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"}
{"task_id": 429, "prompt": "def and_tuples(test_tup1, test_tup2):\r\n", "label": "  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 430, "prompt": "def parabola_directrix(a, b, c): \r\n", "label": "  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"}
{"task_id": 431, "prompt": "def common_element(list1, list2):\r\n", "label": "     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"}
{"task_id": 432, "prompt": "def median_trapezium(base1,base2,height):\r\n", "label": " median = 0.5 * (base1+ base2)\r\n return median"}
{"task_id": 433, "prompt": "def check_greater(arr, number):\r\n", "label": "  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"}
{"task_id": 434, "prompt": "import re\r\ndef text_match_one(text):\r\n", "label": "        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"}
{"task_id": 435, "prompt": "def last_Digit(n) :\r\n", "label": "    return (n % 10) "}
{"task_id": 436, "prompt": "def neg_nos(list1):\r\n", "label": "  for num in list1: \r\n    if num < 0: \r\n       return num "}
{"task_id": 437, "prompt": "def remove_odd(str1):\r\n", "label": " str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"}
{"task_id": 438, "prompt": "def count_bidirectional(test_list):\r\n", "label": "  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "}
{"task_id": 439, "prompt": "def multiple_to_single(L):\r\n", "label": "  x = int(\"\".join(map(str, L)))\r\n  return x"}
{"task_id": 440, "prompt": "import re\r\ndef find_adverb_position(text):\r\n", "label": " for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"}
{"task_id": 441, "prompt": "def surfacearea_cube(l):\r\n", "label": "  surfacearea= 6*l*l\r\n  return surfacearea"}
{"task_id": 442, "prompt": "from array import array\r\ndef positive_count(nums):\r\n", "label": "    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"}
{"task_id": 443, "prompt": "def largest_neg(list1): \r\n", "label": "    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"}
{"task_id": 444, "prompt": "def trim_tuple(test_list, K):\r\n", "label": "  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "}
{"task_id": 445, "prompt": "def index_multiplication(test_tup1, test_tup2):\r\n", "label": "  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 446, "prompt": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n", "label": "    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "}
{"task_id": 447, "prompt": "def cube_nums(nums):\r\n", "label": " cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"}
{"task_id": 448, "prompt": "def cal_sum(n): \r\n", "label": "\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"}
{"task_id": 449, "prompt": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n", "label": "    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "}
{"task_id": 450, "prompt": "def extract_string(str, l):\r\n", "label": "    result = [e for e in str if len(e) == l] \r\n    return result"}
{"task_id": 451, "prompt": "import re\r\ndef remove_whitespaces(text1):\r\n", "label": "  return (re.sub(r'\\s+', '',text1))"}
{"task_id": 452, "prompt": "def loss_amount(actual_cost,sale_amount): \r\n", "label": "  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"}
{"task_id": 453, "prompt": "import math \r\ndef sumofFactors(n) : \r\n", "label": "    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "}
{"task_id": 454, "prompt": "import re\r\ndef text_match_wordz(text):\r\n", "label": "        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": 455, "prompt": "def check_monthnumb_number(monthnum2):\r\n", "label": "  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": 456, "prompt": "def reverse_string_list(stringlist):\r\n", "label": "    result = [x[::-1] for x in stringlist]\r\n    return result"}
{"task_id": 457, "prompt": "def Find_Min(lst): \r\n", "label": "    minList = min((x) for x in lst) \r\n    return minList"}
{"task_id": 458, "prompt": "def rectangle_area(l,b):\r\n", "label": "  area=l*b\r\n  return area"}
{"task_id": 459, "prompt": "import re\r\ndef remove_uppercase(str1):\r\n", "label": "  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"}
{"task_id": 460, "prompt": "def Extract(lst): \r\n", "label": "    return [item[0] for item in lst] "}
{"task_id": 461, "prompt": "def upper_ctr(str):\r\n", "label": "    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"}
{"task_id": 462, "prompt": "def combinations_list(list1):\r\n", "label": "    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"}
{"task_id": 463, "prompt": "def max_subarray_product(arr):\r\n", "label": "\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"}
{"task_id": 464, "prompt": "def check_value(dict, n):\r\n", "label": "    result = all(x == n for x in dict.values()) \r\n    return result"}
{"task_id": 465, "prompt": "def drop_empty(dict1):\r\n", "label": "  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"}
{"task_id": 466, "prompt": "def find_peak_util(arr, low, high, n): \r\n", "label": "\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "}
{"task_id": 467, "prompt": "def decimal_to_Octal(deciNum):\r\n", "label": "    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"}
{"task_id": 468, "prompt": "def max_product(arr, n ): \r\n", "label": "\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"}
{"task_id": 469, "prompt": "def max_profit(price, k):\r\n", "label": "    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"}
{"task_id": 470, "prompt": "def add_pairwise(test_tup):\r\n", "label": "  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "}
{"task_id": 471, "prompt": "def find_remainder(arr, lens, n): \r\n", "label": "    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "}
{"task_id": 472, "prompt": "def check_Consecutive(l): \r\n", "label": "    return sorted(l) == list(range(min(l),max(l)+1)) "}
{"task_id": 473, "prompt": "def tuple_intersection(test_list1, test_list2):\r\n", "label": "  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"}
{"task_id": 474, "prompt": "def replace_char(str1,ch,newch):\r\n", "label": " str2 = str1.replace(ch, newch)\r\n return str2"}
{"task_id": 475, "prompt": "from collections import Counter\r\ndef sort_counter(dict1):\r\n", "label": " x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"}
{"task_id": 476, "prompt": "def big_sum(nums):\r\n", "label": "      sum= max(nums)+min(nums)\r\n      return sum"}
{"task_id": 477, "prompt": "def is_lower(string):\r\n", "label": "  return (string.lower())"}
{"task_id": 478, "prompt": "import re\r\ndef remove_lowercase(str1):\r\n", "label": " remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"}
{"task_id": 479, "prompt": "def first_Digit(n) :  \r\n", "label": "    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "}
{"task_id": 480, "prompt": "def get_max_occuring_char(str1):\r\n", "label": "  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"}
{"task_id": 481, "prompt": "def is_subset_sum(set, n, sum):\r\n", "label": "\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"}
{"task_id": 482, "prompt": "import re \r\ndef match(text): \r\n", "label": "\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "}
{"task_id": 483, "prompt": "def first_Factorial_Divisible_Number(x): \r\n", "label": "    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "}
{"task_id": 484, "prompt": "def remove_matching_tuple(test_list1, test_list2):\r\n", "label": "  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "}
{"task_id": 485, "prompt": "def is_palindrome(n) : \r\n", "label": "\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"}
{"task_id": 486, "prompt": "def nCr(n, r): \r\n", "label": "\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "}
{"task_id": 487, "prompt": "def sort_tuple(tup): \r\n", "label": "\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"}
{"task_id": 488, "prompt": "import math\r\ndef area_pentagon(a):\r\n", "label": "  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"}
{"task_id": 489, "prompt": "def frequency_Of_Largest(n,arr): \r\n", "label": "    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "}
{"task_id": 490, "prompt": "def extract_symmetric(test_list):\r\n", "label": "  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "}
{"task_id": 491, "prompt": "import math\r\ndef sum_gp(a,n,r):\r\n", "label": " total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"}
{"task_id": 492, "prompt": "def binary_search(item_list,item):\r\n", "label": "\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"}
{"task_id": 493, "prompt": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n", "label": "    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"}
{"task_id": 494, "prompt": "def binary_to_integer(test_tup):\r\n", "label": "  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "}
{"task_id": 495, "prompt": "import re\r\ndef remove_lowercase(str1):\r\n", "label": "  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"}
{"task_id": 496, "prompt": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n", "label": "  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"}
{"task_id": 497, "prompt": "import math\r\ndef surfacearea_cone(r,h):\r\n", "label": "  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"}
{"task_id": 498, "prompt": "def gcd(x, y):\r\n", "label": "    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"}
{"task_id": 499, "prompt": "def diameter_circle(r):\r\n", "label": "  diameter=2*r\r\n  return diameter"}
{"task_id": 500, "prompt": "def concatenate_elements(list):\r\n", "label": "  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "}
{"task_id": 501, "prompt": "def ngcd(x,y):\r\n", "label": "    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"}
{"task_id": 502, "prompt": "def find(n,m):\r\n", "label": "  r = n%m\r\n  return (r)"}
{"task_id": 503, "prompt": "def add_consecutive_nums(nums):\r\n", "label": "    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"task_id": 504, "prompt": "def sum_Of_Series(n): \r\n", "label": "    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"}
{"task_id": 505, "prompt": "def re_order(A):\r\n", "label": "    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"}
{"task_id": 506, "prompt": "def permutation_coefficient(n, k): \r\n", "label": "\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "}
{"task_id": 507, "prompt": "def remove_words(list1, removewords):\r\n", "label": "    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "}
{"task_id": 508, "prompt": "def same_order(l1, l2):\r\n", "label": "    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"}
{"task_id": 509, "prompt": "def average_Odd(n) : \r\n", "label": "    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "}
{"task_id": 510, "prompt": "def no_of_subsequences(arr, k): \r\n", "label": "\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"}
{"task_id": 511, "prompt": "def find_Min_Sum(num): \r\n", "label": "    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"}
{"task_id": 512, "prompt": "def flatten(test_tuple): \r\n", "label": "\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "}
{"task_id": 513, "prompt": "def add_str(test_tup, K):\r\n", "label": "  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "}
{"task_id": 514, "prompt": "def sum_elements(test_tup):\r\n", "label": "  res = sum(list(test_tup))\r\n  return (res) "}
{"task_id": 515, "prompt": "def modular_sum(arr, n, m): \r\n", "label": "\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"}
{"task_id": 516, "prompt": "def radix_sort(nums):\r\n", "label": "    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"}
{"task_id": 517, "prompt": "def largest_pos(list1): \r\n", "label": "    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"}
{"task_id": 518, "prompt": "import math\r\ndef sqrt_root(num):\r\n", "label": " sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "}
{"task_id": 519, "prompt": "import math\r\ndef volume_tetrahedron(num):\r\n", "label": "\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"}
{"task_id": 520, "prompt": "def find_lcm(num1, num2): \r\n", "label": "\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "}
{"task_id": 521, "prompt": "def check_isosceles(x,y,z):\r\n", "label": "  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"}
{"task_id": 522, "prompt": "def lbs(arr): \r\n", "label": "\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"}
{"task_id": 523, "prompt": "def check_string(str1):\r\n", "label": "    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "}
{"task_id": 524, "prompt": "def max_sum_increasing_subsequence(arr, n): \r\n", "label": "\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"}
{"task_id": 525, "prompt": "def parallel_lines(line1, line2):\r\n", "label": "  return line1[0]/line1[1] == line2[0]/line2[1]"}
{"task_id": 526, "prompt": "def capitalize_first_last_letters(str1):\r\n", "label": "     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "}
{"task_id": 527, "prompt": "def get_pairs_count(arr, n, sum):\r\n", "label": "    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"}
{"task_id": 528, "prompt": "def min_length(list1):\r\n", "label": "   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "}
{"task_id": 529, "prompt": "def jacobsthal_lucas(n): \r\n", "label": "\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"}
{"task_id": 530, "prompt": "from array import array\r\ndef negative_count(nums):\r\n", "label": "    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"}
{"task_id": 531, "prompt": "import sys \r\ndef min_coins(coins, m, V): \r\n", "label": "    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "}
{"task_id": 532, "prompt": "def check_permutation(str1, str2):\r\n", "label": "  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"}
{"task_id": 533, "prompt": "def remove_datatype(test_tuple, data_type):\r\n", "label": "  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "}
{"task_id": 534, "prompt": "import re\r\ndef search_literal(pattern,text):\r\n", "label": " match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"}
{"task_id": 535, "prompt": "def topbottom_surfacearea(r):\r\n", "label": "  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"}
{"task_id": 536, "prompt": "def nth_items(list,n):\r\n", "label": " return list[::n]"}
{"task_id": 537, "prompt": "def first_repeated_word(str1):\r\n", "label": "  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"}
{"task_id": 538, "prompt": "def string_list_to_tuple(str1):\r\n", "label": "    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"}
{"task_id": 539, "prompt": "def basesnum_coresspondingnum(bases_num,index):\r\n", "label": "  result = list(map(pow, bases_num, index))\r\n  return result"}
{"task_id": 540, "prompt": "def find_Diff(arr,n): \r\n", "label": "    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "}
{"task_id": 541, "prompt": "import math \r\ndef get_sum(n): \r\n", "label": "\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"}
{"task_id": 542, "prompt": "import re\r\ndef fill_spaces(text):\r\n", "label": "  return (re.sub(\"[ ,.]\", \":\", text))"}
{"task_id": 543, "prompt": "def count_digits(num1,num2):\r\n", "label": "    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"}
{"task_id": 544, "prompt": "def flatten_tuple(test_list):\r\n", "label": "  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "}
{"task_id": 545, "prompt": "def take_L_and_F_set_bits(n) : \r\n", "label": "    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "}
{"task_id": 546, "prompt": "def last_occurence_char(string,char):\r\n", "label": " flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"}
{"task_id": 547, "prompt": "def Total_Hamming_Distance(n):   \r\n", "label": "    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"}
{"task_id": 548, "prompt": "def longest_increasing_subsequence(arr): \r\n", "label": "\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"}
{"task_id": 549, "prompt": "def odd_Num_Sum(n) : \r\n", "label": "    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "}
{"task_id": 550, "prompt": "def find_Max(arr,low,high): \r\n", "label": "    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "}
{"task_id": 551, "prompt": "def extract_column(list1, n):\r\n", "label": "   result = [i.pop(n) for i in list1]\r\n   return result "}
{"task_id": 552, "prompt": "def Seq_Linear(seq_nums):\r\n", "label": "  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""}
{"task_id": 553, "prompt": "def tuple_to_float(test_tup):\r\n", "label": "  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "}
{"task_id": 554, "prompt": "def Split(list): \r\n", "label": "    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"}
{"task_id": 555, "prompt": "def difference(n) :  \r\n", "label": "    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "}
{"task_id": 556, "prompt": "def find_Odd_Pair(A,N) : \r\n", "label": "    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "}
{"task_id": 557, "prompt": "def toggle_string(string):\r\n", "label": " string1 = string.swapcase()\r\n return string1"}
{"task_id": 558, "prompt": "def digit_distance_nums(n1, n2):\r\n", "label": "         return sum(map(int,str(abs(n1-n2))))"}
{"task_id": 559, "prompt": "def max_sub_array_sum(a, size):\r\n", "label": "  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"}
{"task_id": 560, "prompt": "def union_elements(test_tup1, test_tup2):\r\n", "label": "  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "}
{"task_id": 561, "prompt": "def assign_elements(test_list):\r\n", "label": "  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "}
{"task_id": 562, "prompt": "def Find_Max_Length(lst):  \r\n", "label": "    maxLength = max(len(x) for x in lst )\r\n    return maxLength "}
{"task_id": 563, "prompt": "import re\r\ndef extract_values(text):\r\n", "label": " return (re.findall(r'\"(.*?)\"', text))"}
{"task_id": 564, "prompt": "def count_Pairs(arr,n): \r\n", "label": "    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "}
{"task_id": 565, "prompt": "def split(word): \r\n", "label": "    return [char for char in word] "}
{"task_id": 566, "prompt": "def sum_digits(n):\r\n", "label": "  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"}
{"task_id": 567, "prompt": "def issort_list(list1):\r\n", "label": "    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"}
{"task_id": 568, "prompt": "def empty_list(length):\r\n", "label": " empty_list = [{} for _ in range(length)]\r\n return empty_list"}
{"task_id": 569, "prompt": "def sort_sublists(list1):\r\n", "label": "    result = list(map(sorted,list1)) \r\n    return result"}
{"task_id": 570, "prompt": "def remove_words(list1, charlist):\r\n", "label": "    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"}
{"task_id": 571, "prompt": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n", "label": "\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"}
{"task_id": 572, "prompt": "def two_unique_nums(nums):\r\n", "label": "  return [i for i in nums if nums.count(i)==1]"}
{"task_id": 573, "prompt": "def unique_product(list_data):\r\n", "label": "    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"}
{"task_id": 574, "prompt": "def surfacearea_cylinder(r,h):\r\n", "label": "  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"}
{"task_id": 575, "prompt": "def count_no (A,N,L,R): \r\n", "label": "    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "}
{"task_id": 576, "prompt": "def is_Sub_Array(A,B,n,m): \r\n", "label": "    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "}
{"task_id": 577, "prompt": "def last_Digit_Factorial(n): \r\n", "label": "    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"}
{"task_id": 578, "prompt": "def interleave_lists(list1,list2,list3):\r\n", "label": "    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"}
{"task_id": 579, "prompt": "def find_dissimilar(test_tup1, test_tup2):\r\n", "label": "  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "}
{"task_id": 580, "prompt": "def even_ele(test_tuple, even_fnc): \r\n", "label": "\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "}
{"task_id": 581, "prompt": "def surface_Area(b,s): \r\n", "label": "    return 2 * b * s + pow(b,2) "}
{"task_id": 582, "prompt": "def my_dict(dict1):\r\n", "label": "  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"}
{"task_id": 583, "prompt": "def catalan_number(num):\r\n", "label": "    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"}
{"task_id": 584, "prompt": "import re\r\ndef find_adverbs(text):\r\n", "label": "  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"}
{"task_id": 585, "prompt": "import heapq\r\ndef expensive_items(items,n):\r\n", "label": "  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"}
{"task_id": 586, "prompt": "def split_Arr(a,n,k):  \r\n", "label": "   b = a[:k] \r\n   return (a[k::]+b[::]) "}
{"task_id": 587, "prompt": "def list_tuple(listx):\r\n", "label": "  tuplex = tuple(listx)\r\n  return tuplex"}
{"task_id": 588, "prompt": "def big_diff(nums):\r\n", "label": "     diff= max(nums)-min(nums)\r\n     return diff"}
{"task_id": 589, "prompt": "def perfect_squares(a, b):\r\n", "label": "    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"}
{"task_id": 590, "prompt": "import cmath\r\ndef polar_rect(x,y):\r\n", "label": " cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"}
{"task_id": 591, "prompt": "def swap_List(newList): \r\n", "label": "    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "}
{"task_id": 592, "prompt": "def binomial_Coeff(n,k): \r\n", "label": "    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "}
{"task_id": 593, "prompt": "import re\r\ndef removezero_ip(ip):\r\n", "label": " string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"}
{"task_id": 594, "prompt": "def diff_even_odd(list1):\r\n", "label": "    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"}
{"task_id": 595, "prompt": "def min_Swaps(str1,str2) : \r\n", "label": "    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "}
{"task_id": 596, "prompt": "import sys \r\ndef tuple_size(tuple_list):\r\n", "label": "  return (sys.getsizeof(tuple_list)) "}
{"task_id": 597, "prompt": "def find_kth(arr1, arr2, m, n, k):\r\n", "label": "\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"}
{"task_id": 598, "prompt": "def armstrong_number(number):\r\n", "label": " sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"}
{"task_id": 599, "prompt": "def sum_average(number):\r\n", "label": " total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"}
{"task_id": 600, "prompt": "def is_Even(n) : \r\n", "label": "    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "}
{"task_id": 601, "prompt": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n", "label": "\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"}
{"task_id": 602, "prompt": "def first_repeated_char(str1):\r\n", "label": "  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""}
{"task_id": 603, "prompt": "def get_ludic(n):\r\n", "label": "\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"}
{"task_id": 604, "prompt": "def reverse_words(s):\r\n", "label": "        return ' '.join(reversed(s.split()))"}
{"task_id": 605, "prompt": "def prime_num(num):\r\n", "label": "  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"}
{"task_id": 606, "prompt": "import math\r\ndef radian_degree(degree):\r\n", "label": " radian = degree*(math.pi/180)\r\n return radian"}
{"task_id": 607, "prompt": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n", "label": "  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"}
{"task_id": 608, "prompt": "def bell_Number(n): \r\n", "label": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "}
{"task_id": 609, "prompt": "def floor_Min(A,B,N):\r\n", "label": "    x = max(B - 1,N)\r\n    return (A*x) // B"}
{"task_id": 610, "prompt": "def remove_kth_element(list1, L):\r\n", "label": "    return  list1[:L-1] + list1[L:]"}
{"task_id": 611, "prompt": "def max_of_nth(test_list, N):\r\n", "label": "  res = max([sub[N] for sub in test_list])\r\n  return (res) "}
{"task_id": 612, "prompt": "def merge(lst):  \r\n", "label": "    return [list(ele) for ele in list(zip(*lst))] "}
{"task_id": 613, "prompt": "def maximum_value(test_list):\r\n", "label": "  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "}
{"task_id": 614, "prompt": "def cummulative_sum(test_list):\r\n", "label": "  res = sum(map(sum, test_list))\r\n  return (res)"}
{"task_id": 615, "prompt": "def average_tuple(nums):\r\n", "label": "    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"}
{"task_id": 616, "prompt": "def tuple_modulo(test_tup1, test_tup2):\r\n", "label": "  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "}
{"task_id": 617, "prompt": "def min_Jumps(a, b, d): \r\n", "label": "    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"}
{"task_id": 618, "prompt": "def div_list(nums1,nums2):\r\n", "label": "  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"}
{"task_id": 619, "prompt": "def move_num(test_str):\r\n", "label": "  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "}
{"task_id": 620, "prompt": "def largest_subset(a, n):\r\n", "label": "\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"}
{"task_id": 621, "prompt": "def increment_numerics(test_list, K):\r\n", "label": "  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "}
{"task_id": 622, "prompt": "def get_median(arr1, arr2, n):\r\n", "label": "  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"}
{"task_id": 623, "prompt": "def nth_nums(nums,n):\r\n", "label": " nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"}
{"task_id": 624, "prompt": "def is_upper(string):\r\n", "label": "  return (string.upper())"}
{"task_id": 625, "prompt": "def swap_List(newList): \r\n", "label": "    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "}
{"task_id": 626, "prompt": "def triangle_area(r) :  \r\n", "label": "    if r < 0 : \r\n        return -1\r\n    return r * r "}
{"task_id": 627, "prompt": "def find_First_Missing(array,start,end): \r\n", "label": "    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "}
{"task_id": 628, "prompt": "MAX=1000;\r\ndef replace_spaces(string):\r\n", "label": "  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"}
{"task_id": 629, "prompt": "def Split(list): \r\n", "label": "    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"}
{"task_id": 630, "prompt": "def adjac(ele, sub = []): \r\n", "label": "  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "}
{"task_id": 631, "prompt": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n", "label": "  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"}
{"task_id": 632, "prompt": "def move_zero(num_list):\r\n", "label": "    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"}
{"task_id": 633, "prompt": "def pair_OR_Sum(arr,n) : \r\n", "label": "    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "}
{"task_id": 634, "prompt": "def even_Power_Sum(n): \r\n", "label": "    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "}
{"task_id": 635, "prompt": "import heapq as hq\r\ndef heap_sort(iterable):\r\n", "label": "    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"}
{"task_id": 636, "prompt": "def Check_Solution(a,b,c): \r\n", "label": "    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "}
{"task_id": 637, "prompt": "def noprofit_noloss(actual_cost,sale_amount): \r\n", "label": "  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": 638, "prompt": "import math\r\ndef wind_chill(v,t):\r\n", "label": " windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"}
{"task_id": 639, "prompt": "def sample_nam(sample_names):\r\n", "label": "  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"}
{"task_id": 640, "prompt": "import re\r\ndef remove_parenthesis(items):\r\n", "label": " for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"}
{"task_id": 641, "prompt": "def is_nonagonal(n): \r\n", "label": "\treturn int(n * (7 * n - 5) / 2) "}
{"task_id": 642, "prompt": "def remove_similar_row(test_list):\r\n", "label": "  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "}
{"task_id": 643, "prompt": "import re\r\ndef text_match_wordz_middle(text):\r\n", "label": "        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": 644, "prompt": "def reverse_Array_Upto_K(input, k): \r\n", "label": "  return (input[k-1::-1] + input[k:]) "}
{"task_id": 645, "prompt": "def get_product(val) : \r\n", "label": "\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "}
{"task_id": 646, "prompt": "def No_of_cubes(N,K):\r\n", "label": "    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"}
{"task_id": 647, "prompt": "import re\r\ndef split_upperstring(text):\r\n", "label": " return (re.findall('[A-Z][^A-Z]*', text))"}
{"task_id": 648, "prompt": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n", "label": "    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"}
{"task_id": 649, "prompt": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n", "label": "    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "}
{"task_id": 650, "prompt": "def are_Equal(arr1,arr2,n,m):\r\n", "label": "    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"}
{"task_id": 651, "prompt": "def check_subset(test_tup1, test_tup2):\r\n", "label": "  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "}
{"task_id": 652, "prompt": "def matrix_to_list(test_list):\r\n", "label": "  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"}
{"task_id": 653, "prompt": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n", "label": "    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"}
{"task_id": 654, "prompt": "def rectangle_perimeter(l,b):\r\n", "label": "  perimeter=2*(l+b)\r\n  return perimeter"}
{"task_id": 655, "prompt": "def fifth_Power_Sum(n) : \r\n", "label": "    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "}
{"task_id": 656, "prompt": "def find_Min_Sum(a,b,n): \r\n", "label": "    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"}
{"task_id": 657, "prompt": "import math \r\ndef first_Digit(n) : \r\n", "label": "    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "}
{"task_id": 658, "prompt": "def max_occurrences(list1):\r\n", "label": "    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}
{"task_id": 659, "prompt": "def Repeat(x): \r\n", "label": "    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "}
{"task_id": 660, "prompt": "def find_Points(l1,r1,l2,r2): \r\n", "label": "    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"}
{"task_id": 661, "prompt": "def max_sum_of_three_consecutive(arr, n): \r\n", "label": "\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"}
{"task_id": 662, "prompt": "def sorted_dict(dict1):\r\n", "label": "  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"}
{"task_id": 663, "prompt": "import sys \r\ndef find_max_val(n, x, y): \r\n", "label": "\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "}
{"task_id": 664, "prompt": "def average_Even(n) : \r\n", "label": "    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "}
{"task_id": 665, "prompt": "def move_last(num_list):\r\n", "label": "    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"}
{"task_id": 666, "prompt": "def count_char(string,char):\r\n", "label": " count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"}
{"task_id": 667, "prompt": "def Check_Vow(string, vowels): \r\n", "label": "    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"}
{"task_id": 668, "prompt": "import re \r\ndef replace(string, char): \r\n", "label": "    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "}
{"task_id": 669, "prompt": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n", "label": "\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "}
{"task_id": 670, "prompt": "def decreasing_trend(nums):\r\n", "label": "    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}
{"task_id": 671, "prompt": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n", "label": "    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "}
{"task_id": 672, "prompt": "def max_of_three(num1,num2,num3): \r\n", "label": "    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"}
{"task_id": 673, "prompt": "def convert(list): \r\n", "label": "    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "}
{"task_id": 674, "prompt": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n", "label": "  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"}
{"task_id": 675, "prompt": "def sum_nums(x, y,m,n):\r\n", "label": "    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"}
{"task_id": 676, "prompt": "import re\r\ndef remove_extra_char(text1):\r\n", "label": "  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"}
{"task_id": 677, "prompt": "def validity_triangle(a,b,c):\r\n", "label": " total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"}
{"task_id": 678, "prompt": "def remove_spaces(str1):\r\n", "label": "  str1 = str1.replace(' ','')\r\n  return str1"}
{"task_id": 679, "prompt": "def access_key(ditionary,key):\r\n", "label": "  return list(ditionary)[key]"}
{"task_id": 680, "prompt": "def increasing_trend(nums):\r\n", "label": "    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}
{"task_id": 681, "prompt": "def smallest_Divisor(n): \r\n", "label": "    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "}
{"task_id": 682, "prompt": "def mul_list(nums1,nums2):\r\n", "label": "  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"}
{"task_id": 683, "prompt": "def sum_Square(n) : \r\n", "label": "    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"}
{"task_id": 684, "prompt": "def count_Char(str,x): \r\n", "label": "    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "}
{"task_id": 685, "prompt": "def sum_Of_Primes(n): \r\n", "label": "    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"}
{"task_id": 686, "prompt": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n", "label": "  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "}
{"task_id": 687, "prompt": "def recur_gcd(a, b):\r\n", "label": "\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"}
{"task_id": 688, "prompt": "import cmath\r\ndef len_complex(a,b):\r\n", "label": "  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"}
{"task_id": 689, "prompt": "def min_jumps(arr, n):\r\n", "label": "\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"}
{"task_id": 690, "prompt": "def mul_consecutive_nums(nums):\r\n", "label": "    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"task_id": 691, "prompt": "from itertools import groupby \r\ndef group_element(test_list):\r\n", "label": "  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"}
{"task_id": 692, "prompt": "def last_Two_Digits(N): \r\n", "label": "    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "}
{"task_id": 693, "prompt": "import re\r\ndef remove_multiple_spaces(text1):\r\n", "label": "  return (re.sub(' +',' ',text1))"}
{"task_id": 694, "prompt": "def extract_unique(test_dict):\r\n", "label": "  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"}
{"task_id": 695, "prompt": "def check_greater(test_tup1, test_tup2):\r\n", "label": "  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 696, "prompt": "def zip_list(list1,list2):  \r\n", "label": " result = list(map(list.__add__, list1, list2)) \r\n return result"}
{"task_id": 697, "prompt": "def count_even(array_nums):\r\n", "label": "   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"}
{"task_id": 698, "prompt": "def sort_dict_item(test_dict):\r\n", "label": "  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"}
{"task_id": 699, "prompt": "def min_Swaps(str1,str2) : \r\n", "label": "    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "}
{"task_id": 700, "prompt": "def count_range_in_list(li, min, max):\r\n", "label": "\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"}
{"task_id": 701, "prompt": "def equilibrium_index(arr):\r\n", "label": "  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"}
{"task_id": 702, "prompt": "def find_ind(key, i, n, \r\n", "label": "\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"}
{"task_id": 703, "prompt": "def is_key_present(d,x):\r\n", "label": "  if x in d:\r\n    return True\r\n  else:\r\n     return False"}
{"task_id": 704, "prompt": "def harmonic_sum(n):\r\n", "label": "  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"}
{"task_id": 705, "prompt": "def sort_sublists(list1):\r\n", "label": "      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"}
{"task_id": 706, "prompt": "def is_subset(arr1, m, arr2, n): \r\n", "label": "\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"}
{"task_id": 707, "prompt": "def count_Set_Bits(n) :  \r\n", "label": "    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "}
{"task_id": 708, "prompt": "def Convert(string): \r\n", "label": "    li = list(string.split(\" \")) \r\n    return li "}
{"task_id": 709, "prompt": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n", "label": "  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "}
{"task_id": 710, "prompt": "def front_and_rear(test_tup):\r\n", "label": "  res = (test_tup[0], test_tup[-1])\r\n  return (res) "}
{"task_id": 711, "prompt": "def product_Equal(n): \r\n", "label": "    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"}
{"task_id": 712, "prompt": "import itertools\r\ndef remove_duplicate(list1):\r\n", "label": " list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"}
{"task_id": 713, "prompt": "def check_valid(test_tup):\r\n", "label": "  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "}
{"task_id": 714, "prompt": "def count_Fac(n):  \r\n", "label": "    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "}
{"task_id": 715, "prompt": "def str_to_tuple(test_str):\r\n", "label": "  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "}
{"task_id": 716, "prompt": "def rombus_perimeter(a):\r\n", "label": "  perimeter=4*a\r\n  return perimeter"}
{"task_id": 717, "prompt": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n", "label": "    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"}
{"task_id": 718, "prompt": "def alternate_elements(list1):\r\n", "label": "    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "}
{"task_id": 719, "prompt": "import re\r\ndef text_match(text):\r\n", "label": "        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": 720, "prompt": "def add_dict_to_tuple(test_tup, test_dict):\r\n", "label": "  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "}
{"task_id": 721, "prompt": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n", "label": "\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"}
{"task_id": 722, "prompt": "def filter_data(students,h,w):\r\n", "label": "    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "}
{"task_id": 723, "prompt": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n", "label": "    result = sum(map(eq, nums1, nums2))\r\n    return result"}
{"task_id": 724, "prompt": "def power_base_sum(base, power):\r\n", "label": "    return sum([int(i) for i in str(pow(base, power))])"}
{"task_id": 725, "prompt": "import re\r\ndef extract_quotation(text1):\r\n", "label": "  return (re.findall(r'\"(.*?)\"', text1))"}
{"task_id": 726, "prompt": "def multiply_elements(test_tup):\r\n", "label": "  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "}
{"task_id": 727, "prompt": "import re \r\ndef remove_char(S):\r\n", "label": "  result = re.sub('[\\W_]+', '', S) \r\n  return result"}
{"task_id": 728, "prompt": "def sum_list(lst1,lst2):\r\n", "label": "  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"}
{"task_id": 729, "prompt": "def add_list(nums1,nums2):\r\n", "label": "  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"}
{"task_id": 730, "prompt": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n", "label": "    return [key for key, group in groupby(nums)] "}
{"task_id": 731, "prompt": "import math\r\ndef lateralsurface_cone(r,h):\r\n", "label": "  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"}
{"task_id": 732, "prompt": "import re\r\ndef replace_specialchar(text):\r\n", "label": " return (re.sub(\"[ ,.]\", \":\", text))\r"}
{"task_id": 733, "prompt": "def find_first_occurrence(A, x):\r\n", "label": "    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"}
{"task_id": 734, "prompt": "def sum_Of_Subarray_Prod(arr,n):\r\n", "label": "    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"}
{"task_id": 735, "prompt": "def set_middle_bits(n):  \r\n", "label": "    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "}
{"task_id": 736, "prompt": "import bisect\r\ndef left_insertion(a, x):\r\n", "label": "    i = bisect.bisect_left(a, x)\r\n    return i"}
{"task_id": 737, "prompt": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n", "label": "\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "}
{"task_id": 738, "prompt": "def geometric_sum(n):\r\n", "label": "  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"}
{"task_id": 739, "prompt": "import math \r\ndef find_Index(n): \r\n", "label": "    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "}
{"task_id": 740, "prompt": "def tuple_to_dict(test_tup):\r\n", "label": "  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "}
{"task_id": 741, "prompt": "def all_Characters_Same(s) :\r\n", "label": "    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"}
{"task_id": 742, "prompt": "import math\r\ndef area_tetrahedron(side):\r\n", "label": "  area = math.sqrt(3)*(side*side)\r\n  return area"}
{"task_id": 743, "prompt": "def rotate_right(list1,m,n):\r\n", "label": "  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"}
{"task_id": 744, "prompt": "def check_none(test_tup):\r\n", "label": "  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "}
{"task_id": 745, "prompt": "def divisible_by_digits(startnum, endnum):\r\n", "label": "    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"}
{"task_id": 746, "prompt": "def sector_area(r,a):\r\n", "label": "    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"}
{"task_id": 747, "prompt": "def lcs_of_three(X, Y, Z, m, n, o): \r\n", "label": "\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"}
{"task_id": 748, "prompt": "import re\r\ndef capital_words_spaces(str1):\r\n", "label": "  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"}
{"task_id": 749, "prompt": "def sort_numeric_strings(nums_str):\r\n", "label": "    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"}
{"task_id": 750, "prompt": "def add_tuple(test_list, test_tup):\r\n", "label": "  test_list += test_tup\r\n  return (test_list) "}
{"task_id": 751, "prompt": "def check_min_heap(arr, i):\r\n", "label": "    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"}
{"task_id": 752, "prompt": "def jacobsthal_num(n): \r\n", "label": "\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"}
{"task_id": 753, "prompt": "def min_k(test_list, K):\r\n", "label": "  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "}
{"task_id": 754, "prompt": "def extract_index_list(l1, l2, l3):\r\n", "label": "    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"}
{"task_id": 755, "prompt": "def second_smallest(numbers):\r\n", "label": "  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "}
{"task_id": 756, "prompt": "import re\r\ndef text_match_zero_one(text):\r\n", "label": "        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": 757, "prompt": "def count_reverse_pairs(test_list):\r\n", "label": "  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"}
{"task_id": 758, "prompt": "def unique_sublists(list1):\r\n", "label": "    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}
{"task_id": 759, "prompt": "def is_decimal(num):\r\n", "label": "    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"}
{"task_id": 760, "prompt": "def unique_Element(arr,n):\r\n", "label": "    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"}
{"task_id": 761, "prompt": "def arc_length(d,a):\r\n", "label": "    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"}
{"task_id": 762, "prompt": "def check_monthnumber_number(monthnum3):\r\n", "label": "  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": 763, "prompt": "def find_Min_Diff(arr,n): \r\n", "label": "    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "}
{"task_id": 764, "prompt": "def number_ctr(str):\r\n", "label": "      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"}
{"task_id": 765, "prompt": "import math \r\ndef is_polite(n): \r\n", "label": "\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "}
{"task_id": 766, "prompt": "def pair_wise(l1):\r\n", "label": "    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"}
{"task_id": 767, "prompt": "def get_Pairs_Count(arr,n,sum):\r\n", "label": "    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"}
{"task_id": 768, "prompt": "def check_Odd_Parity(x): \r\n", "label": "    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"}
{"task_id": 769, "prompt": "def Diff(li1,li2):\r\n", "label": "    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "}
{"task_id": 770, "prompt": "def odd_Num_Sum(n) : \r\n", "label": "    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "}
{"task_id": 771, "prompt": "from collections import deque\r\ndef check_expression(exp):\r\n", "label": "    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"}
{"task_id": 772, "prompt": "def remove_length(test_str, K):\r\n", "label": "  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "}
{"task_id": 773, "prompt": "import re\r\ndef occurance_substring(text,pattern):\r\n", "label": " for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"}
{"task_id": 774, "prompt": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n", "label": "\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "}
{"task_id": 775, "prompt": "def odd_position(nums):\r\n", "label": "\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"}
{"task_id": 776, "prompt": "def count_vowels(test_str):\r\n", "label": "  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "}
{"task_id": 777, "prompt": "def find_Sum(arr,n): \r\n", "label": "    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"}
{"task_id": 778, "prompt": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n", "label": "    return [list(group) for key, group in groupby(list1)]"}
{"task_id": 779, "prompt": "def unique_sublists(list1):\r\n", "label": "    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}
{"task_id": 780, "prompt": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n", "label": "  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "}
{"task_id": 781, "prompt": "import math \r\ndef count_Divisors(n) : \r\n", "label": "    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "}
{"task_id": 782, "prompt": "def Odd_Length_Sum(arr):\r\n", "label": "    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"}
{"task_id": 783, "prompt": "def rgb_to_hsv(r, g, b):\r\n", "label": "    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"}
{"task_id": 784, "prompt": "def mul_even_odd(list1):\r\n", "label": "    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"}
{"task_id": 785, "prompt": "def tuple_str_int(test_str):\r\n", "label": "  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "}
{"task_id": 786, "prompt": "import bisect\r\ndef right_insertion(a, x):\r\n", "label": "    i = bisect.bisect_right(a, x)\r\n    return i"}
{"task_id": 787, "prompt": "import re\r\ndef text_match_three(text):\r\n", "label": "        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": 788, "prompt": "def new_tuple(test_list, test_str):\r\n", "label": "  res = tuple(test_list + [test_str])\r\n  return (res) "}
{"task_id": 789, "prompt": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n", "label": "  perimeter = s*l\r\n  return perimeter"}
{"task_id": 790, "prompt": "def even_position(nums):\r\n", "label": "\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"}
{"task_id": 791, "prompt": "def remove_nested(test_tup):\r\n", "label": "  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "}
{"task_id": 792, "prompt": "def count_list(input_list): \r\n", "label": "    return len(input_list)"}
{"task_id": 793, "prompt": "def last(arr,x,n):\r\n", "label": "    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"}
{"task_id": 794, "prompt": "import re\r\ndef text_starta_endb(text):\r\n", "label": "        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"task_id": 795, "prompt": "import heapq\r\ndef cheap_items(items,n):\r\n", "label": "  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"}
{"task_id": 796, "prompt": "def return_sum(dict):\r\n", "label": "  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"}
{"task_id": 797, "prompt": "def sum_Odd(n): \r\n", "label": "    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"}
{"task_id": 798, "prompt": "def _sum(arr):  \r\n", "label": "    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "}
{"task_id": 799, "prompt": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n", "label": "    return (n << d)|(n >> (INT_BITS - d))  "}
{"task_id": 800, "prompt": "import re\r\ndef remove_all_spaces(text):\r\n", "label": " return (re.sub(r'\\s+', '',text))"}
{"task_id": 801, "prompt": "def test_three_equal(x,y,z):\r\n", "label": "  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"}
{"task_id": 802, "prompt": "def count_Rotation(arr,n):   \r\n", "label": "    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"}
{"task_id": 803, "prompt": "def is_Perfect_Square(n) :\r\n", "label": "    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"}
{"task_id": 804, "prompt": "def is_Product_Even(arr,n): \r\n", "label": "    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"}
{"task_id": 805, "prompt": "def max_sum_list(lists):\r\n", "label": " return max(lists, key=sum)"}
{"task_id": 806, "prompt": "def max_run_uppercase(test_str):\r\n", "label": "  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"}
{"task_id": 807, "prompt": "def first_odd(nums):\r\n", "label": "  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"}
{"task_id": 808, "prompt": "def check_K(test_tup, K):\r\n", "label": "  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "}
{"task_id": 809, "prompt": "def check_smaller(test_tup1, test_tup2):\r\n", "label": "  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 810, "prompt": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n", "label": "  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"}
{"task_id": 811, "prompt": "def check_identical(test_list1, test_list2):\r\n", "label": "  res = test_list1 == test_list2\r\n  return (res) "}
{"task_id": 812, "prompt": "import re\r\ndef road_rd(street):\r\n", "label": "  return (re.sub('Road$', 'Rd.', street))"}
{"task_id": 813, "prompt": "def string_length(str1):\r\n", "label": "    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"}
{"task_id": 814, "prompt": "def rombus_area(p,q):\r\n", "label": "  area=(p*q)/2\r\n  return area"}
{"task_id": 815, "prompt": "def sort_by_dnf(arr, n):\r\n", "label": "  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"}
{"task_id": 816, "prompt": "def clear_tuple(test_tup):\r\n", "label": "  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "}
{"task_id": 817, "prompt": "def div_of_nums(nums,m,n):\r\n", "label": " result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"}
{"task_id": 818, "prompt": "def lower_ctr(str):\r\n", "label": "      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"}
{"task_id": 819, "prompt": "def count_duplic(lists):\r\n", "label": "    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"}
{"task_id": 820, "prompt": "def check_monthnum_number(monthnum1):\r\n", "label": "  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": 821, "prompt": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n", "label": "    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"}
{"task_id": 822, "prompt": "import re\r\ndef pass_validity(p):\r\n", "label": " x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"}
{"task_id": 823, "prompt": "import re \r\ndef check_substring(string, sample) : \r\n", "label": "  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"}
{"task_id": 824, "prompt": "def remove_even(l):\r\n", "label": "    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"}
{"task_id": 825, "prompt": "def access_elements(nums, list_index):\r\n", "label": "    result = [nums[i] for i in list_index]\r\n    return result"}
{"task_id": 826, "prompt": "def check_Type_Of_Triangle(a,b,c): \r\n", "label": "    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "}
{"task_id": 827, "prompt": "def sum_column(list1, C):\r\n", "label": "    result = sum(row[C] for row in list1)\r\n    return result"}
{"task_id": 828, "prompt": "def count_alpha_dig_spl(string):\r\n", "label": "  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "}
{"task_id": 829, "prompt": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n", "label": "\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "}
{"task_id": 830, "prompt": "import math\r\ndef round_up(a, digits):\r\n", "label": "    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"}
{"task_id": 831, "prompt": "def count_Pairs(arr,n): \r\n", "label": "    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "}
{"task_id": 832, "prompt": "import re \r\ndef extract_max(input): \r\n", "label": "\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"}
{"task_id": 833, "prompt": "def get_key(dict): \r\n", "label": "    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"}
{"task_id": 834, "prompt": "def generate_matrix(n):\r\n", "label": "        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"}
{"task_id": 835, "prompt": "def slope(x1,y1,x2,y2): \r\n", "label": "    return (float)(y2-y1)/(x2-x1)  "}
{"task_id": 836, "prompt": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n", "label": "\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"}
{"task_id": 837, "prompt": "def cube_Sum(n): \r\n", "label": "    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"}
{"task_id": 838, "prompt": "def min_Swaps(s1,s2) :  \r\n", "label": "    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "}
{"task_id": 839, "prompt": "def sort_tuple(tup): \r\n", "label": "\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"}
{"task_id": 840, "prompt": "def Check_Solution(a,b,c):  \r\n", "label": "    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "}
{"task_id": 841, "prompt": "def get_inv_count(arr, n): \r\n", "label": "\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "}
{"task_id": 842, "prompt": "def get_odd_occurence(arr, arr_size):\r\n", "label": "  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"}
{"task_id": 843, "prompt": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n", "label": "    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"}
{"task_id": 844, "prompt": "def get_Number(n, k): \r\n", "label": "    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "}
{"task_id": 845, "prompt": "import math \r\ndef find_Digits(n): \r\n", "label": "    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "}
{"task_id": 846, "prompt": "def find_platform(arr, dep, n): \r\n", "label": "    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"}
{"task_id": 847, "prompt": "def lcopy(xs):\n", "label": "  return xs[:]\n"}
{"task_id": 848, "prompt": "def area_trapezium(base1,base2,height):\r\n", "label": " area = 0.5 * (base1 + base2) * height\r\n return area"}
{"task_id": 849, "prompt": "def Sum(N): \r\n", "label": "    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "}
{"task_id": 850, "prompt": "def is_triangleexists(a,b,c): \r\n", "label": "    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"}
{"task_id": 851, "prompt": "def Sum_of_Inverse_Divisors(N,Sum): \r\n", "label": "    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "}
{"task_id": 852, "prompt": "def remove_negs(num_list): \r\n", "label": "    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"}
{"task_id": 853, "prompt": "import math\r\ndef sum_of_odd_Factors(n): \r\n", "label": "    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "}
{"task_id": 854, "prompt": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n", "label": "  hq.heapify(rawheap)\r\n  return rawheap"}
{"task_id": 855, "prompt": "def check_Even_Parity(x): \r\n", "label": "    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"}
{"task_id": 856, "prompt": "def find_Min_Swaps(arr,n) : \r\n", "label": "    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "}
{"task_id": 857, "prompt": "def listify_list(list1):\r\n", "label": "  result = list(map(list,list1)) \r\n  return result "}
{"task_id": 858, "prompt": "def count_list(input_list): \r\n", "label": "    return (len(input_list))**2"}
{"task_id": 859, "prompt": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n", "label": "\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"}
{"task_id": 860, "prompt": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n", "label": "\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "}
{"task_id": 861, "prompt": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n", "label": "  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"}
{"task_id": 862, "prompt": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n", "label": "  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"}
{"task_id": 863, "prompt": "def find_longest_conseq_subseq(arr, n): \r\n", "label": "\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "}
{"task_id": 864, "prompt": "def palindrome_lambda(texts):\r\n", "label": "  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"}
{"task_id": 865, "prompt": "def ntimes_list(nums,n):\r\n", "label": "    result = map(lambda x:n*x, nums) \r\n    return list(result)"}
{"task_id": 866, "prompt": "def check_monthnumb(monthname2):\r\n", "label": "  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"}
{"task_id": 867, "prompt": "def min_Num(arr,n):  \r\n", "label": "    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"}
{"task_id": 868, "prompt": "def length_Of_Last_Word(a): \r\n", "label": "    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "}
{"task_id": 869, "prompt": "def remove_list_range(list1, leftrange, rigthrange):\r\n", "label": "   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"}
{"task_id": 870, "prompt": "def sum_positivenum(nums):\r\n", "label": "  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"}
{"task_id": 871, "prompt": "def are_Rotations(string1,string2): \r\n", "label": "    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"}
{"task_id": 872, "prompt": "def check_subset(list1,list2): \r\n", "label": "    return all(map(list1.__contains__,list2)) "}
{"task_id": 873, "prompt": "def fibonacci(n):\r\n", "label": "  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"}
{"task_id": 874, "prompt": "def check_Concat(str1,str2):\r\n", "label": "    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"}
{"task_id": 875, "prompt": "def min_difference(test_list):\r\n", "label": "  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "}
{"task_id": 876, "prompt": "def lcm(x, y):\r\n", "label": "   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"}
{"task_id": 877, "prompt": "def sort_String(str) : \r\n", "label": "    str = ''.join(sorted(str)) \r\n    return (str) "}
{"task_id": 878, "prompt": "def check_tuples(test_tuple, K):\r\n", "label": "  res = all(ele in K for ele in test_tuple)\r\n  return (res) "}
{"task_id": 879, "prompt": "import re\r\ndef text_match(text):\r\n", "label": "  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"task_id": 880, "prompt": "def Check_Solution(a,b,c) : \r\n", "label": "    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "}
{"task_id": 881, "prompt": "def sum_even_odd(list1):\r\n", "label": "    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"}
{"task_id": 882, "prompt": "def parallelogram_perimeter(b,h):\r\n", "label": "  perimeter=2*(b*h)\r\n  return perimeter"}
{"task_id": 883, "prompt": "def div_of_nums(nums,m,n):\r\n", "label": " result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"}
{"task_id": 884, "prompt": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n", "label": "    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"}
{"task_id": 885, "prompt": "def is_Isomorphic(str1,str2):          \r\n", "label": "    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"}
{"task_id": 886, "prompt": "def sum_num(numbers):\r\n", "label": "    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "}
{"task_id": 887, "prompt": "def is_odd(n) : \r\n", "label": "    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "}
{"task_id": 888, "prompt": "def substract_elements(test_tup1, test_tup2):\r\n", "label": "  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"task_id": 889, "prompt": "def reverse_list_lists(lists):\r\n", "label": "    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "}
{"task_id": 890, "prompt": "def find_Extra(arr1,arr2,n) : \r\n", "label": "    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "}
{"task_id": 891, "prompt": "def same_Length(A,B): \r\n", "label": "    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "}
{"task_id": 892, "prompt": "import re\r\ndef remove_spaces(text):\r\n", "label": " return (re.sub(' +',' ',text))"}
{"task_id": 893, "prompt": "def Extract(lst): \r\n", "label": "    return [item[-1] for item in lst] "}
{"task_id": 894, "prompt": "def float_to_tuple(test_str):\r\n", "label": "  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "}
{"task_id": 895, "prompt": "def max_sum_subseq(A):\r\n", "label": "    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"}
{"task_id": 896, "prompt": "def last(n):\r\n", "label": "   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"}
{"task_id": 897, "prompt": "def is_Word_Present(sentence,word): \r\n", "label": "    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"}
{"task_id": 898, "prompt": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n", "label": "    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"}
{"task_id": 899, "prompt": "def check(arr,n): \r\n", "label": "    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"}
{"task_id": 900, "prompt": "import re\r\ndef match_num(string):\r\n", "label": "    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}
{"task_id": 901, "prompt": "def smallest_multiple(n):\r\n", "label": "    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"}
{"task_id": 902, "prompt": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n", "label": "   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"}
{"task_id": 903, "prompt": "def count_Unset_Bits(n) :  \r\n", "label": "    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "}
{"task_id": 904, "prompt": "def even_num(x):\r\n", "label": "  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"}
{"task_id": 905, "prompt": "def factorial(start,end): \r\n", "label": "    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "}
{"task_id": 906, "prompt": "import re\r\ndef extract_date(url):\r\n", "label": "        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"}
{"task_id": 907, "prompt": "def lucky_num(n):\r\n", "label": " List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"}
{"task_id": 908, "prompt": "def find_fixed_point(arr, n): \r\n", "label": "\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"}
{"task_id": 909, "prompt": "def previous_palindrome(num):\r\n", "label": "    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"}
{"task_id": 910, "prompt": "import datetime\r\ndef check_date(m, d, y):\r\n", "label": "    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"}
{"task_id": 911, "prompt": "def maximum_product(nums):\r\n", "label": "    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"}
{"task_id": 912, "prompt": "def binomial_coeff(n, k): \r\n", "label": "\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"}
{"task_id": 913, "prompt": "import re\r\ndef end_num(string):\r\n", "label": "    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}
{"task_id": 914, "prompt": "def is_Two_Alter(s):  \r\n", "label": "    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"}
{"task_id": 915, "prompt": "def rearrange_numbs(array_nums):\r\n", "label": "  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "}
{"task_id": 916, "prompt": "def find_triplet_array(A, arr_size, sum): \r\n", "label": "\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"}
{"task_id": 917, "prompt": "import re\r\ndef text_uppercase_lowercase(text):\r\n", "label": "        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"}
{"task_id": 918, "prompt": "def coin_change(S, m, n): \r\n", "label": "    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "}
{"task_id": 919, "prompt": "def multiply_list(items):\r\n", "label": "    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"}
{"task_id": 920, "prompt": "def remove_tuple(test_list):\r\n", "label": "  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "}
{"task_id": 921, "prompt": "def chunk_tuples(test_tup, N):\r\n", "label": "  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "}
{"task_id": 922, "prompt": "def max_product(arr): \r\n", "label": "    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "}
{"task_id": 923, "prompt": "def super_seq(X, Y, m, n):\r\n", "label": "\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"}
{"task_id": 924, "prompt": "def max_of_two( x, y ):\r\n", "label": "    if x > y:\r\n        return x\r\n    return y"}
{"task_id": 925, "prompt": "def mutiple_tuple(nums):\r\n", "label": "    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"}
{"task_id": 926, "prompt": "def binomial_coeffi(n, k): \r\n", "label": "\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"}
{"task_id": 927, "prompt": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n", "label": "\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"}
{"task_id": 928, "prompt": "import re\r\ndef change_date_format(dt):\r\n", "label": "        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"}
{"task_id": 929, "prompt": "def count_tuplex(tuplex,value):  \r\n", "label": "  count = tuplex.count(value)\r\n  return count"}
{"task_id": 930, "prompt": "import re\r\ndef text_match(text):\r\n", "label": "        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"}
{"task_id": 931, "prompt": "import math \r\ndef sum_series(number):\r\n", "label": " total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"}
{"task_id": 932, "prompt": "def remove_duplic_list(l):\r\n", "label": "    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"}
{"task_id": 933, "prompt": "import re\r\ndef camel_to_snake(text):\r\n", "label": "  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"task_id": 934, "prompt": "def dealnnoy_num(n, m): \r\n", "label": "\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"}
{"task_id": 935, "prompt": "def series_sum(number):\r\n", "label": " total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"}
{"task_id": 936, "prompt": "def re_arrange_tuples(test_list, ord_list):\r\n", "label": "  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "}
{"task_id": 937, "prompt": "from collections import Counter \r\ndef max_char(str1):\r\n", "label": "    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"}
{"task_id": 938, "prompt": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n", "label": "\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"}
{"task_id": 939, "prompt": "def sorted_models(models):\r\n", "label": " sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"}
{"task_id": 940, "prompt": "def heap_sort(arr):\r\n", "label": "    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"}
{"task_id": 941, "prompt": "def count_elim(num):\r\n", "label": "  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"}
{"task_id": 942, "prompt": "def check_element(test_tup, check_list):\r\n", "label": "  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "}
{"task_id": 943, "prompt": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n", "label": "  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"}
{"task_id": 944, "prompt": "import re\r\ndef num_position(text):\r\n", "label": " for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"}
{"task_id": 945, "prompt": "def tuple_to_set(t):\r\n", "label": "  s = set(t)\r\n  return (s) "}
{"task_id": 946, "prompt": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n", "label": "  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"}
{"task_id": 947, "prompt": "def len_log(list1):\r\n", "label": "    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"}
{"task_id": 948, "prompt": "def get_item(tup1,index):\r\n", "label": "  item = tup1[index]\r\n  return item"}
{"task_id": 949, "prompt": "def count_digs(tup):\r\n", "label": "  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"}
{"task_id": 950, "prompt": "def chinese_zodiac(year):\r\n", "label": " if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"}
{"task_id": 951, "prompt": "def max_similar_indices(test_list1, test_list2):\r\n", "label": "  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "}
{"task_id": 952, "prompt": "def nCr_mod_p(n, r, p): \r\n", "label": "\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "}
{"task_id": 953, "prompt": "def subset(ar, n): \r\n", "label": "    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "}
{"task_id": 954, "prompt": "def profit_amount(actual_cost,sale_amount): \r\n", "label": " if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"}
{"task_id": 955, "prompt": "def is_abundant(n):\r\n", "label": "    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"}
{"task_id": 956, "prompt": "import re\r\ndef split_list(text):\r\n", "label": "  return (re.findall('[A-Z][^A-Z]*', text))"}
{"task_id": 957, "prompt": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n", "label": "     return math.log2(n&-n)+1"}
{"task_id": 958, "prompt": "def int_to_roman( num):\r\n", "label": "        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"}
{"task_id": 959, "prompt": "def Average(lst): \r\n", "label": "    return sum(lst) / len(lst) "}
{"task_id": 960, "prompt": "def get_noOfways(n):\r\n", "label": "    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"}
{"task_id": 961, "prompt": "def roman_to_int(s):\r\n", "label": "        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"}
{"task_id": 962, "prompt": "def sum_Natural(n): \r\n", "label": "    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "}
{"task_id": 963, "prompt": "def discriminant_value(x,y,z):\r\n", "label": "    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"}
{"task_id": 964, "prompt": "def word_len(s): \r\n", "label": "    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"}
{"task_id": 965, "prompt": "def camel_to_snake(text):\r\n", "label": "        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"task_id": 966, "prompt": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n", "label": "   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"}
{"task_id": 967, "prompt": "def check(string): \r\n", "label": "  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "}
{"task_id": 968, "prompt": "def floor_Max(A,B,N):\r\n", "label": "    x = min(B - 1,N)\r\n    return (A*x) // B"}
{"task_id": 969, "prompt": "def join_tuples(test_list):\r\n", "label": "  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "}
{"task_id": 970, "prompt": "def min_of_two( x, y ):\r\n", "label": "    if x < y:\r\n        return x\r\n    return y"}
{"task_id": 971, "prompt": "def maximum_segments(n, a, b, c) : \r\n", "label": "\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"}
{"task_id": 972, "prompt": "def concatenate_nested(test_tup1, test_tup2):\r\n", "label": "  res = test_tup1 + test_tup2\r\n  return (res) "}
{"task_id": 973, "prompt": "def left_rotate(s,d):\r\n", "label": "    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "}
{"task_id": 974, "prompt": "def min_sum_path(A): \r\n", "label": "\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"}
