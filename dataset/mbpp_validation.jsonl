{"task_id": 1, "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n", "canonical_solution": "\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]", "entry_point": "min_cost", "test": "def check(candidate):\n    assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8", "prompt_code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n"}
{"task_id": 2, "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ", "entry_point": "similar_elements", "test": "def check(candidate):\n    assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)", "prompt_code": "def similar_elements(test_tup1, test_tup2):\r\n"}
{"task_id": 3, "prompt": "Write a python function to identify non-prime numbers.\nimport math\r\ndef is_not_prime(n):\r\n", "canonical_solution": "    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result", "entry_point": "is_not_prime", "test": "def check(candidate):\n    assert is_not_prime(2) == False", "prompt_code": "import math\r\ndef is_not_prime(n):\r\n"}
{"task_id": 4, "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n", "canonical_solution": "  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums", "entry_point": "heap_queue_largest", "test": "def check(candidate):\n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ", "prompt_code": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n"}
{"task_id": 5, "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \r\n", "canonical_solution": "\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ", "entry_point": "count_ways", "test": "def check(candidate):\n    assert count_ways(2) == 3", "prompt_code": "def count_ways(n): \r\n"}
{"task_id": 6, "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \r\n", "canonical_solution": "    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)", "entry_point": "is_Power_Of_Two ", "test": "def check(candidate):\n    assert differ_At_One_Bit_Pos(13,9) == True", "prompt_code": "def is_Power_Of_Two (x): \r\n"}
{"task_id": 7, "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\nimport re\r\ndef find_char_long(text):\r\n", "canonical_solution": "  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "entry_point": "find_char_long", "test": "def check(candidate):\n    assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']", "prompt_code": "import re\r\ndef find_char_long(text):\r\n"}
{"task_id": 8, "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\r\n", "canonical_solution": " square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums", "entry_point": "square_nums", "test": "def check(candidate):\n    assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "prompt_code": "def square_nums(nums):\r\n"}
{"task_id": 9, "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \r\n", "canonical_solution": "    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ", "entry_point": "find_Rotations", "test": "def check(candidate):\n    assert find_Rotations(\"aaaa\") == 1", "prompt_code": "def find_Rotations(str): \r\n"}
{"task_id": 10, "prompt": "Write a function to get the n smallest items from a dataset.\nimport heapq\r\ndef small_nnum(list1,n):\r\n", "canonical_solution": "  smallest=heapq.nsmallest(n,list1)\r\n  return smallest", "entry_point": "small_nnum", "test": "def check(candidate):\n    assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]", "prompt_code": "import heapq\r\ndef small_nnum(list1,n):\r\n"}
{"task_id": 11, "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \r\n", "canonical_solution": "    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ", "entry_point": "remove_Occ", "test": "def check(candidate):\n    assert remove_Occ(\"hello\",\"l\") == \"heo\"", "prompt_code": "def remove_Occ(s,ch): \r\n"}
{"task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\r\n", "canonical_solution": "    result = sorted(M, key=sum)\r\n    return result", "entry_point": "sort_matrix", "test": "def check(candidate):\n    assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "prompt_code": "def sort_matrix(M):\r\n"}
{"task_id": 13, "prompt": "Write a function to count the most common words in a dictionary.\nfrom collections import Counter\r\ndef count_common(words):\r\n", "canonical_solution": "  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n", "entry_point": "count_common", "test": "def check(candidate):\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]", "prompt_code": "from collections import Counter\r\ndef count_common(words):\r\n"}
{"task_id": 14, "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \r\n", "canonical_solution": "    return ((l * b * h) / 2) ", "entry_point": "find_Volume", "test": "def check(candidate):\n    assert find_Volume(10,8,6) == 240", "prompt_code": "def find_Volume(l,b,h) : \r\n"}
{"task_id": 15, "prompt": "Write a function to split a string at lowercase letters.\nimport re\r\ndef split_lowerstring(text):\r\n", "canonical_solution": " return (re.findall('[a-z][^a-z]*', text))", "entry_point": "split_lowerstring", "test": "def check(candidate):\n    assert split_lowerstring(\"AbCd\")==['bC','d']", "prompt_code": "import re\r\ndef split_lowerstring(text):\r\n"}
{"task_id": 16, "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\nimport re\r\ndef text_lowercase_underscore(text):\r\n", "canonical_solution": "        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "entry_point": "text_lowercase_underscore", "test": "def check(candidate):\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')", "prompt_code": "import re\r\ndef text_lowercase_underscore(text):\r\n"}
{"task_id": 17, "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\r\n", "canonical_solution": "  perimeter=4*a\r\n  return perimeter", "entry_point": "square_perimeter", "test": "def check(candidate):\n    assert square_perimeter(10)==40", "prompt_code": "def square_perimeter(a):\r\n"}
{"task_id": 18, "prompt": "Write a function to remove characters from the first string which are present in the second string.\nNO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n", "canonical_solution": "\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ", "entry_point": "str_to_list", "test": "def check(candidate):\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "prompt_code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n"}
{"task_id": 19, "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\r\n", "canonical_solution": "    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ", "entry_point": "test_duplicate", "test": "def check(candidate):\n    assert test_duplicate(([1,2,3,4,5]))==False", "prompt_code": "def test_duplicate(arraynums):\r\n"}
{"task_id": 20, "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \r\n", "canonical_solution": "\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False", "entry_point": "is_woodall", "test": "def check(candidate):\n    assert is_woodall(383) == True", "prompt_code": "def is_woodall(x): \r\n"}
{"task_id": 21, "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \r\n", "canonical_solution": "    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)", "entry_point": "multiples_of_num", "test": "def check(candidate):\n    assert multiples_of_num(4,3)== [3,6,9,12]", "prompt_code": "def multiples_of_num(m,n): \r\n"}
{"task_id": 22, "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\r\n", "canonical_solution": "    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate", "entry_point": "find_first_duplicate", "test": "def check(candidate):\n    assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4", "prompt_code": "def find_first_duplicate(nums):\r\n"}
{"task_id": 23, "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \r\n", "canonical_solution": "    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ", "entry_point": "maximum_Sum", "test": "def check(candidate):\n    assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33", "prompt_code": "def maximum_Sum(list1): \r\n"}
{"task_id": 24, "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \r\n", "canonical_solution": "    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)", "entry_point": "binary_to_decimal", "test": "def check(candidate):\n    assert binary_to_decimal(100) == 4", "prompt_code": "def binary_to_decimal(binary): \r\n"}
{"task_id": 25, "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \r\n", "canonical_solution": "    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ", "entry_point": "find_Product", "test": "def check(candidate):\n    assert find_Product([1,1,2,3],4) == 6", "prompt_code": "def find_Product(arr,n): \r\n"}
{"task_id": 26, "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\r\n", "canonical_solution": "  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ", "entry_point": "check_k_elements", "test": "def check(candidate):\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True", "prompt_code": "def check_k_elements(test_list, K):\r\n"}
{"task_id": 27, "prompt": "Write a python function to remove all digits from a list of strings.\nimport re  \r\ndef remove(list): \r\n", "canonical_solution": "    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list", "entry_point": "remove", "test": "def check(candidate):\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']", "prompt_code": "import re  \r\ndef remove(list): \r\n"}
{"task_id": 28, "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \r\n", "canonical_solution": "    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "entry_point": "binomial_Coeff", "test": "def check(candidate):\n    assert binomial_Coeff(5,2) == 10", "prompt_code": "def binomial_Coeff(n,k): \r\n"}
{"task_id": 29, "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \r\n", "canonical_solution": "    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1", "entry_point": "get_Odd_Occurrence", "test": "def check(candidate):\n    assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1", "prompt_code": "def get_Odd_Occurrence(arr,arr_size):   \r\n"}
{"task_id": 30, "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \r\n", "canonical_solution": "    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "entry_point": "check_Equality", "test": "def check(candidate):\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3", "prompt_code": "def check_Equality(s): \r\n"}
{"task_id": 31, "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\r\n", "canonical_solution": "    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result", "entry_point": "func", "test": "def check(candidate):\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]", "prompt_code": "def func(nums, k):\r\n"}
{"task_id": 32, "prompt": "Write a python function to find the largest prime factor of a given number.\nimport math \r\ndef max_Prime_Factors (n): \r\n", "canonical_solution": "    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)", "entry_point": "max_Prime_Factors ", "test": "def check(candidate):\n    assert max_Prime_Factors(15) == 5", "prompt_code": "import math \r\ndef max_Prime_Factors (n): \r\n"}
{"task_id": 33, "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \r\n", "canonical_solution": "    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ", "entry_point": "decimal_To_Binary", "test": "def check(candidate):\n    assert decimal_To_Binary(10) == 1010", "prompt_code": "def decimal_To_Binary(N): \r\n"}
{"task_id": 34, "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \r\n", "canonical_solution": "    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ", "entry_point": "find_missing", "test": "def check(candidate):\n    assert find_missing([1,2,3,5],4) == 4", "prompt_code": "def find_missing(ar,N): \r\n"}
{"task_id": 35, "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\r\n", "canonical_solution": "  return n*(n + 1) ", "entry_point": "find_rect_num", "test": "def check(candidate):\n    assert find_rect_num(4) == 20", "prompt_code": "def find_rect_num(n):\r\n"}
{"task_id": 36, "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \r\n", "canonical_solution": "    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ", "entry_point": "find_Nth_Digit", "test": "def check(candidate):\n    assert find_Nth_Digit(1,2,1) == 5", "prompt_code": "def find_Nth_Digit(p,q,N) :  \r\n"}
{"task_id": 37, "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\r\n", "canonical_solution": "    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part", "entry_point": "sort_mixed_list", "test": "def check(candidate):\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "prompt_code": "def sort_mixed_list(mixed_list):\r\n"}
{"task_id": 38, "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\r\n", "canonical_solution": "    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)", "entry_point": "div_even_odd", "test": "def check(candidate):\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4", "prompt_code": "def div_even_odd(list1):\r\n"}
{"task_id": 39, "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nimport heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n", "canonical_solution": "    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "entry_point": "rearange_string", "test": "def check(candidate):\n    assert rearange_string(\"aab\")==('aba')", "prompt_code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n"}
{"task_id": 40, "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\nfrom collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n", "canonical_solution": "  result = Counter(chain.from_iterable(nums))\r\n  return result", "entry_point": "freq_element", "test": "def check(candidate):\n    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})", "prompt_code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n"}
{"task_id": 41, "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\r\n", "canonical_solution": " even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums", "entry_point": "filter_evennumbers", "test": "def check(candidate):\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]", "prompt_code": "def filter_evennumbers(nums):\r\n"}
{"task_id": 42, "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \r\n", "canonical_solution": "    return sum([x for x in arr if arr.count(x) > 1])", "entry_point": "find_Sum", "test": "def check(candidate):\n    assert find_Sum([1,2,3,1,1,4,5,6],8) == 3", "prompt_code": "def find_Sum(arr,n): \r\n"}
{"task_id": 43, "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\nimport re\r\ndef text_match(text):\r\n", "canonical_solution": "  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "entry_point": "text_match", "test": "def check(candidate):\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'", "prompt_code": "import re\r\ndef text_match(text):\r\n"}
{"task_id": 44, "prompt": "Write a function that matches a word at the beginning of a string.\nimport re\r\ndef text_match_string(text):\r\n", "canonical_solution": "        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "entry_point": "text_match_string", "test": "def check(candidate):\n    assert text_match_string(\" python\")==('Not matched!')", "prompt_code": "import re\r\ndef text_match_string(text):\r\n"}
{"task_id": 45, "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \r\n", "canonical_solution": "\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd", "entry_point": "find_gcd", "test": "def check(candidate):\n    assert get_gcd([2, 4, 6, 8, 16]) == 2", "prompt_code": "def find_gcd(x, y): \r\n"}
{"task_id": 46, "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\r\n", "canonical_solution": "  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;", "entry_point": "test_distinct", "test": "def check(candidate):\n    assert test_distinct([1,5,7,9]) == True", "prompt_code": "def test_distinct(data):\r\n"}
{"task_id": 47, "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \r\n", "canonical_solution": "    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10", "entry_point": "compute_Last_Digit", "test": "def check(candidate):\n    assert compute_Last_Digit(2,4) == 2", "prompt_code": "def compute_Last_Digit(A,B): \r\n"}
{"task_id": 48, "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\r\n", "canonical_solution": "    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)", "entry_point": "odd_bit_set_number", "test": "def check(candidate):\n    assert odd_bit_set_number(10) == 15", "prompt_code": "def odd_bit_set_number(n):\r\n"}
{"task_id": 49, "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\r\n", "canonical_solution": "    result = [i[N] for i in nums]\r\n    return result\r\n    ", "entry_point": "specified_element", "test": "def check(candidate):\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]", "prompt_code": "def specified_element(nums, N):\r\n"}
{"task_id": 50, "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\r\n", "canonical_solution": "    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)", "entry_point": "min_length_list", "test": "def check(candidate):\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])", "prompt_code": "def min_length_list(input_list):\r\n"}
{"task_id": 51, "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\r\n", "canonical_solution": "  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False", "entry_point": "check_equilateral", "test": "def check(candidate):\n    assert check_equilateral(6,8,12)==False ", "prompt_code": "def check_equilateral(x,y,z):\r\n"}
{"task_id": 52, "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\r\n", "canonical_solution": "  area=b*h\r\n  return area", "entry_point": "parallelogram_area", "test": "def check(candidate):\n    assert parallelogram_area(10,20)==200", "prompt_code": "def parallelogram_area(b,h):\r\n"}
{"task_id": 53, "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\r\n", "canonical_solution": "  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ", "entry_point": "check_Equality", "test": "def check(candidate):\n    assert check_Equality(\"abcda\") == \"Equal\"", "prompt_code": "def check_Equality(str):\r\n"}
{"task_id": 54, "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\r\n", "canonical_solution": "    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list", "entry_point": "counting_sort", "test": "def check(candidate):\n    assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]", "prompt_code": "def counting_sort(my_list):\r\n"}
{"task_id": 55, "prompt": "Write a function to find t-nth term of geometric series.\nimport math\r\ndef tn_gp(a,n,r):\r\n", "canonical_solution": "  tn = a * (math.pow(r, n - 1))\r\n  return tn", "entry_point": "tn_gp", "test": "def check(candidate):\n    assert tn_gp(1,5,2)==16", "prompt_code": "import math\r\ndef tn_gp(a,n,r):\r\n"}
{"task_id": 56, "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \r\n", "canonical_solution": "    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ", "entry_point": "rev", "test": "def check(candidate):\n    assert check(70) == False", "prompt_code": "def rev(num):    \r\n"}
{"task_id": 57, "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \r\n", "canonical_solution": "    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ", "entry_point": "find_Max_Num", "test": "def check(candidate):\n    assert find_Max_Num([1,2,3],3) == 321", "prompt_code": "def find_Max_Num(arr,n) : \r\n"}
{"task_id": 58, "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \r\n", "canonical_solution": "    return ((x ^ y) < 0); ", "entry_point": "opposite_Signs", "test": "def check(candidate):\n    assert opposite_Signs(1,-2) == True", "prompt_code": "def opposite_Signs(x,y): \r\n"}
{"task_id": 59, "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \r\n", "canonical_solution": "\treturn 3 * n * n - 2 * n ", "entry_point": "is_octagonal", "test": "def check(candidate):\n    assert is_octagonal(5) == 65", "prompt_code": "def is_octagonal(n): \r\n"}
{"task_id": 60, "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \r\n", "canonical_solution": "\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max", "entry_point": "max_len_sub", "test": "def check(candidate):\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5", "prompt_code": "def max_len_sub( arr, n): \r\n"}
{"task_id": 61, "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\nfrom collections import defaultdict\r\ndef count_Substrings(s,n):\r\n", "canonical_solution": "    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count", "entry_point": "count_Substrings", "test": "def check(candidate):\n    assert count_Substrings('112112',6) == 6", "prompt_code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n"}
{"task_id": 62, "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n", "canonical_solution": "  return min(xs)\n", "entry_point": "smallest_num", "test": "def check(candidate):\n    assert smallest_num([10, 20, 1, 45, 99]) == 1", "prompt_code": "def smallest_num(xs):\n"}
{"task_id": 63, "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\r\n", "canonical_solution": "  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ", "entry_point": "max_difference", "test": "def check(candidate):\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "prompt_code": "def max_difference(test_list):\r\n"}
{"task_id": 64, "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\r\n", "canonical_solution": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks", "entry_point": "subject_marks", "test": "def check(candidate):\n    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "prompt_code": "def subject_marks(subjectmarks):\r\n"}
{"task_id": 65, "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\r\n", "canonical_solution": "\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total", "entry_point": "recursive_list_sum", "test": "def check(candidate):\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "prompt_code": "def recursive_list_sum(data_list):\r\n"}
{"task_id": 66, "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\r\n", "canonical_solution": "  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ", "entry_point": "pos_count", "test": "def check(candidate):\n    assert pos_count([1,-2,3,-4]) == 2", "prompt_code": "def pos_count(list):\r\n"}
{"task_id": 67, "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \r\n", "canonical_solution": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ", "entry_point": "bell_number", "test": "def check(candidate):\n    assert bell_number(2)==2", "prompt_code": "def bell_number(n):   \r\n"}
{"task_id": 68, "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \r\n", "canonical_solution": "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "entry_point": "is_Monotonic", "test": "def check(candidate):\n    assert is_Monotonic([6, 5, 4, 4]) == True", "prompt_code": "def is_Monotonic(A): \r\n"}
{"task_id": 69, "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\r\n", "canonical_solution": "\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set", "entry_point": "is_sublist", "test": "def check(candidate):\n    assert is_sublist([2,4,3,5,7],[3,7])==False", "prompt_code": "def is_sublist(l, s):\r\n"}
{"task_id": 70, "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\r\n", "canonical_solution": "  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")", "entry_point": "find_equal_tuple", "test": "def check(candidate):\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'", "prompt_code": "def find_equal_tuple(Input, k):\r\n"}
{"task_id": 71, "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\r\n", "canonical_solution": "    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums", "entry_point": "comb_sort", "test": "def check(candidate):\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "prompt_code": "def comb_sort(nums):\r\n"}
{"task_id": 72, "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \r\n", "canonical_solution": "    if (n % 4 != 2): \r\n        return True\r\n    return False", "entry_point": "dif_Square", "test": "def check(candidate):\n    assert dif_Square(5) == True", "prompt_code": "def dif_Square(n): \r\n"}
{"task_id": 73, "prompt": "Write a function to split the given string with multiple delimiters by using regex.\nimport re\r\ndef multiple_split(text):\r\n", "canonical_solution": "  return (re.split('; |, |\\*|\\n',text))", "entry_point": "multiple_split", "test": "def check(candidate):\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']", "prompt_code": "import re\r\ndef multiple_split(text):\r\n"}
{"task_id": 74, "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \r\n", "canonical_solution": "    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True", "entry_point": "is_samepatterns", "test": "def check(candidate):\n    assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ", "prompt_code": "def is_samepatterns(colors, patterns):    \r\n"}
{"task_id": 75, "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\r\n", "canonical_solution": "  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ", "entry_point": "find_tuples", "test": "def check(candidate):\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'", "prompt_code": "def find_tuples(test_list, K):\r\n"}
{"task_id": 76, "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\r\n", "canonical_solution": "    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "entry_point": "count_Squares", "test": "def check(candidate):\n    assert count_Squares(4,3) == 20", "prompt_code": "def count_Squares(m,n):\r\n"}
{"task_id": 77, "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \r\n", "canonical_solution": "    return (n % 11 == 0) ", "entry_point": "is_Diff", "test": "def check(candidate):\n    assert is_Diff (12345) == False", "prompt_code": "def is_Diff(n): \r\n"}
{"task_id": 78, "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \r\n", "canonical_solution": "    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ", "entry_point": "count_With_Odd_SetBits", "test": "def check(candidate):\n    assert count_With_Odd_SetBits(5) == 3", "prompt_code": "def count_With_Odd_SetBits(n): \r\n"}
{"task_id": 79, "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \r\n", "canonical_solution": "    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False", "entry_point": "word_len", "test": "def check(candidate):\n    assert word_len(\"Hadoop\") == False", "prompt_code": "def word_len(s): \r\n"}
{"task_id": 80, "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \r\n", "canonical_solution": "\treturn (n * (n + 1) * (n + 2)) / 6", "entry_point": "tetrahedral_number", "test": "def check(candidate):\n    assert tetrahedral_number(5) == 35.0", "prompt_code": "def tetrahedral_number(n): \r\n"}
{"task_id": 81, "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ", "entry_point": "zip_tuples", "test": "def check(candidate):\n    assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]", "prompt_code": "def zip_tuples(test_tup1, test_tup2):\r\n"}
{"task_id": 82, "prompt": "Write a function to find the volume of a sphere.\nimport math\r\ndef volume_sphere(r):\r\n", "canonical_solution": "  volume=(4/3)*math.pi*r*r*r\r\n  return volume", "entry_point": "volume_sphere", "test": "def check(candidate):\n    assert volume_sphere(10)==4188.790204786391", "prompt_code": "import math\r\ndef volume_sphere(r):\r\n"}
{"task_id": 83, "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \r\n", "canonical_solution": "    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)", "entry_point": "get_Char", "test": "def check(candidate):\n    assert get_Char(\"abc\") == \"f\"", "prompt_code": "def get_Char(strr):  \r\n"}
{"task_id": 84, "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \r\n", "canonical_solution": "\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "entry_point": "sequence", "test": "def check(candidate):\n    assert sequence(10) == 6", "prompt_code": "def sequence(n): \r\n"}
{"task_id": 85, "prompt": "Write a function to find the surface area of a sphere.\nimport math\r\ndef surfacearea_sphere(r):\r\n", "canonical_solution": "  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "entry_point": "surfacearea_sphere", "test": "def check(candidate):\n    assert surfacearea_sphere(10)==1256.6370614359173", "prompt_code": "import math\r\ndef surfacearea_sphere(r):\r\n"}
{"task_id": 86, "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\r\n", "canonical_solution": "  return 3 * n * (n - 1) + 1", "entry_point": "centered_hexagonal_number", "test": "def check(candidate):\n    assert centered_hexagonal_number(10) == 271", "prompt_code": "def centered_hexagonal_number(n):\r\n"}
{"task_id": 87, "prompt": "Write a function to merge three dictionaries into a single expression.\nimport collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n", "canonical_solution": "    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict", "entry_point": "merge_dictionaries_three", "test": "def check(candidate):\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "prompt_code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n"}
{"task_id": 88, "prompt": "Write a function to get the frequency of the elements in a list.\nimport collections\r\ndef freq_count(list1):\r\n", "canonical_solution": "  freq_count= collections.Counter(list1)\r\n  return freq_count", "entry_point": "freq_count", "test": "def check(candidate):\n    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ", "prompt_code": "import collections\r\ndef freq_count(list1):\r\n"}
{"task_id": 89, "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\r\n", "canonical_solution": "  return (N - 1)", "entry_point": "closest_num", "test": "def check(candidate):\n    assert closest_num(11) == 10", "prompt_code": "def closest_num(N):\r\n"}
{"task_id": 90, "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\r\n", "canonical_solution": "    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max", "entry_point": "len_log", "test": "def check(candidate):\n    assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "prompt_code": "def len_log(list1):\r\n"}
{"task_id": 91, "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\r\n", "canonical_solution": "   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False", "entry_point": "find_substring", "test": "def check(candidate):\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "prompt_code": "def find_substring(str1, sub_str):\r\n"}
{"task_id": 92, "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \r\n", "canonical_solution": "\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True", "entry_point": "is_undulating", "test": "def check(candidate):\n    assert is_undulating(\"1212121\") == True", "prompt_code": "def is_undulating(n): \r\n"}
{"task_id": 93, "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\r\n", "canonical_solution": "\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "entry_point": "power", "test": "def check(candidate):\n    assert power(3,4) == 81", "prompt_code": "def power(a,b):\r\n"}
{"task_id": 94, "prompt": "Write a function to extract the index minimum value record from the given tuples.\nfrom operator import itemgetter \r\ndef index_minimum(test_list):\r\n", "canonical_solution": "  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ", "entry_point": "index_minimum", "test": "def check(candidate):\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "prompt_code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n"}
{"task_id": 95, "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \r\n", "canonical_solution": "    minLength = min(len(x) for x in lst )\r\n    return minLength ", "entry_point": "Find_Min_Length", "test": "def check(candidate):\n    assert Find_Min_Length([[1],[1,2]]) == 1", "prompt_code": "def Find_Min_Length(lst):  \r\n"}
{"task_id": 96, "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\r\n", "canonical_solution": "  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x", "entry_point": "divisor", "test": "def check(candidate):\n    assert divisor(15) == 4 ", "prompt_code": "def divisor(n):\r\n"}
{"task_id": 97, "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\r\n", "canonical_solution": "    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n", "entry_point": "frequency_lists", "test": "def check(candidate):\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "prompt_code": "def frequency_lists(list1):\r\n"}
{"task_id": 98, "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \r\n", "canonical_solution": "    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ", "entry_point": "multiply_num", "test": "def check(candidate):\n    assert multiply_num((8, 2, 3, -1, 7))==-67.2", "prompt_code": "def multiply_num(numbers):  \r\n"}
{"task_id": 99, "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \r\n", "canonical_solution": "    return bin(n).replace(\"0b\",\"\") ", "entry_point": "decimal_to_binary", "test": "def check(candidate):\n    assert decimal_to_binary(8) == '1000'", "prompt_code": "def decimal_to_binary(n): \r\n"}
{"task_id": 100, "prompt": "Write a function to find the next smallest palindrome of a specified number.\nimport sys\r\ndef next_smallest_palindrome(num):\r\n", "canonical_solution": "    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i", "entry_point": "next_smallest_palindrome", "test": "def check(candidate):\n    assert next_smallest_palindrome(99)==101", "prompt_code": "import sys\r\ndef next_smallest_palindrome(num):\r\n"}
{"task_id": 101, "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\r\n", "canonical_solution": "  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]", "entry_point": "kth_element", "test": "def check(candidate):\n    assert kth_element([12,3,5,7,19], 5, 2) == 3", "prompt_code": "def kth_element(arr, n, k):\r\n"}
{"task_id": 102, "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\r\n", "canonical_solution": "        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "entry_point": "snake_to_camel", "test": "def check(candidate):\n    assert snake_to_camel('python_program')=='PythonProgram'", "prompt_code": "def snake_to_camel(word):\r\n"}
{"task_id": 103, "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \r\n", "canonical_solution": "\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "entry_point": "eulerian_num", "test": "def check(candidate):\n    assert eulerian_num(3, 1) == 4", "prompt_code": "def eulerian_num(n, m): \r\n"}
{"task_id": 104, "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\r\n", "canonical_solution": "    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r", "entry_point": "sort_sublists", "test": "def check(candidate):\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "prompt_code": "def sort_sublists(input_list):\r\n"}
{"task_id": 105, "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \r\n", "canonical_solution": "    return sum(lst) ", "entry_point": "count", "test": "def check(candidate):\n    assert count([True,False,True]) == 2", "prompt_code": "def count(lst):   \r\n"}
{"task_id": 106, "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\r\n", "canonical_solution": "  res = tuple(list(test_tup) + test_list)\r\n  return (res) ", "entry_point": "add_lists", "test": "def check(candidate):\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "prompt_code": "def add_lists(test_list, test_tup):\r\n"}
{"task_id": 107, "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \r\n", "canonical_solution": "    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ", "entry_point": "count_Hexadecimal", "test": "def check(candidate):\n    assert count_Hexadecimal(10,15) == 6", "prompt_code": "def count_Hexadecimal(L,R) :  \r\n"}
{"task_id": 108, "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nimport heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n", "canonical_solution": "  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)", "entry_point": "merge_sorted_list", "test": "def check(candidate):\n    assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "prompt_code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n"}
{"task_id": 109, "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \r\n", "canonical_solution": "    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ", "entry_point": "odd_Equivalent", "test": "def check(candidate):\n    assert odd_Equivalent(\"011001\",6) == 3", "prompt_code": "def odd_Equivalent(s,n): \r\n"}
{"task_id": 110, "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\r\n", "canonical_solution": "  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ", "entry_point": "extract_missing", "test": "def check(candidate):\n    assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]", "prompt_code": "def extract_missing(test_list, strt_val, stop_val):\r\n"}
{"task_id": 111, "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\r\n", "canonical_solution": "    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result", "entry_point": "common_in_nested_lists", "test": "def check(candidate):\n    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]", "prompt_code": "def common_in_nested_lists(nestedlist):\r\n"}
{"task_id": 112, "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \r\n", "canonical_solution": "    return 2*(diameter+height)  ", "entry_point": "perimeter", "test": "def check(candidate):\n    assert perimeter(2,4) == 12", "prompt_code": "def perimeter(diameter,height) : \r\n"}
{"task_id": 113, "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\r\n", "canonical_solution": " text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False", "entry_point": "check_integer", "test": "def check(candidate):\n    assert check_integer(\"python\")==False", "prompt_code": "def check_integer(text):\r\n"}
{"task_id": 114, "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\nfrom collections import Counter \r\ndef assign_freq(test_list):\r\n", "canonical_solution": "  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ", "entry_point": "assign_freq", "test": "def check(candidate):\n    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'", "prompt_code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n"}
{"task_id": 115, "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\r\n", "canonical_solution": " empty_dit=all(not d for d in list1)\r\n return empty_dit", "entry_point": "empty_dit", "test": "def check(candidate):\n    assert empty_dit([{},{},{}])==True", "prompt_code": "def empty_dit(list1):\r\n"}
{"task_id": 116, "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\r\n", "canonical_solution": "    result = int(''.join(map(str,nums)))\r\n    return result", "entry_point": "tuple_to_int", "test": "def check(candidate):\n    assert tuple_to_int((1,2,3))==123", "prompt_code": "def tuple_to_int(nums):\r\n"}
{"task_id": 117, "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\r\n", "canonical_solution": "  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ", "entry_point": "list_to_float", "test": "def check(candidate):\n    assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'", "prompt_code": "def list_to_float(test_list):\r\n"}
{"task_id": 118, "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \r\n", "canonical_solution": "    lst = list(string.split(\" \")) \r\n    return lst", "entry_point": "string_to_list", "test": "def check(candidate):\n    assert string_to_list(\"python programming\")==['python','programming']", "prompt_code": "def string_to_list(string): \r\n"}
{"task_id": 119, "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\r\n", "canonical_solution": "    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)", "entry_point": "search", "test": "def check(candidate):\n    assert search([1,1,2,2,3],5) == 3", "prompt_code": "def search(arr,n) :\r\n"}
{"task_id": 120, "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\r\n", "canonical_solution": "    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max", "entry_point": "max_product_tuple", "test": "def check(candidate):\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "prompt_code": "def max_product_tuple(list1):\r\n"}
{"task_id": 121, "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\r\n", "canonical_solution": "    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)", "entry_point": "check_triplet", "test": "def check(candidate):\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True", "prompt_code": "def check_triplet(A, n, sum, count):\r\n"}
{"task_id": 122, "prompt": "Write a function to find n\u2019th smart number.\nMAX = 3000 \r\ndef smartNumber(n): \r\n", "canonical_solution": "\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ", "entry_point": "smartNumber", "test": "def check(candidate):\n    assert smartNumber(1) == 30", "prompt_code": "MAX = 3000 \r\ndef smartNumber(n): \r\n"}
{"task_id": 123, "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\r\n", "canonical_solution": "    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)", "entry_point": "amicable_numbers_sum", "test": "def check(candidate):\n    assert amicable_numbers_sum(999)==504", "prompt_code": "def amicable_numbers_sum(limit):\r\n"}
{"task_id": 124, "prompt": "Write a function to get the angle of a complex number.\nimport cmath\r\ndef angle_complex(a,b):\r\n", "canonical_solution": "  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle", "entry_point": "angle_complex", "test": "def check(candidate):\n    assert angle_complex(0,1j)==1.5707963267948966 ", "prompt_code": "import cmath\r\ndef angle_complex(a,b):\r\n"}
{"task_id": 125, "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \r\n", "canonical_solution": "\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0", "entry_point": "find_length", "test": "def check(candidate):\n    assert find_length(\"11000010001\", 11) == 6", "prompt_code": "def find_length(string, n): \r\n"}
{"task_id": 126, "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \r\n", "canonical_solution": "    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum", "entry_point": "sum", "test": "def check(candidate):\n    assert sum(10,15) == 6", "prompt_code": "def sum(a,b): \r\n"}
{"task_id": 127, "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\r\n", "canonical_solution": "    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)", "entry_point": "multiply_int", "test": "def check(candidate):\n    assert multiply_int(10,20)==200", "prompt_code": "def multiply_int(x, y):\r\n"}
{"task_id": 128, "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\r\n", "canonical_solution": "    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t", "entry_point": "long_words", "test": "def check(candidate):\n    assert long_words(3,\"python is a programming language\")==['python','programming','language']", "prompt_code": "def long_words(n, str):\r\n"}
{"task_id": 129, "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\r\n", "canonical_solution": "    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True", "entry_point": "magic_square_test", "test": "def check(candidate):\n    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "prompt_code": "def magic_square_test(my_matrix):\r\n"}
{"task_id": 130, "prompt": "Write a function to find the item with maximum frequency in a given list.\nfrom collections import defaultdict\r\ndef max_occurrences(nums):\r\n", "canonical_solution": "    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result", "entry_point": "max_occurrences", "test": "def check(candidate):\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)", "prompt_code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n"}
{"task_id": 131, "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\r\n", "canonical_solution": "\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string", "entry_point": "reverse_vowels", "test": "def check(candidate):\n    assert reverse_vowels(\"Python\") == \"Python\"", "prompt_code": "def reverse_vowels(str1):\r\n"}
{"task_id": 132, "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\r\n", "canonical_solution": "  str =  ''.join(tup1)\r\n  return str", "entry_point": "tup_string", "test": "def check(candidate):\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "prompt_code": "def tup_string(tup1):\r\n"}
{"task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\r\n", "canonical_solution": "  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)", "entry_point": "sum_negativenum", "test": "def check(candidate):\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "prompt_code": "def sum_negativenum(nums):\r\n"}
{"task_id": 134, "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \r\n", "canonical_solution": "    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ", "entry_point": "check_last ", "test": "def check(candidate):\n    assert check_last([5,7,10],3,1) == \"ODD\"", "prompt_code": "def check_last (arr,n,p): \r\n"}
{"task_id": 135, "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \r\n", "canonical_solution": "\treturn n*(2*n - 1) ", "entry_point": "hexagonal_num", "test": "def check(candidate):\n    assert hexagonal_num(10) == 190", "prompt_code": "def hexagonal_num(n): \r\n"}
{"task_id": 136, "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\r\n", "canonical_solution": " if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total", "entry_point": "cal_electbill", "test": "def check(candidate):\n    assert cal_electbill(75)==246.25", "prompt_code": "def cal_electbill(units):\r\n"}
{"task_id": 137, "prompt": "Write a function to find the ration of zeroes in an array of integers.\nfrom array import array\r\ndef zero_count(nums):\r\n", "canonical_solution": "    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "entry_point": "zero_count", "test": "def check(candidate):\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15", "prompt_code": "from array import array\r\ndef zero_count(nums):\r\n"}
{"task_id": 138, "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \r\n", "canonical_solution": "    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True", "entry_point": "is_Sum_Of_Powers_Of_Two", "test": "def check(candidate):\n    assert is_Sum_Of_Powers_Of_Two(10) == True", "prompt_code": "def is_Sum_Of_Powers_Of_Two(n): \r\n"}
{"task_id": 139, "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\r\n", "canonical_solution": "  perimeter=2*3.1415*r\r\n  return perimeter", "entry_point": "circle_circumference", "test": "def check(candidate):\n    assert circle_circumference(10)==62.830000000000005", "prompt_code": "def circle_circumference(r):\r\n"}
{"task_id": 140, "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\r\n", "canonical_solution": "  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ", "entry_point": "extract_singly", "test": "def check(candidate):\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]", "prompt_code": "def extract_singly(test_list):\r\n"}
{"task_id": 141, "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\r\n", "canonical_solution": "    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums", "entry_point": "pancake_sort", "test": "def check(candidate):\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "prompt_code": "def pancake_sort(nums):\r\n"}
{"task_id": 142, "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\r\n", "canonical_solution": "    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result", "entry_point": "count_samepair", "test": "def check(candidate):\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "prompt_code": "def count_samepair(list1,list2,list3):\r\n"}
{"task_id": 143, "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \r\n", "canonical_solution": "\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ", "entry_point": "find_lists", "test": "def check(candidate):\n    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "prompt_code": "def find_lists(Input): \r\n"}
{"task_id": 144, "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \r\n", "canonical_solution": "    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum", "entry_point": "sum_Pairs", "test": "def check(candidate):\n    assert sum_Pairs([1,8,9,15,16],5) == 74", "prompt_code": "def sum_Pairs(arr,n): \r\n"}
{"task_id": 145, "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \r\n", "canonical_solution": "    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ", "entry_point": "max_Abs_Diff", "test": "def check(candidate):\n    assert max_Abs_Diff((2,1,5,3),4) == 4", "prompt_code": "def max_Abs_Diff(arr,n): \r\n"}
{"task_id": 146, "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\r\n", "canonical_solution": "  for i in range(len(str1)):\r\n   return ord(str1[i])", "entry_point": "ascii_value_string", "test": "def check(candidate):\n    assert ascii_value_string(\"python\")==112", "prompt_code": "def ascii_value_string(str1):\r\n"}
{"task_id": 147, "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \r\n", "canonical_solution": "\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]", "entry_point": "max_path_sum", "test": "def check(candidate):\n    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14", "prompt_code": "def max_path_sum(tri, m, n): \r\n"}
{"task_id": 148, "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \r\n", "canonical_solution": "    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ", "entry_point": "sum_digits_single", "test": "def check(candidate):\n    assert sum_digits_twoparts(35)==17", "prompt_code": "def sum_digits_single(x) : \r\n"}
{"task_id": 149, "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \r\n", "canonical_solution": "\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result", "entry_point": "longest_subseq_with_diff_one", "test": "def check(candidate):\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6", "prompt_code": "def longest_subseq_with_diff_one(arr, n): \r\n"}
{"task_id": 150, "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \r\n", "canonical_solution": "    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False", "entry_point": "does_Contain_B", "test": "def check(candidate):\n    assert does_Contain_B(1,7,3) == True", "prompt_code": "def does_Contain_B(a,b,c): \r\n"}
{"task_id": 151, "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\r\n", "canonical_solution": "    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1", "entry_point": "gcd", "test": "def check(candidate):\n    assert is_coprime(17,13) == True", "prompt_code": "def gcd(p,q):\r\n"}
{"task_id": 152, "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\r\n", "canonical_solution": "    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n", "entry_point": "merge", "test": "def check(candidate):\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]", "prompt_code": "def merge(a,b):\r\n"}
{"task_id": 153, "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \r\n", "canonical_solution": "  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex", "entry_point": "parabola_vertex", "test": "def check(candidate):\n    assert parabola_vertex(5,3,2)==(-0.3, 1.55)", "prompt_code": "def parabola_vertex(a, b, c): \r\n"}
{"task_id": 154, "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\r\n", "canonical_solution": "    result = [i[N] for i in nums]\r\n    return result", "entry_point": "specified_element", "test": "def check(candidate):\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]", "prompt_code": "def specified_element(nums, N):\r\n"}
{"task_id": 155, "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \r\n", "canonical_solution": "    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "entry_point": "even_bit_toggle_number", "test": "def check(candidate):\n    assert even_bit_toggle_number(10) == 0", "prompt_code": "def even_bit_toggle_number(n) : \r\n"}
{"task_id": 156, "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\r\n", "canonical_solution": "    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result", "entry_point": "tuple_int_str", "test": "def check(candidate):\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))", "prompt_code": "def tuple_int_str(tuple_str):\r\n"}
{"task_id": 157, "prompt": "Write a function to reflect the run-length encoding from a list.\nfrom itertools import groupby\r\ndef encode_list(list1):\r\n", "canonical_solution": "    return [[len(list(group)), key] for key, group in groupby(list1)]", "entry_point": "encode_list", "test": "def check(candidate):\n    assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]", "prompt_code": "from itertools import groupby\r\ndef encode_list(list1):\r\n"}
{"task_id": 158, "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \r\n", "canonical_solution": "    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ", "entry_point": "min_Ops", "test": "def check(candidate):\n    assert min_Ops([2,2,2,2],4,3) == 0", "prompt_code": "def min_Ops(arr,n,k): \r\n"}
{"task_id": 159, "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\r\n", "canonical_solution": " if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season", "entry_point": "month_season", "test": "def check(candidate):\n    assert month_season('January',4)==('winter')", "prompt_code": "def month_season(month,days):\r\n"}
{"task_id": 160, "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \r\n", "canonical_solution": "\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ", "entry_point": "solution ", "test": "def check(candidate):\n    assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)", "prompt_code": "def solution (a, b, n): \r\n"}
{"task_id": 161, "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\r\n", "canonical_solution": "    result = [x for x in list1 if x not in list2]\r\n    return result", "entry_point": "remove_elements", "test": "def check(candidate):\n    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]", "prompt_code": "def remove_elements(list1, list2):\r\n"}
{"task_id": 162, "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\r\n", "canonical_solution": "  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)", "entry_point": "sum_series", "test": "def check(candidate):\n    assert sum_series(6)==12", "prompt_code": "def sum_series(n):\r\n"}
{"task_id": 163, "prompt": "Write a function to calculate the area of a regular polygon.\nfrom math import tan, pi\r\ndef area_polygon(s,l):\r\n", "canonical_solution": "  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area", "entry_point": "area_polygon", "test": "def check(candidate):\n    assert area_polygon(4,20)==400.00000000000006", "prompt_code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n"}
{"task_id": 164, "prompt": "Write a python function to check whether the sum of divisors are same or not.\nimport math \r\ndef divSum(n): \r\n", "canonical_solution": "    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ", "entry_point": "divSum", "test": "def check(candidate):\n    assert areEquivalent(36,57) == False", "prompt_code": "import math \r\ndef divSum(n): \r\n"}
{"task_id": 165, "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \r\n", "canonical_solution": "    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ", "entry_point": "count_char_position", "test": "def check(candidate):\n    assert count_char_position(\"xbcefg\") == 2", "prompt_code": "def count_char_position(str1): \r\n"}
{"task_id": 166, "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \r\n", "canonical_solution": "    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ", "entry_point": "find_even_Pair", "test": "def check(candidate):\n    assert find_even_Pair([5,4,7,2,1],5) == 4", "prompt_code": "def find_even_Pair(A,N): \r\n"}
{"task_id": 167, "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \r\n", "canonical_solution": "    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ", "entry_point": "next_Power_Of_2", "test": "def check(candidate):\n    assert next_Power_Of_2(0) == 1", "prompt_code": "def next_Power_Of_2(n): \r\n"}
{"task_id": 168, "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \r\n", "canonical_solution": "    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ", "entry_point": "frequency", "test": "def check(candidate):\n    assert frequency([1,2,3],4) == 0", "prompt_code": "def frequency(a,x): \r\n"}
{"task_id": 169, "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \r\n", "canonical_solution": "\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ", "entry_point": "get_pell", "test": "def check(candidate):\n    assert get_pell(4) == 12", "prompt_code": "def get_pell(n): \r\n"}
{"task_id": 170, "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n", "canonical_solution": "    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "entry_point": "sum_range_list", "test": "def check(candidate):\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29", "prompt_code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n"}
{"task_id": 171, "prompt": "Write a function to find the perimeter of a pentagon.\nimport math\r\ndef perimeter_pentagon(a):\r\n", "canonical_solution": "  perimeter=(5*a)\r\n  return perimeter", "entry_point": "perimeter_pentagon", "test": "def check(candidate):\n    assert perimeter_pentagon(5)==25", "prompt_code": "import math\r\ndef perimeter_pentagon(a):\r\n"}
{"task_id": 172, "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\r\n", "canonical_solution": "  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count", "entry_point": "count_occurance", "test": "def check(candidate):\n    assert count_occurance(\"letstdlenstdporstd\") == 3", "prompt_code": "def count_occurance(s):\r\n"}
{"task_id": 173, "prompt": "Write a function to remove everything except alphanumeric characters from a string.\nimport re\r\ndef remove_splchar(text): \r\n", "canonical_solution": " pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))", "entry_point": "remove_splchar", "test": "def check(candidate):\n    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')", "prompt_code": "import re\r\ndef remove_splchar(text): \r\n"}
{"task_id": 174, "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\r\n", "canonical_solution": "    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result", "entry_point": "group_keyvalue", "test": "def check(candidate):\n    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}", "prompt_code": "def group_keyvalue(l):\r\n"}
{"task_id": 175, "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\r\n", "canonical_solution": "        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0", "entry_point": "is_valid_parenthese", "test": "def check(candidate):\n    assert is_valid_parenthese(\"(){}[]\")==True", "prompt_code": "def is_valid_parenthese( str1):\r\n"}
{"task_id": 176, "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\r\n", "canonical_solution": "  perimeter=a+b+c\r\n  return perimeter", "entry_point": "perimeter_triangle", "test": "def check(candidate):\n    assert perimeter_triangle(10,20,30)==60", "prompt_code": "def perimeter_triangle(a,b,c):\r\n"}
{"task_id": 177, "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \r\n", "canonical_solution": "    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ", "entry_point": "answer", "test": "def check(candidate):\n    assert answer(3,8) == (3,6)", "prompt_code": "def answer(L,R): \r\n"}
{"task_id": 178, "prompt": "Write a function to search some literals strings in a string.\nimport re\r\ndef string_literals(patterns,text):\r\n", "canonical_solution": "  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')", "entry_point": "string_literals", "test": "def check(candidate):\n    assert string_literals(['language'],'python language')==('Matched!')", "prompt_code": "import re\r\ndef string_literals(patterns,text):\r\n"}
{"task_id": 179, "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \r\n", "canonical_solution": "\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ", "entry_point": "is_num_keith", "test": "def check(candidate):\n    assert is_num_keith(14) == True", "prompt_code": "def is_num_keith(x): \r\n"}
{"task_id": 180, "prompt": "Write a function to calculate distance between two points using latitude and longitude.\nfrom math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n", "canonical_solution": " dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist", "entry_point": "distance_lat_long", "test": "def check(candidate):\n    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429", "prompt_code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n"}
{"task_id": 181, "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \r\n", "canonical_solution": "\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ", "entry_point": "common_prefix_util", "test": "def check(candidate):\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'", "prompt_code": "def common_prefix_util(str1, str2): \r\n"}
{"task_id": 182, "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\nimport re\r\ndef find_character(string):\r\n", "canonical_solution": "  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "entry_point": "find_character", "test": "def check(candidate):\n    assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])", "prompt_code": "import re\r\ndef find_character(string):\r\n"}
{"task_id": 183, "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\r\n", "canonical_solution": "  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count", "entry_point": "count_pairs", "test": "def check(candidate):\n    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2", "prompt_code": "def count_pairs(arr, n, k):\r\n"}
{"task_id": 184, "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\r\n", "canonical_solution": " greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum", "entry_point": "greater_specificnum", "test": "def check(candidate):\n    assert greater_specificnum([220, 330, 500],200)==True", "prompt_code": "def greater_specificnum(list,num):\r\n"}
{"task_id": 185, "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \r\n", "canonical_solution": "  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus", "entry_point": "parabola_focus", "test": "def check(candidate):\n    assert parabola_focus(5,3,2)==(-0.3, 1.6)", "prompt_code": "def parabola_focus(a, b, c): \r\n"}
{"task_id": 186, "prompt": "Write a function to search some literals strings in a string by using regex.\nimport re\r\ndef check_literals(text, patterns):\r\n", "canonical_solution": "  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')", "entry_point": "check_literals", "test": "def check(candidate):\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'", "prompt_code": "import re\r\ndef check_literals(text, patterns):\r\n"}
{"task_id": 187, "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \r\n", "canonical_solution": "    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "entry_point": "longest_common_subsequence", "test": "def check(candidate):\n    assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4", "prompt_code": "def longest_common_subsequence(X, Y, m, n): \r\n"}
{"task_id": 188, "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\r\n", "canonical_solution": "    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;", "entry_point": "prod_Square", "test": "def check(candidate):\n    assert prod_Square(25) == False", "prompt_code": "def prod_Square(n):\r\n"}
{"task_id": 189, "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \r\n", "canonical_solution": "    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)", "entry_point": "first_Missing_Positive", "test": "def check(candidate):\n    assert first_Missing_Positive([1,2,3,-1,5],5) == 4", "prompt_code": "def first_Missing_Positive(arr,n): \r\n"}
{"task_id": 190, "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \r\n", "canonical_solution": "    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ", "entry_point": "count_Intgral_Points", "test": "def check(candidate):\n    assert count_Intgral_Points(1,1,4,4) == 4", "prompt_code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n"}
{"task_id": 191, "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\r\n", "canonical_solution": "  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False", "entry_point": "check_monthnumber", "test": "def check(candidate):\n    assert check_monthnumber(\"February\")==False", "prompt_code": "def check_monthnumber(monthname3):\r\n"}
{"task_id": 192, "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \r\n", "canonical_solution": "    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ", "entry_point": "check_String", "test": "def check(candidate):\n    assert check_String('thishasboth29') == True", "prompt_code": "def check_String(str): \r\n"}
{"task_id": 193, "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\r\n", "canonical_solution": "  res = tuple(set(test_tup))\r\n  return (res) ", "entry_point": "remove_tuple", "test": "def check(candidate):\n    assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)", "prompt_code": "def remove_tuple(test_tup):\r\n"}
{"task_id": 194, "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \r\n", "canonical_solution": "    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ", "entry_point": "octal_To_Decimal", "test": "def check(candidate):\n    assert octal_To_Decimal(25) == 21", "prompt_code": "def octal_To_Decimal(n):  \r\n"}
{"task_id": 195, "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \r\n", "canonical_solution": "    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res", "entry_point": "first", "test": "def check(candidate):\n    assert first([1,2,3,4,5,6,6],6,6) == 5", "prompt_code": "def first(arr,x,n): \r\n"}
{"task_id": 196, "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\r\n", "canonical_solution": "  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ", "entry_point": "remove_tuples", "test": "def check(candidate):\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]", "prompt_code": "def remove_tuples(test_list, K):\r\n"}
{"task_id": 197, "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n", "entry_point": "find_exponentio", "test": "def check(candidate):\n    assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)", "prompt_code": "def find_exponentio(test_tup1, test_tup2):\r\n"}
{"task_id": 198, "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\nimport math\r\ndef largest_triangle(a,b): \r\n", "canonical_solution": "    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ", "entry_point": "largest_triangle", "test": "def check(candidate):\n    assert largest_triangle(4,2)==10.392304845413264", "prompt_code": "import math\r\ndef largest_triangle(a,b): \r\n"}
{"task_id": 199, "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \r\n", "canonical_solution": "    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ", "entry_point": "highest_Power_of_2", "test": "def check(candidate):\n    assert highest_Power_of_2(10) == 8", "prompt_code": "def highest_Power_of_2(n): \r\n"}
{"task_id": 200, "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\r\n", "canonical_solution": "    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result", "entry_point": "position_max", "test": "def check(candidate):\n    assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]", "prompt_code": "def position_max(list1):\r\n"}
{"task_id": 201, "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \r\n", "canonical_solution": "    return len(set(lst)) == 1", "entry_point": "chkList", "test": "def check(candidate):\n    assert chkList(['one','one','one']) == True", "prompt_code": "def chkList(lst): \r\n"}
{"task_id": 202, "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\r\n", "canonical_solution": " str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "entry_point": "remove_even", "test": "def check(candidate):\n    assert remove_even(\"python\")==(\"pto\")", "prompt_code": "def remove_even(str1):\r\n"}
{"task_id": 203, "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \r\n", "canonical_solution": "    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ", "entry_point": "hamming_Distance", "test": "def check(candidate):\n    assert hamming_Distance(4,8) == 2", "prompt_code": "def hamming_Distance(n1,n2) : \r\n"}
{"task_id": 204, "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \r\n", "canonical_solution": "    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ", "entry_point": "count", "test": "def check(candidate):\n    assert count(\"abcc\",\"c\") == 2", "prompt_code": "def count(s,c) : \r\n"}
{"task_id": 205, "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\r\n", "canonical_solution": "  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ", "entry_point": "inversion_elements", "test": "def check(candidate):\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)", "prompt_code": "def inversion_elements(test_tup):\r\n"}
{"task_id": 206, "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\r\n", "canonical_solution": "  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "entry_point": "concatenate_elements", "test": "def check(candidate):\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')", "prompt_code": "def concatenate_elements(test_tup):\r\n"}
{"task_id": 207, "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \r\n", "canonical_solution": "\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]", "entry_point": "find_longest_repeating_subseq", "test": "def check(candidate):\n    assert find_longest_repeating_subseq(\"AABEBCDD\") == 3", "prompt_code": "def find_longest_repeating_subseq(str): \r\n"}
{"task_id": 208, "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\nimport re\r\ndef is_decimal(num):\r\n", "canonical_solution": "  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)", "entry_point": "is_decimal", "test": "def check(candidate):\n    assert is_decimal('123.11') == True", "prompt_code": "import re\r\ndef is_decimal(num):\r\n"}
{"task_id": 209, "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\nimport heapq as hq\r\ndef heap_replace(heap,a):\r\n", "canonical_solution": "  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap", "entry_point": "heap_replace", "test": "def check(candidate):\n    assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]", "prompt_code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n"}
{"task_id": 210, "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nimport re\r\ndef is_allowed_specific_char(string):\r\n", "canonical_solution": "    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)", "entry_point": "is_allowed_specific_char", "test": "def check(candidate):\n    assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True", "prompt_code": "import re\r\ndef is_allowed_specific_char(string):\r\n"}
{"task_id": 211, "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \r\n", "canonical_solution": "    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ", "entry_point": "count_Num", "test": "def check(candidate):\n    assert count_Num(2) == 1", "prompt_code": "def count_Num(n): \r\n"}
{"task_id": 212, "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\nimport math  \r\ndef fourth_Power_Sum(n): \r\n", "canonical_solution": "    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum", "entry_point": "fourth_Power_Sum", "test": "def check(candidate):\n    assert fourth_Power_Sum(2) == 17", "prompt_code": "import math  \r\ndef fourth_Power_Sum(n): \r\n"}
{"task_id": 213, "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "concatenate_strings", "test": "def check(candidate):\n    assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')", "prompt_code": "def concatenate_strings(test_tup1, test_tup2):\r\n"}
{"task_id": 214, "prompt": "Write a function to convert radians to degrees.\nimport math\r\ndef degree_radian(radian):\r\n", "canonical_solution": " degree = radian*(180/math.pi)\r\n return degree", "entry_point": "degree_radian", "test": "def check(candidate):\n    assert degree_radian(90)==5156.620156177409", "prompt_code": "import math\r\ndef degree_radian(radian):\r\n"}
{"task_id": 215, "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\r\n", "canonical_solution": "    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]", "entry_point": "decode_list", "test": "def check(candidate):\n    assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]", "prompt_code": "def decode_list(alist):\r\n"}
{"task_id": 216, "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \r\n", "canonical_solution": "    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ", "entry_point": "check_subset_list", "test": "def check(candidate):\n    assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False", "prompt_code": "def check_subset_list(list1, list2): \r\n"}
{"task_id": 217, "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \r\n", "canonical_solution": "    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'", "entry_point": "first_Repeated_Char", "test": "def check(candidate):\n    assert first_Repeated_Char(\"Google\") == \"o\"", "prompt_code": "def first_Repeated_Char(str): \r\n"}
{"task_id": 218, "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\nimport math   \r\ndef min_Operations(A,B):  \r\n", "canonical_solution": "    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1", "entry_point": "min_Operations", "test": "def check(candidate):\n    assert min_Operations(2,4) == 1", "prompt_code": "import math   \r\ndef min_Operations(A,B):  \r\n"}
{"task_id": 219, "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\n\r\ndef extract_min_max(test_tup, K):\r\n", "canonical_solution": "  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ", "entry_point": "extract_min_max", "test": "def check(candidate):\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)", "prompt_code": "\r\ndef extract_min_max(test_tup, K):\r\n"}
{"task_id": 220, "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nimport re\r\ndef replace_max_specialchar(text,n):\r\n", "canonical_solution": " return (re.sub(\"[ ,.]\", \":\", text, n))", "entry_point": "replace_max_specialchar", "test": "def check(candidate):\n    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')", "prompt_code": "import re\r\ndef replace_max_specialchar(text,n):\r\n"}
{"task_id": 221, "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\r\n", "canonical_solution": "    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even", "entry_point": "first_even", "test": "def check(candidate):\n    assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4", "prompt_code": "def first_even(nums):\r\n"}
{"task_id": 222, "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\r\n", "canonical_solution": "  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ", "entry_point": "check_type", "test": "def check(candidate):\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True", "prompt_code": "def check_type(test_tuple):\r\n"}
{"task_id": 223, "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\r\n", "canonical_solution": "\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1", "entry_point": "is_majority", "test": "def check(candidate):\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "prompt_code": "def is_majority(arr, n, x):\r\n"}
{"task_id": 224, "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \r\n", "canonical_solution": "    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ", "entry_point": "count_Set_Bits", "test": "def check(candidate):\n    assert count_Set_Bits(2) == 1", "prompt_code": "def count_Set_Bits(n): \r\n"}
{"task_id": 225, "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \r\n", "canonical_solution": "    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ", "entry_point": "find_Min", "test": "def check(candidate):\n    assert find_Min([1,2,3,4,5],0,4) == 1", "prompt_code": "def find_Min(arr,low,high): \r\n"}
{"task_id": 226, "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\r\n", "canonical_solution": "  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result", "entry_point": "odd_values_string", "test": "def check(candidate):\n    assert odd_values_string('abcdef') == 'ace'", "prompt_code": "def odd_values_string(str):\r\n"}
{"task_id": 227, "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \r\n", "canonical_solution": "      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ", "entry_point": "min_of_three", "test": "def check(candidate):\n    assert min_of_three(10,20,0)==0", "prompt_code": "def min_of_three(a,b,c): \r\n"}
{"task_id": 228, "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n", "canonical_solution": "    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False", "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "def check(candidate):\n    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True", "prompt_code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n"}
{"task_id": 229, "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\r\n", "canonical_solution": "  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr", "entry_point": "re_arrange_array", "test": "def check(candidate):\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "prompt_code": "def re_arrange_array(arr, n):\r\n"}
{"task_id": 230, "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\r\n", "canonical_solution": " str2 = str1.replace(' ', char)\r\n return str2", "entry_point": "replace_blank", "test": "def check(candidate):\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")", "prompt_code": "def replace_blank(str1,char):\r\n"}
{"task_id": 231, "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \r\n", "canonical_solution": "\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))", "entry_point": "max_sum", "test": "def check(candidate):\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6", "prompt_code": "def max_sum(tri, n): \r\n"}
{"task_id": 232, "prompt": "Write a function to get the n largest items from a dataset.\nimport heapq\r\ndef larg_nnum(list1,n):\r\n", "canonical_solution": " largest=heapq.nlargest(n,list1)\r\n return largest", "entry_point": "larg_nnum", "test": "def check(candidate):\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]", "prompt_code": "import heapq\r\ndef larg_nnum(list1,n):\r\n"}
{"task_id": 233, "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\r\n", "canonical_solution": "  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface", "entry_point": "lateralsuface_cylinder", "test": "def check(candidate):\n    assert lateralsuface_cylinder(10,5)==314.15000000000003", "prompt_code": "def lateralsuface_cylinder(r,h):\r\n"}
{"task_id": 234, "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\r\n", "canonical_solution": "  volume = l * l * l\r\n  return volume", "entry_point": "volume_cube", "test": "def check(candidate):\n    assert volume_cube(3)==27", "prompt_code": "def volume_cube(l):\r\n"}
{"task_id": 235, "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \r\n", "canonical_solution": "    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ", "entry_point": "even_bit_set_number", "test": "def check(candidate):\n    assert even_bit_set_number(10) == 10", "prompt_code": "def even_bit_set_number(n): \r\n"}
{"task_id": 236, "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\r\n", "canonical_solution": "    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;", "entry_point": "No_of_Triangle", "test": "def check(candidate):\n    assert No_of_Triangle(4,2) == 7", "prompt_code": "def No_of_Triangle(N,K):\r\n"}
{"task_id": 237, "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\nfrom collections import Counter \r\ndef check_occurences(test_list):\r\n", "canonical_solution": "  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ", "entry_point": "check_occurences", "test": "def check(candidate):\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "prompt_code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n"}
{"task_id": 238, "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \r\n", "canonical_solution": "\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ", "entry_point": "number_of_substrings", "test": "def check(candidate):\n    assert number_of_substrings(\"abc\") == 6", "prompt_code": "def number_of_substrings(str): \r\n"}
{"task_id": 239, "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \r\n", "canonical_solution": "\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]", "entry_point": "get_total_number_of_sequences", "test": "def check(candidate):\n    assert get_total_number_of_sequences(10, 4) == 4", "prompt_code": "def get_total_number_of_sequences(m,n): \r\n"}
{"task_id": 240, "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\r\n", "canonical_solution": " list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n", "entry_point": "replace_list", "test": "def check(candidate):\n    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "prompt_code": "def replace_list(list1,list2):\r\n"}
{"task_id": 241, "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\r\n", "canonical_solution": " array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d", "entry_point": "array_3d", "test": "def check(candidate):\n    assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]", "prompt_code": "def array_3d(m,n,o):\r\n"}
{"task_id": 242, "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\r\n", "canonical_solution": " total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total", "entry_point": "count_charac", "test": "def check(candidate):\n    assert count_charac(\"python programming\")==18", "prompt_code": "def count_charac(str1):\r\n"}
{"task_id": 243, "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \r\n", "canonical_solution": "\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ", "entry_point": "sort_on_occurence", "test": "def check(candidate):\n    assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]", "prompt_code": "def sort_on_occurence(lst): \r\n"}
{"task_id": 244, "prompt": "Write a python function to find the next perfect square greater than a given number.\nimport math  \r\ndef next_Perfect_Square(N): \r\n", "canonical_solution": "    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ", "entry_point": "next_Perfect_Square", "test": "def check(candidate):\n    assert next_Perfect_Square(35) == 36", "prompt_code": "import math  \r\ndef next_Perfect_Square(N): \r\n"}
{"task_id": 245, "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \r\n", "canonical_solution": "\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum", "entry_point": "max_sum", "test": "def check(candidate):\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194", "prompt_code": "def max_sum(arr, n): \r\n"}
{"task_id": 246, "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\r\n", "canonical_solution": "    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;", "entry_point": "babylonian_squareroot", "test": "def check(candidate):\n    assert babylonian_squareroot(10)==3.162277660168379", "prompt_code": "def babylonian_squareroot(number):\r\n"}
{"task_id": 247, "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \r\n", "canonical_solution": "\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]", "entry_point": "lps", "test": "def check(candidate):\n    assert lps(\"TENS FOR TENS\") == 5 ", "prompt_code": "def lps(str): \r\n"}
{"task_id": 248, "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\r\n", "canonical_solution": "  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ", "entry_point": "harmonic_sum", "test": "def check(candidate):\n    assert harmonic_sum(7) == 2.5928571428571425", "prompt_code": "def harmonic_sum(n):\r\n"}
{"task_id": 249, "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\r\n", "canonical_solution": " result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result", "entry_point": "intersection_array", "test": "def check(candidate):\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "prompt_code": "def intersection_array(array_nums1,array_nums2):\r\n"}
{"task_id": 250, "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \r\n", "canonical_solution": "    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ", "entry_point": "count_X", "test": "def check(candidate):\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "prompt_code": "def count_X(tup, x): \r\n"}
{"task_id": 251, "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\r\n", "canonical_solution": " list = [v for elt in list for v in (element, elt)]\r\n return list", "entry_point": "insert_element", "test": "def check(candidate):\n    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ", "prompt_code": "def insert_element(list,element):\r\n"}
{"task_id": 252, "prompt": "Write a python function to convert complex numbers to polar coordinates.\nimport cmath  \r\ndef convert(numbers):    \r\n", "canonical_solution": "  num = cmath.polar(numbers)  \r\n  return (num) ", "entry_point": "convert", "test": "def check(candidate):\n    assert convert(1) == (1.0, 0.0)", "prompt_code": "import cmath  \r\ndef convert(numbers):    \r\n"}
{"task_id": 253, "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\r\n", "canonical_solution": "    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr", "entry_point": "count_integer", "test": "def check(candidate):\n    assert count_integer([1,2,'abc',1.2]) == 2", "prompt_code": "def count_integer(list1):\r\n"}
{"task_id": 254, "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\nimport re\r\ndef words_ae(text):\r\n", "canonical_solution": " list = re.findall(\"[ae]\\w+\", text)\r\n return list", "entry_point": "words_ae", "test": "def check(candidate):\n    assert words_ae(\"python programe\")==['ame']", "prompt_code": "import re\r\ndef words_ae(text):\r\n"}
{"task_id": 255, "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nfrom itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n", "canonical_solution": "    return list(combinations_with_replacement(l,n))\r", "entry_point": "combinations_colors", "test": "def check(candidate):\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "prompt_code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n"}
{"task_id": 256, "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\r\n", "canonical_solution": "    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr", "entry_point": "count_Primes_nums", "test": "def check(candidate):\n    assert count_Primes_nums(5) == 2", "prompt_code": "def count_Primes_nums(n):\r\n"}
{"task_id": 257, "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\r\n", "canonical_solution": " temp = a\r\n a = b\r\n b = temp\r\n return (a,b)", "entry_point": "swap_numbers", "test": "def check(candidate):\n    assert swap_numbers(10,20)==(20,10)", "prompt_code": "def swap_numbers(a,b):\r\n"}
{"task_id": 258, "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\r\n", "canonical_solution": "   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd", "entry_point": "count_odd", "test": "def check(candidate):\n    assert count_odd([1, 2, 3, 5, 7, 8, 10])==4", "prompt_code": "def count_odd(array_nums):\r\n"}
{"task_id": 259, "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "maximize_elements", "test": "def check(candidate):\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "prompt_code": "def maximize_elements(test_tup1, test_tup2):\r\n"}
{"task_id": 260, "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \r\n", "canonical_solution": "\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "entry_point": "newman_prime", "test": "def check(candidate):\n    assert newman_prime(3) == 7 ", "prompt_code": "def newman_prime(n): \r\n"}
{"task_id": 261, "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "division_elements", "test": "def check(candidate):\n    assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "prompt_code": "def division_elements(test_tup1, test_tup2):\r\n"}
{"task_id": 262, "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\r\n", "canonical_solution": "    return list1[:L], list1[L:]", "entry_point": "split_two_parts", "test": "def check(candidate):\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "prompt_code": "def split_two_parts(list1, L):\r\n"}
{"task_id": 263, "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\r\n", "canonical_solution": " d = d1.copy()\r\n d.update(d2)\r\n return d", "entry_point": "merge_dict", "test": "def check(candidate):\n    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}", "prompt_code": "def merge_dict(d1,d2):\r\n"}
{"task_id": 264, "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\r\n", "canonical_solution": " if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age", "entry_point": "dog_age", "test": "def check(candidate):\n    assert dog_age(12)==61", "prompt_code": "def dog_age(h_age):\r\n"}
{"task_id": 265, "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\r\n", "canonical_solution": "    return [S[i::step] for i in range(step)]", "entry_point": "list_split", "test": "def check(candidate):\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ", "prompt_code": "def list_split(S, step):\r\n"}
{"task_id": 266, "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\r\n", "canonical_solution": "  LSA = 4 * (l * l)\r\n  return LSA", "entry_point": "lateralsurface_cube", "test": "def check(candidate):\n    assert lateralsurface_cube(5)==100", "prompt_code": "def lateralsurface_cube(l):\r\n"}
{"task_id": 267, "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \r\n", "canonical_solution": "    return int(n*(4*n*n-1)/3) ", "entry_point": "square_Sum", "test": "def check(candidate):\n    assert square_Sum(2) == 10", "prompt_code": "def square_Sum(n):  \r\n"}
{"task_id": 268, "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \r\n", "canonical_solution": "\treturn (6 * n * (n - 1) + 1) ", "entry_point": "find_star_num", "test": "def check(candidate):\n    assert find_star_num(3) == 37", "prompt_code": "def find_star_num(n): \r\n"}
{"task_id": 269, "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\r\n", "canonical_solution": "  ch=k\r\n  return ord(ch)", "entry_point": "ascii_value", "test": "def check(candidate):\n    assert ascii_value('A')==65", "prompt_code": "def ascii_value(k):\r\n"}
{"task_id": 270, "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \r\n", "canonical_solution": "    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum", "entry_point": "sum_even_and_even_index", "test": "def check(candidate):\n    assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30", "prompt_code": "def sum_even_and_even_index(arr,n):  \r\n"}
{"task_id": 271, "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \r\n", "canonical_solution": "    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ", "entry_point": "even_Power_Sum", "test": "def check(candidate):\n    assert even_Power_Sum(2) == 1056", "prompt_code": "def even_Power_Sum(n): \r\n"}
{"task_id": 272, "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\r\n", "canonical_solution": "  res = [lis[-1] for lis in test_list]\r\n  return (res) ", "entry_point": "rear_extract", "test": "def check(candidate):\n    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "prompt_code": "def rear_extract(test_list):\r\n"}
{"task_id": 273, "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "substract_elements", "test": "def check(candidate):\n    assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "prompt_code": "def substract_elements(test_tup1, test_tup2):\r\n"}
{"task_id": 274, "prompt": "Write a python function to find sum of even index binomial coefficients.\nimport math  \r\ndef even_binomial_Coeff_Sum( n): \r\n", "canonical_solution": "    return (1 << (n - 1)) ", "entry_point": "even_binomial_Coeff_Sum", "test": "def check(candidate):\n    assert even_binomial_Coeff_Sum(4) == 8", "prompt_code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n"}
{"task_id": 275, "prompt": "Write a python function to find the position of the last removed element from the given array.\nimport math as mt \r\ndef get_Position(a,n,m): \r\n", "canonical_solution": "    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1", "entry_point": "get_Position", "test": "def check(candidate):\n    assert get_Position([2,5,4],3,2) == 2", "prompt_code": "import math as mt \r\ndef get_Position(a,n,m): \r\n"}
{"task_id": 276, "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\r\n", "canonical_solution": "  volume=3.1415*r*r*h\r\n  return volume", "entry_point": "volume_cylinder", "test": "def check(candidate):\n    assert volume_cylinder(10,5)==1570.7500000000002", "prompt_code": "def volume_cylinder(r,h):\r\n"}
{"task_id": 277, "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\r\n", "canonical_solution": " result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result", "entry_point": "dict_filter", "test": "def check(candidate):\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "prompt_code": "def dict_filter(dict,n):\r\n"}
{"task_id": 278, "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\r\n", "canonical_solution": "  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ", "entry_point": "count_first_elements", "test": "def check(candidate):\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "prompt_code": "def count_first_elements(test_tup):\r\n"}
{"task_id": 279, "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \r\n", "canonical_solution": "\treturn 4 * n * n - 3 * n ", "entry_point": "is_num_decagonal", "test": "def check(candidate):\n    assert is_num_decagonal(3) == 27", "prompt_code": "def is_num_decagonal(n): \r\n"}
{"task_id": 280, "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\r\n", "canonical_solution": "    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos", "entry_point": "sequential_search", "test": "def check(candidate):\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "prompt_code": "def sequential_search(dlist, item):\r\n"}
{"task_id": 281, "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\r\n", "canonical_solution": "    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True", "entry_point": "all_unique", "test": "def check(candidate):\n    assert all_unique([1,2,3]) == True", "prompt_code": "def all_unique(test_list):\r\n"}
{"task_id": 282, "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\r\n", "canonical_solution": "  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)", "entry_point": "sub_list", "test": "def check(candidate):\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "prompt_code": "def sub_list(nums1,nums2):\r\n"}
{"task_id": 283, "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \r\n", "canonical_solution": "    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True", "entry_point": "validate", "test": "def check(candidate):\n    assert validate(1234) == True", "prompt_code": "def validate(n): \r\n"}
{"task_id": 284, "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\r\n", "canonical_solution": "  check_element=all(v== element for v in list)\r\n  return check_element", "entry_point": "check_element", "test": "def check(candidate):\n    assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "prompt_code": "def check_element(list,element):\r\n"}
{"task_id": 285, "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\nimport re\r\ndef text_match_two_three(text):\r\n", "canonical_solution": "        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "entry_point": "text_match_two_three", "test": "def check(candidate):\n    assert text_match_two_three(\"ac\")==('Not matched!')", "prompt_code": "import re\r\ndef text_match_two_three(text):\r\n"}
{"task_id": 286, "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \r\n", "canonical_solution": "\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far", "entry_point": "max_sub_array_sum_repeated", "test": "def check(candidate):\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "prompt_code": "def max_sub_array_sum_repeated(a, n, k): \r\n"}
{"task_id": 287, "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \r\n", "canonical_solution": "    return int(2*n*(n+1)*(2*n+1)/3)", "entry_point": "square_Sum", "test": "def check(candidate):\n    assert square_Sum(2) == 20", "prompt_code": "def square_Sum(n):  \r\n"}
{"task_id": 288, "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\r\n", "canonical_solution": "\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element", "entry_point": "modular_inverse", "test": "def check(candidate):\n    assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2", "prompt_code": "def modular_inverse(arr, N, P):\r\n"}
{"task_id": 289, "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \r\n", "canonical_solution": "    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ", "entry_point": "odd_Days", "test": "def check(candidate):\n    assert odd_Days(100) == 5", "prompt_code": "def odd_Days(N): \r\n"}
{"task_id": 290, "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\r\n", "canonical_solution": "    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)", "entry_point": "max_length", "test": "def check(candidate):\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "prompt_code": "def max_length(list1):\r\n"}
{"task_id": 291, "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \r\n", "canonical_solution": "\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]", "entry_point": "count_no_of_ways", "test": "def check(candidate):\n    assert count_no_of_ways(2, 4) == 16", "prompt_code": "def count_no_of_ways(n, k): \r\n"}
{"task_id": 292, "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \r\n", "canonical_solution": "    q = n//m \r\n    return (q)", "entry_point": "find", "test": "def check(candidate):\n    assert find(10,3) == 3", "prompt_code": "def find(n,m):  \r\n"}
{"task_id": 293, "prompt": "Write a function to find the third side of a right angled triangle.\nimport math\r\ndef otherside_rightangle(w,h):\r\n", "canonical_solution": "  s=math.sqrt((w*w)+(h*h))\r\n  return s", "entry_point": "otherside_rightangle", "test": "def check(candidate):\n    assert otherside_rightangle(7,8)==10.63014581273465", "prompt_code": "import math\r\ndef otherside_rightangle(w,h):\r\n"}
{"task_id": 294, "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\r\n", "canonical_solution": "     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)", "entry_point": "max_val", "test": "def check(candidate):\n    assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "prompt_code": "def max_val(listval):\r\n"}
{"task_id": 295, "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\r\n", "canonical_solution": "    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)", "entry_point": "sum_div", "test": "def check(candidate):\n    assert sum_div(8)==7", "prompt_code": "def sum_div(number):\r\n"}
{"task_id": 296, "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \r\n", "canonical_solution": "    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ", "entry_point": "get_Inv_Count", "test": "def check(candidate):\n    assert get_Inv_Count([1,20,6,4,5],5) == 5", "prompt_code": "def get_Inv_Count(arr,n): \r\n"}
{"task_id": 297, "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\r\n", "canonical_solution": "    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ", "entry_point": "flatten_list", "test": "def check(candidate):\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "prompt_code": "def flatten_list(list1):\r\n"}
{"task_id": 298, "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\r\n", "canonical_solution": "    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result", "entry_point": "intersection_nested_lists", "test": "def check(candidate):\n    assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]", "prompt_code": "def intersection_nested_lists(l1, l2):\r\n"}
{"task_id": 299, "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\nfrom collections import defaultdict\r\ndef max_aggregate(stdata):\r\n", "canonical_solution": "    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])", "entry_point": "max_aggregate", "test": "def check(candidate):\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "prompt_code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n"}
{"task_id": 300, "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \r\n", "canonical_solution": "\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ", "entry_point": "count_binary_seq", "test": "def check(candidate):\n    assert count_binary_seq(1) == 2.0", "prompt_code": "def count_binary_seq(n): \r\n"}
{"task_id": 301, "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\r\n", "canonical_solution": "    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0", "entry_point": "dict_depth", "test": "def check(candidate):\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "prompt_code": "def dict_depth(d):\r\n"}
{"task_id": 302, "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \r\n", "canonical_solution": "    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)", "entry_point": "set_Bit_Number", "test": "def check(candidate):\n    assert set_Bit_Number(6) == 4", "prompt_code": "def set_Bit_Number(n): \r\n"}
{"task_id": 303, "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\nimport sys \r\ndef solve(a,n):   \r\n", "canonical_solution": "    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True", "entry_point": "solve", "test": "def check(candidate):\n    assert solve([1,0,2],3) == True", "prompt_code": "import sys \r\ndef solve(a,n):   \r\n"}
{"task_id": 304, "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \r\n", "canonical_solution": "    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ", "entry_point": "find_Element", "test": "def check(candidate):\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "prompt_code": "def find_Element(arr,ranges,rotations,index) :  \r\n"}
{"task_id": 305, "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\nimport re\r\ndef start_withp(words):\r\n", "canonical_solution": " for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()", "entry_point": "start_withp", "test": "def check(candidate):\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "prompt_code": "import re\r\ndef start_withp(words):\r\n"}
{"task_id": 306, "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\r\n", "canonical_solution": "\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]", "entry_point": "max_sum_increasing_subseq", "test": "def check(candidate):\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "prompt_code": "def max_sum_increasing_subseq(a, n, index, k):\r\n"}
{"task_id": 307, "prompt": "Write a function to get a colon of a tuple.\nfrom copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n", "canonical_solution": "  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon", "entry_point": "colon_tuplex", "test": "def check(candidate):\n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ", "prompt_code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n"}
{"task_id": 308, "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\r\n", "canonical_solution": "    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result", "entry_point": "large_product", "test": "def check(candidate):\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "prompt_code": "def large_product(nums1, nums2, N):\r\n"}
{"task_id": 309, "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \r\n", "canonical_solution": "    if a >= b: \r\n        return a \r\n    else: \r\n        return b ", "entry_point": "maximum", "test": "def check(candidate):\n    assert maximum(5,10) == 10", "prompt_code": "def maximum(a,b):   \r\n"}
{"task_id": 310, "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\r\n", "canonical_solution": "    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "entry_point": "string_to_tuple", "test": "def check(candidate):\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "prompt_code": "def string_to_tuple(str1):\r\n"}
{"task_id": 311, "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \r\n", "canonical_solution": "    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ", "entry_point": "set_left_most_unset_bit", "test": "def check(candidate):\n    assert set_left_most_unset_bit(10) == 14", "prompt_code": "def set_left_most_unset_bit(n): \r\n"}
{"task_id": 312, "prompt": "Write a function to find the volume of a cone.\nimport math\r\ndef volume_cone(r,h):\r\n", "canonical_solution": "  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume", "entry_point": "volume_cone", "test": "def check(candidate):\n    assert volume_cone(5,12)==314.15926535897927", "prompt_code": "import math\r\ndef volume_cone(r,h):\r\n"}
{"task_id": 313, "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\r\n", "canonical_solution": "  for num in list1: \r\n    if num >= 0: \r\n       return num ", "entry_point": "pos_nos", "test": "def check(candidate):\n    assert pos_nos([-1,-2,1,2]) == 1,2", "prompt_code": "def pos_nos(list1):\r\n"}
{"task_id": 314, "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \r\n", "canonical_solution": "\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)", "entry_point": "max_sum_rectangular_grid", "test": "def check(candidate):\n    assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7", "prompt_code": "def max_sum_rectangular_grid(grid, n) : \r\n"}
{"task_id": 315, "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \r\n", "canonical_solution": "    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ", "entry_point": "find_Max_Len_Even", "test": "def check(candidate):\n    assert find_Max_Len_Even(\"python language\") == \"language\"", "prompt_code": "def find_Max_Len_Even(str): \r\n"}
{"task_id": 316, "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\r\n", "canonical_solution": "    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ", "entry_point": "find_last_occurrence", "test": "def check(candidate):\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3", "prompt_code": "def find_last_occurrence(A, x):\r\n"}
{"task_id": 317, "prompt": "Write a function to reflect the modified run-length encoding from a list.\nfrom itertools import groupby\r\ndef modified_encode(alist):\r\n", "canonical_solution": "        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "entry_point": "modified_encode", "test": "def check(candidate):\n    assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]", "prompt_code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n"}
{"task_id": 318, "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \r\n", "canonical_solution": "    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ", "entry_point": "max_volume ", "test": "def check(candidate):\n    assert max_volume(8) == 18", "prompt_code": "def max_volume (s): \r\n"}
{"task_id": 319, "prompt": "Write a function to find all five characters long word in the given string by using regex.\nimport re\r\ndef find_long_word(text):\r\n", "canonical_solution": "  return (re.findall(r\"\\b\\w{5}\\b\", text))", "entry_point": "find_long_word", "test": "def check(candidate):\n    assert find_long_word('Please move back to strem') == ['strem']", "prompt_code": "import re\r\ndef find_long_word(text):\r\n"}
{"task_id": 320, "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\r\n", "canonical_solution": "    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares", "entry_point": "sum_difference", "test": "def check(candidate):\n    assert sum_difference(12)==5434", "prompt_code": "def sum_difference(n):\r\n"}
{"task_id": 321, "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \r\n", "canonical_solution": "\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t", "entry_point": "find_demlo", "test": "def check(candidate):\n    assert find_demlo(\"111111\") == '12345654321'", "prompt_code": "def find_demlo(s): \r\n"}
{"task_id": 322, "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\r\n", "canonical_solution": "    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result", "entry_point": "position_min", "test": "def check(candidate):\n    assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]", "prompt_code": "def position_min(list1):\r\n"}
{"task_id": 323, "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\r\n", "canonical_solution": "\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr", "entry_point": "right_rotate", "test": "def check(candidate):\n    assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]", "prompt_code": "def right_rotate(arr, n, out_of_place, cur):\r\n"}
{"task_id": 324, "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\r\n", "canonical_solution": "  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ", "entry_point": "sum_of_alternates", "test": "def check(candidate):\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)", "prompt_code": "def sum_of_alternates(test_tuple):\r\n"}
{"task_id": 325, "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\r\n", "canonical_solution": "    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;", "entry_point": "get_Min_Squares", "test": "def check(candidate):\n    assert get_Min_Squares(6) == 3", "prompt_code": "def get_Min_Squares(n):\r\n"}
{"task_id": 326, "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\nfrom collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n", "canonical_solution": "  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ", "entry_point": "most_occurrences", "test": "def check(candidate):\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'", "prompt_code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n"}
{"task_id": 327, "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\r\n", "canonical_solution": "  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False", "entry_point": "check_isosceles", "test": "def check(candidate):\n    assert check_isosceles(6,8,12)==False ", "prompt_code": "def check_isosceles(x,y,z):\r\n"}
{"task_id": 328, "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\r\n", "canonical_solution": "  result =  list1[m:]+list1[:n]\r\n  return result", "entry_point": "rotate_left", "test": "def check(candidate):\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]", "prompt_code": "def rotate_left(list1,m,n):\r\n"}
{"task_id": 329, "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\r\n", "canonical_solution": "  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ", "entry_point": "neg_count", "test": "def check(candidate):\n    assert neg_count([-1,-2,3,-4,-5]) == 4", "prompt_code": "def neg_count(list):\r\n"}
{"task_id": 330, "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\nimport re\r\ndef find_char(text):\r\n", "canonical_solution": "  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "entry_point": "find_char", "test": "def check(candidate):\n    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']", "prompt_code": "import re\r\ndef find_char(text):\r\n"}
{"task_id": 331, "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \r\n", "canonical_solution": "    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ", "entry_point": "count_unset_bits", "test": "def check(candidate):\n    assert count_unset_bits(2) == 1", "prompt_code": "def count_unset_bits(n): \r\n"}
{"task_id": 332, "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\r\n", "canonical_solution": "    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict", "entry_point": "char_frequency", "test": "def check(candidate):\n    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "prompt_code": "def char_frequency(str1):\r\n"}
{"task_id": 333, "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \r\n", "canonical_solution": "    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ", "entry_point": "Sort", "test": "def check(candidate):\n    assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]", "prompt_code": "def Sort(sub_li): \r\n"}
{"task_id": 334, "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \r\n", "canonical_solution": "    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ", "entry_point": "check_Validity", "test": "def check(candidate):\n    assert check_Validity(1,2,3) == False", "prompt_code": "def check_Validity(a,b,c):  \r\n"}
{"task_id": 335, "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\r\n", "canonical_solution": "  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total", "entry_point": "ap_sum", "test": "def check(candidate):\n    assert ap_sum(1,5,2)==25", "prompt_code": "def ap_sum(a,n,d):\r\n"}
{"task_id": 336, "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\r\n", "canonical_solution": "  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False", "entry_point": "check_monthnum", "test": "def check(candidate):\n    assert check_monthnum(\"February\")==True", "prompt_code": "def check_monthnum(monthname1):\r\n"}
{"task_id": 337, "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\nimport re\r\ndef text_match_word(text):\r\n", "canonical_solution": "        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "entry_point": "text_match_word", "test": "def check(candidate):\n    assert text_match_word(\"python.\")==('Found a match!')", "prompt_code": "import re\r\ndef text_match_word(text):\r\n"}
{"task_id": 338, "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \r\n", "canonical_solution": "    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "entry_point": "check_Equality", "test": "def check(candidate):\n    assert count_Substring_With_Equal_Ends('aba') == 4", "prompt_code": "def check_Equality(s): \r\n"}
{"task_id": 339, "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \r\n", "canonical_solution": "    if (x==y): \r\n        return y \r\n    return 2", "entry_point": "find_Divisor", "test": "def check(candidate):\n    assert find_Divisor(2,2) == 2", "prompt_code": "def find_Divisor(x,y):  \r\n"}
{"task_id": 340, "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\r\n", "canonical_solution": "\treturn sum(sorted([x for x in lst if x > 0])[:3])", "entry_point": "sum_three_smallest_nums", "test": "def check(candidate):\n    assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37", "prompt_code": "def sum_three_smallest_nums(lst):\r\n"}
{"task_id": 341, "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\r\n", "canonical_solution": "  t = tuple(sorted(s))\r\n  return (t)", "entry_point": "set_to_tuple", "test": "def check(candidate):\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)", "prompt_code": "def set_to_tuple(s):\r\n"}
{"task_id": 342, "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\nfrom heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n", "canonical_solution": "        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])", "entry_point": "__init__", "test": "def check(candidate):\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)", "prompt_code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n"}
{"task_id": 343, "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\r\n", "canonical_solution": " d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)", "entry_point": "dig_let", "test": "def check(candidate):\n    assert dig_let(\"python\")==(6,0)", "prompt_code": "def dig_let(s):\r\n"}
{"task_id": 344, "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \r\n", "canonical_solution": "    return int(m**0.5) - int((n-1)**0.5) ", "entry_point": "count_Odd_Squares", "test": "def check(candidate):\n    assert count_Odd_Squares(5,100) == 8", "prompt_code": "def count_Odd_Squares(n,m): \r\n"}
{"task_id": 345, "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\r\n", "canonical_solution": "    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "entry_point": "diff_consecutivenums", "test": "def check(candidate):\n    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]", "prompt_code": "def diff_consecutivenums(nums):\r\n"}
{"task_id": 346, "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \r\n", "canonical_solution": "\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "entry_point": "zigzag", "test": "def check(candidate):\n    assert zigzag(4, 3) == 5", "prompt_code": "def zigzag(n, k): \r\n"}
{"task_id": 347, "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \r\n", "canonical_solution": "    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6", "entry_point": "count_Squares", "test": "def check(candidate):\n    assert count_Squares(4,3) == 20", "prompt_code": "def count_Squares(m,n): \r\n"}
{"task_id": 348, "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \r\n", "canonical_solution": "\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ", "entry_point": "bin_coff", "test": "def check(candidate):\n    assert find_ways(4) == 2", "prompt_code": "def bin_coff(n, r): \r\n"}
{"task_id": 349, "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\r\n", "canonical_solution": "    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ", "entry_point": "check", "test": "def check(candidate):\n    assert check(\"01010101010\") == \"Yes\"", "prompt_code": "def check(string) :\r\n"}
{"task_id": 350, "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \r\n", "canonical_solution": "    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ", "entry_point": "minimum_Length", "test": "def check(candidate):\n    assert minimum_Length(\"mnm\") == 1", "prompt_code": "def minimum_Length(s) : \r\n"}
{"task_id": 351, "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \r\n", "canonical_solution": "    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1", "entry_point": "first_Element", "test": "def check(candidate):\n    assert first_Element([0,1,2,3,4,5],6,1) == 0", "prompt_code": "def first_Element(arr,n,k): \r\n"}
{"task_id": 352, "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\r\n", "canonical_solution": "    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;", "entry_point": "unique_Characters", "test": "def check(candidate):\n    assert unique_Characters('aba') == False", "prompt_code": "def unique_Characters(str):\r\n"}
{"task_id": 353, "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\r\n", "canonical_solution": "   for i in list1: \r\n    del i[n] \r\n   return list1", "entry_point": "remove_column", "test": "def check(candidate):\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]", "prompt_code": "def remove_column(list1, n):\r\n"}
{"task_id": 354, "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\r\n", "canonical_solution": "  tn = a + (n - 1) * d\r\n  return tn", "entry_point": "tn_ap", "test": "def check(candidate):\n    assert tn_ap(1,5,2)==9", "prompt_code": "def tn_ap(a,n,d):\r\n"}
{"task_id": 355, "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \r\n", "canonical_solution": "    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ", "entry_point": "count_Rectangles", "test": "def check(candidate):\n    assert count_Rectangles(2) == 8", "prompt_code": "def count_Rectangles(radius):  \r\n"}
{"task_id": 356, "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\r\n", "canonical_solution": " c = 180 - (a + b)\r\n return c\r\n", "entry_point": "find_angle", "test": "def check(candidate):\n    assert find_angle(47,89)==44", "prompt_code": "def find_angle(a,b):\r\n"}
{"task_id": 357, "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\r\n", "canonical_solution": "  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ", "entry_point": "find_max", "test": "def check(candidate):\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10", "prompt_code": "def find_max(test_list):\r\n"}
{"task_id": 358, "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\r\n", "canonical_solution": "  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)", "entry_point": "moddiv_list", "test": "def check(candidate):\n    assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]", "prompt_code": "def moddiv_list(nums1,nums2):\r\n"}
{"task_id": 359, "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \r\n", "canonical_solution": "    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "entry_point": "Check_Solution", "test": "def check(candidate):\n    assert Check_Solution(1,3,2) == \"Yes\"", "prompt_code": "def Check_Solution(a,b,c): \r\n"}
{"task_id": 360, "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \r\n", "canonical_solution": "\tresult = (2**n) - 1\r\n\treturn result * result - 2", "entry_point": "get_carol", "test": "def check(candidate):\n    assert get_carol(2) == 7", "prompt_code": "def get_carol(n): \r\n"}
{"task_id": 361, "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\r\n", "canonical_solution": "  remove_empty = [x for x in list1 if x]\r\n  return remove_empty", "entry_point": "remove_empty", "test": "def check(candidate):\n    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']", "prompt_code": "def remove_empty(list1):\r\n"}
{"task_id": 362, "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\r\n", "canonical_solution": "    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "entry_point": "max_occurrences", "test": "def check(candidate):\n    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2", "prompt_code": "def max_occurrences(nums):\r\n"}
{"task_id": 363, "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\r\n", "canonical_solution": "  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ", "entry_point": "add_K_element", "test": "def check(candidate):\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]", "prompt_code": "def add_K_element(test_list, K):\r\n"}
{"task_id": 364, "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \r\n", "canonical_solution": "\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "entry_point": "make_flip", "test": "def check(candidate):\n    assert min_flip_to_make_string_alternate(\"0001010111\") == 2", "prompt_code": "def make_flip(ch): \r\n"}
{"task_id": 365, "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\r\n", "canonical_solution": "    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count", "entry_point": "count_Digit", "test": "def check(candidate):\n    assert count_Digit(12345) == 5", "prompt_code": "def count_Digit(n):\r\n"}
{"task_id": 366, "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\r\n", "canonical_solution": "    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "entry_point": "adjacent_num_product", "test": "def check(candidate):\n    assert adjacent_num_product([1,2,3,4,5,6]) == 30", "prompt_code": "def adjacent_num_product(list_nums):\r\n"}
{"task_id": 367, "prompt": "Write a function to check if a binary tree is balanced or not.\nclass Node: \r\n\tdef __init__(self, data): \r\n", "canonical_solution": "\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False", "entry_point": "__init__", "test": "def check(candidate):\n    assert is_tree_balanced(root) == False", "prompt_code": "class Node: \r\n\tdef __init__(self, data): \r\n"}
{"task_id": 368, "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\r\n", "canonical_solution": "  res = ((test_tup, ) * N)\r\n  return (res) ", "entry_point": "repeat_tuples", "test": "def check(candidate):\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))", "prompt_code": "def repeat_tuples(test_tup, N):\r\n"}
{"task_id": 369, "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\r\n", "canonical_solution": "  LSA = 2*h*(l+w)\r\n  return LSA", "entry_point": "lateralsurface_cuboid", "test": "def check(candidate):\n    assert lateralsurface_cuboid(8,5,6)==156", "prompt_code": "def lateralsurface_cuboid(l,w,h):\r\n"}
{"task_id": 370, "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\r\n", "canonical_solution": "  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort", "entry_point": "float_sort", "test": "def check(candidate):\n    assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ", "prompt_code": "def float_sort(price):\r\n"}
{"task_id": 371, "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\r\n", "canonical_solution": "    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)", "entry_point": "smallest_missing", "test": "def check(candidate):\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7", "prompt_code": "def smallest_missing(A, left_element, right_element):\r\n"}
{"task_id": 372, "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\nimport heapq as hq\r\ndef heap_assending(nums):\r\n", "canonical_solution": "  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result", "entry_point": "heap_assending", "test": "def check(candidate):\n    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]", "prompt_code": "import heapq as hq\r\ndef heap_assending(nums):\r\n"}
{"task_id": 373, "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\r\n", "canonical_solution": "  volume=l*w*h\r\n  return volume", "entry_point": "volume_cuboid", "test": "def check(candidate):\n    assert volume_cuboid(1,2,3)==6", "prompt_code": "def volume_cuboid(l,w,h):\r\n"}
{"task_id": 374, "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\r\n", "canonical_solution": "    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list", "entry_point": "permute_string", "test": "def check(candidate):\n    assert permute_string('ab')==['ab', 'ba']", "prompt_code": "def permute_string(str):\r\n"}
{"task_id": 375, "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\r\n", "canonical_solution": "    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)", "entry_point": "round_num", "test": "def check(candidate):\n    assert round_num(4722,10)==4720", "prompt_code": "def round_num(n,m):\r\n"}
{"task_id": 376, "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\r\n", "canonical_solution": "  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)", "entry_point": "remove_replica", "test": "def check(candidate):\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')", "prompt_code": "def remove_replica(test_tup):\r\n"}
{"task_id": 377, "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \r\n", "canonical_solution": "    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ", "entry_point": "remove_Char", "test": "def check(candidate):\n    assert remove_Char(\"aba\",'a') == \"b\"", "prompt_code": "def remove_Char(s,c) :  \r\n"}
{"task_id": 378, "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\r\n", "canonical_solution": "  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list", "entry_point": "move_first", "test": "def check(candidate):\n    assert move_first([1,2,3,4]) == [4,1,2,3]", "prompt_code": "def move_first(test_list):\r\n"}
{"task_id": 379, "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\r\n", "canonical_solution": "  SA = 2*(l*w + l * h + w * h)\r\n  return SA", "entry_point": "surfacearea_cuboid", "test": "def check(candidate):\n    assert surfacearea_cuboid(1,2,3)==22", "prompt_code": "def surfacearea_cuboid(l,w,h):\r\n"}
{"task_id": 380, "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\r\n", "canonical_solution": "  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n", "entry_point": "multi_list", "test": "def check(candidate):\n    assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ", "prompt_code": "def multi_list(rownum,colnum):\r\n"}
{"task_id": 381, "prompt": "Write a function to sort a list of lists by a given index of the inner list.\nfrom operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n", "canonical_solution": "    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result", "entry_point": "index_on_inner_list", "test": "def check(candidate):\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]", "prompt_code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n"}
{"task_id": 382, "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\r\n", "canonical_solution": "    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1", "entry_point": "find_rotation_count", "test": "def check(candidate):\n    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3", "prompt_code": "def find_rotation_count(A):\r\n"}
{"task_id": 383, "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \r\n", "canonical_solution": "    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "entry_point": "even_bit_toggle_number", "test": "def check(candidate):\n    assert even_bit_toggle_number(10) == 15", "prompt_code": "def even_bit_toggle_number(n) : \r\n"}
{"task_id": 384, "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \r\n", "canonical_solution": "    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "entry_point": "frequency_Of_Smallest", "test": "def check(candidate):\n    assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1", "prompt_code": "def frequency_Of_Smallest(n,arr): \r\n"}
{"task_id": 385, "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\r\n", "canonical_solution": "  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)", "entry_point": "get_perrin", "test": "def check(candidate):\n    assert get_perrin(9) == 12", "prompt_code": "def get_perrin(n):\r\n"}
{"task_id": 386, "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\r\n", "canonical_solution": "\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap", "entry_point": "swap_count", "test": "def check(candidate):\n    assert swap_count(\"[]][][\") == 2", "prompt_code": "def swap_count(s):\r\n"}
{"task_id": 387, "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \r\n", "canonical_solution": "    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ", "entry_point": "even_or_odd", "test": "def check(candidate):\n    assert even_or_odd(\"AB3454D\") ==\"Odd\"", "prompt_code": "def even_or_odd(N): \r\n"}
{"task_id": 388, "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \r\n", "canonical_solution": "    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ", "entry_point": "highest_Power_of_2", "test": "def check(candidate):\n    assert highest_Power_of_2(10) == 8", "prompt_code": "def highest_Power_of_2(n): \r\n"}
{"task_id": 389, "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \r\n", "canonical_solution": "\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "entry_point": "find_lucas", "test": "def check(candidate):\n    assert find_lucas(9) == 76", "prompt_code": "def find_lucas(n): \r\n"}
{"task_id": 390, "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\r\n", "canonical_solution": " add_string=[string.format(i) for i in  list]\r\n return add_string", "entry_point": "add_string", "test": "def check(candidate):\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "prompt_code": "def add_string(list,string):\r\n"}
{"task_id": 391, "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\r\n", "canonical_solution": "     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result", "entry_point": "convert_list_dictionary", "test": "def check(candidate):\n    assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "prompt_code": "def convert_list_dictionary(l1, l2, l3):\r\n"}
{"task_id": 392, "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\r\n", "canonical_solution": "\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]", "entry_point": "get_max_sum ", "test": "def check(candidate):\n    assert get_max_sum(60) == 106", "prompt_code": "def get_max_sum (n):\r\n"}
{"task_id": 393, "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\r\n", "canonical_solution": "    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)", "entry_point": "max_length_list", "test": "def check(candidate):\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "prompt_code": "def max_length_list(input_list):\r\n"}
{"task_id": 394, "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\r\n", "canonical_solution": "  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ", "entry_point": "check_distinct", "test": "def check(candidate):\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "prompt_code": "def check_distinct(test_tup):\r\n"}
{"task_id": 395, "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\r\n", "canonical_solution": "  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None", "entry_point": "first_non_repeating_character", "test": "def check(candidate):\n    assert first_non_repeating_character(\"abcabc\") == None", "prompt_code": "def first_non_repeating_character(str1):\r\n"}
{"task_id": 396, "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\nimport re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n", "canonical_solution": "\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ", "entry_point": "check_char", "test": "def check(candidate):\n    assert check_char(\"abba\") == \"Valid\"", "prompt_code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n"}
{"task_id": 397, "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\r\n", "canonical_solution": " if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median", "entry_point": "median_numbers", "test": "def check(candidate):\n    assert median_numbers(25,55,65)==55.0", "prompt_code": "def median_numbers(a,b,c):\r\n"}
{"task_id": 398, "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\r\n", "canonical_solution": "    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "entry_point": "sum_of_digits", "test": "def check(candidate):\n    assert sum_of_digits([10,2,56])==14", "prompt_code": "def sum_of_digits(nums):\r\n"}
{"task_id": 399, "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "bitwise_xor", "test": "def check(candidate):\n    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "prompt_code": "def bitwise_xor(test_tup1, test_tup2):\r\n"}
{"task_id": 400, "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\r\n", "canonical_solution": "  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)", "entry_point": "extract_freq", "test": "def check(candidate):\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "prompt_code": "def extract_freq(test_list):\r\n"}
{"task_id": 401, "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "add_nested_tuples", "test": "def check(candidate):\n    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "prompt_code": "def add_nested_tuples(test_tup1, test_tup2):\r\n"}
{"task_id": 402, "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \r\n", "canonical_solution": "    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ", "entry_point": "ncr_modp", "test": "def check(candidate):\n    assert ncr_modp(10,2,13)==6", "prompt_code": "def ncr_modp(n, r, p): \r\n"}
{"task_id": 403, "prompt": "Write a function to check if a url is valid or not using regex.\nimport re\r\ndef is_valid_URL(str):\r\n", "canonical_solution": "\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False", "entry_point": "is_valid_URL", "test": "def check(candidate):\n    assert is_valid_URL(\"https://www.google.com\") == True", "prompt_code": "import re\r\ndef is_valid_URL(str):\r\n"}
{"task_id": 404, "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \r\n", "canonical_solution": "    if a <= b: \r\n        return a \r\n    else: \r\n        return b ", "entry_point": "minimum", "test": "def check(candidate):\n    assert minimum(1,2) == 1", "prompt_code": "def minimum(a,b):   \r\n"}
{"task_id": 405, "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \r\n", "canonical_solution": "  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False", "entry_point": "check_tuplex", "test": "def check(candidate):\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "prompt_code": "def check_tuplex(tuplex,tuple1): \r\n"}
{"task_id": 406, "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \r\n", "canonical_solution": "    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ", "entry_point": "find_Parity", "test": "def check(candidate):\n    assert find_Parity(12) == \"Even Parity\"", "prompt_code": "def find_Parity(x): \r\n"}
{"task_id": 407, "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\r\n", "canonical_solution": "    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False", "entry_point": "rearrange_bigger", "test": "def check(candidate):\n    assert rearrange_bigger(12)==21", "prompt_code": "def rearrange_bigger(n):\r\n"}
{"task_id": 408, "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nimport heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n", "canonical_solution": "   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs", "entry_point": "k_smallest_pairs", "test": "def check(candidate):\n    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "prompt_code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n"}
{"task_id": 409, "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\r\n", "canonical_solution": "    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min", "entry_point": "min_product_tuple", "test": "def check(candidate):\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "prompt_code": "def min_product_tuple(list1):\r\n"}
{"task_id": 410, "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\r\n", "canonical_solution": "     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val", "entry_point": "min_val", "test": "def check(candidate):\n    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "prompt_code": "def min_val(listval):\r\n"}
{"task_id": 411, "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\nimport re\r\ndef snake_to_camel(word):\r\n", "canonical_solution": "  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "entry_point": "snake_to_camel", "test": "def check(candidate):\n    assert snake_to_camel('android_tv') == 'AndroidTv'", "prompt_code": "import re\r\ndef snake_to_camel(word):\r\n"}
{"task_id": 412, "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\r\n", "canonical_solution": "    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l", "entry_point": "remove_odd", "test": "def check(candidate):\n    assert remove_odd([1,2,3]) == [2]", "prompt_code": "def remove_odd(l):\r\n"}
{"task_id": 413, "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\r\n", "canonical_solution": "    result = [x[n] for x in list1]\r\n    return result", "entry_point": "extract_nth_element", "test": "def check(candidate):\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "prompt_code": "def extract_nth_element(list1, n):\r\n"}
{"task_id": 414, "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \r\n", "canonical_solution": "    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0", "entry_point": "overlapping", "test": "def check(candidate):\n    assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "prompt_code": "def overlapping(list1,list2):  \r\n"}
{"task_id": 415, "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \r\n", "canonical_solution": "    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ", "entry_point": "max_Product", "test": "def check(candidate):\n    assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "prompt_code": "def max_Product(arr): \r\n"}
{"task_id": 416, "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nMAX = 1000000\r\ndef breakSum(n): \r\n", "canonical_solution": "\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]", "entry_point": "breakSum", "test": "def check(candidate):\n    assert breakSum(12) == 13", "prompt_code": "MAX = 1000000\r\ndef breakSum(n): \r\n"}
{"task_id": 417, "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \r\n", "canonical_solution": "\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ", "entry_point": "group_tuples", "test": "def check(candidate):\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "prompt_code": "def group_tuples(Input): \r\n"}
{"task_id": 418, "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \r\n", "canonical_solution": "    maxList = max((x) for x in lst) \r\n    return maxList", "entry_point": "Find_Max", "test": "def check(candidate):\n    assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "prompt_code": "def Find_Max(lst): \r\n"}
{"task_id": 419, "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\r\n", "canonical_solution": "  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum", "entry_point": "round_and_sum", "test": "def check(candidate):\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "prompt_code": "def round_and_sum(list1):\r\n"}
{"task_id": 420, "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \r\n", "canonical_solution": "    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum", "entry_point": "cube_Sum", "test": "def check(candidate):\n    assert cube_Sum(2) == 72", "prompt_code": "def cube_Sum(n): \r\n"}
{"task_id": 421, "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\r\n", "canonical_solution": "    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ", "entry_point": "concatenate_tuple", "test": "def check(candidate):\n    assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "prompt_code": "def concatenate_tuple(test_tup):\r\n"}
{"task_id": 422, "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \r\n", "canonical_solution": "    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ", "entry_point": "find_Average_Of_Cube", "test": "def check(candidate):\n    assert find_Average_Of_Cube(2) == 4.5", "prompt_code": "def find_Average_Of_Cube(n):  \r\n"}
{"task_id": 423, "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \r\n", "canonical_solution": "    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ", "entry_point": "get_maxgold", "test": "def check(candidate):\n    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16", "prompt_code": "def get_maxgold(gold, m, n): \r\n"}
{"task_id": 424, "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\r\n", "canonical_solution": "  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ", "entry_point": "extract_rear", "test": "def check(candidate):\n    assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "prompt_code": "def extract_rear(test_tuple):\r\n"}
{"task_id": 425, "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \r\n", "canonical_solution": "    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr", "entry_point": "count_element_in_list", "test": "def check(candidate):\n    assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "prompt_code": "def count_element_in_list(list1, x): \r\n"}
{"task_id": 426, "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\r\n", "canonical_solution": " odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums", "entry_point": "filter_oddnumbers", "test": "def check(candidate):\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "prompt_code": "def filter_oddnumbers(nums):\r\n"}
{"task_id": 427, "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nimport re\r\ndef change_date_format(dt):\r\n", "canonical_solution": "        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "entry_point": "change_date_format", "test": "def check(candidate):\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'", "prompt_code": "import re\r\ndef change_date_format(dt):\r\n"}
{"task_id": 428, "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\r\n", "canonical_solution": "    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list", "entry_point": "shell_sort", "test": "def check(candidate):\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "prompt_code": "def shell_sort(my_list):\r\n"}
{"task_id": 429, "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "and_tuples", "test": "def check(candidate):\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "prompt_code": "def and_tuples(test_tup1, test_tup2):\r\n"}
{"task_id": 430, "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \r\n", "canonical_solution": "  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix", "entry_point": "parabola_directrix", "test": "def check(candidate):\n    assert parabola_directrix(5,3,2)==-198", "prompt_code": "def parabola_directrix(a, b, c): \r\n"}
{"task_id": 431, "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\r\n", "canonical_solution": "     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result", "entry_point": "common_element", "test": "def check(candidate):\n    assert common_element([1,2,3,4,5], [5,6,7,8,9])==True", "prompt_code": "def common_element(list1, list2):\r\n"}
{"task_id": 432, "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\r\n", "canonical_solution": " median = 0.5 * (base1+ base2)\r\n return median", "entry_point": "median_trapezium", "test": "def check(candidate):\n    assert median_trapezium(15,25,35)==20", "prompt_code": "def median_trapezium(base1,base2,height):\r\n"}
{"task_id": 433, "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\r\n", "canonical_solution": "  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')", "entry_point": "check_greater", "test": "def check(candidate):\n    assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'", "prompt_code": "def check_greater(arr, number):\r\n"}
{"task_id": 434, "prompt": "Write a function that matches a string that has an a followed by one or more b's.\nimport re\r\ndef text_match_one(text):\r\n", "canonical_solution": "        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n", "entry_point": "text_match_one", "test": "def check(candidate):\n    assert text_match_one(\"ac\")==('Not matched!')", "prompt_code": "import re\r\ndef text_match_one(text):\r\n"}
{"task_id": 435, "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\r\n", "canonical_solution": "    return (n % 10) ", "entry_point": "last_Digit", "test": "def check(candidate):\n    assert last_Digit(123) == 3", "prompt_code": "def last_Digit(n) :\r\n"}
{"task_id": 436, "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\r\n", "canonical_solution": "  for num in list1: \r\n    if num < 0: \r\n       return num ", "entry_point": "neg_nos", "test": "def check(candidate):\n    assert neg_nos([-1,4,5,-6]) == -1,-6", "prompt_code": "def neg_nos(list1):\r\n"}
{"task_id": 437, "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\r\n", "canonical_solution": " str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "entry_point": "remove_odd", "test": "def check(candidate):\n    assert remove_odd(\"python\")==(\"yhn\")", "prompt_code": "def remove_odd(str1):\r\n"}
{"task_id": 438, "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\r\n", "canonical_solution": "  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ", "entry_point": "count_bidirectional", "test": "def check(candidate):\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'", "prompt_code": "def count_bidirectional(test_list):\r\n"}
{"task_id": 439, "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\r\n", "canonical_solution": "  x = int(\"\".join(map(str, L)))\r\n  return x", "entry_point": "multiple_to_single", "test": "def check(candidate):\n    assert multiple_to_single([11, 33, 50])==113350", "prompt_code": "def multiple_to_single(L):\r\n"}
{"task_id": 440, "prompt": "Write a function to find all adverbs and their positions in a given sentence.\nimport re\r\ndef find_adverb_position(text):\r\n", "canonical_solution": " for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))", "entry_point": "find_adverb_position", "test": "def check(candidate):\n    assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "prompt_code": "import re\r\ndef find_adverb_position(text):\r\n"}
{"task_id": 441, "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\r\n", "canonical_solution": "  surfacearea= 6*l*l\r\n  return surfacearea", "entry_point": "surfacearea_cube", "test": "def check(candidate):\n    assert surfacearea_cube(5)==150", "prompt_code": "def surfacearea_cube(l):\r\n"}
{"task_id": 442, "prompt": "Write a function to find the ration of positive numbers in an array of integers.\nfrom array import array\r\ndef positive_count(nums):\r\n", "canonical_solution": "    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "entry_point": "positive_count", "test": "def check(candidate):\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "prompt_code": "from array import array\r\ndef positive_count(nums):\r\n"}
{"task_id": 443, "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \r\n", "canonical_solution": "    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max", "entry_point": "largest_neg", "test": "def check(candidate):\n    assert largest_neg([1,2,3,-4,-6]) == -6", "prompt_code": "def largest_neg(list1): \r\n"}
{"task_id": 444, "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\r\n", "canonical_solution": "  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ", "entry_point": "trim_tuple", "test": "def check(candidate):\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "prompt_code": "def trim_tuple(test_list, K):\r\n"}
{"task_id": 445, "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "index_multiplication", "test": "def check(candidate):\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "prompt_code": "def index_multiplication(test_tup1, test_tup2):\r\n"}
{"task_id": 446, "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n", "canonical_solution": "    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ", "entry_point": "count_Occurrence", "test": "def check(candidate):\n    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "prompt_code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n"}
{"task_id": 447, "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\r\n", "canonical_solution": " cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums", "entry_point": "cube_nums", "test": "def check(candidate):\n    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "prompt_code": "def cube_nums(nums):\r\n"}
{"task_id": 448, "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \r\n", "canonical_solution": "\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum", "entry_point": "cal_sum", "test": "def check(candidate):\n    assert cal_sum(9) == 49", "prompt_code": "def cal_sum(n): \r\n"}
{"task_id": 449, "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \r\n", "canonical_solution": "    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ", "entry_point": "check_Triangle", "test": "def check(candidate):\n    assert check_Triangle(1,5,2,5,4,6) == 'Yes'", "prompt_code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n"}
{"task_id": 450, "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\r\n", "canonical_solution": "    result = [e for e in str if len(e) == l] \r\n    return result", "entry_point": "extract_string", "test": "def check(candidate):\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "prompt_code": "def extract_string(str, l):\r\n"}
{"task_id": 451, "prompt": "Write a function to remove all whitespaces from the given string using regex.\nimport re\r\ndef remove_whitespaces(text1):\r\n", "canonical_solution": "  return (re.sub(r'\\s+', '',text1))", "entry_point": "remove_whitespaces", "test": "def check(candidate):\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "prompt_code": "import re\r\ndef remove_whitespaces(text1):\r\n"}
{"task_id": 452, "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \r\n", "canonical_solution": "  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None", "entry_point": "loss_amount", "test": "def check(candidate):\n    assert loss_amount(1500,1200)==None", "prompt_code": "def loss_amount(actual_cost,sale_amount): \r\n"}
{"task_id": 453, "prompt": "Write a python function to find the sum of even factors of a number.\nimport math \r\ndef sumofFactors(n) : \r\n", "canonical_solution": "    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ", "entry_point": "sumofFactors", "test": "def check(candidate):\n    assert sumofFactors(18) == 26", "prompt_code": "import math \r\ndef sumofFactors(n) : \r\n"}
{"task_id": 454, "prompt": "Write a function that matches a word containing 'z'.\nimport re\r\ndef text_match_wordz(text):\r\n", "canonical_solution": "        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "entry_point": "text_match_wordz", "test": "def check(candidate):\n    assert text_match_wordz(\"pythonz.\")==('Found a match!')", "prompt_code": "import re\r\ndef text_match_wordz(text):\r\n"}
{"task_id": 455, "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\r\n", "canonical_solution": "  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False", "entry_point": "check_monthnumb_number", "test": "def check(candidate):\n    assert check_monthnumb_number(5)==True", "prompt_code": "def check_monthnumb_number(monthnum2):\r\n"}
{"task_id": 456, "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\r\n", "canonical_solution": "    result = [x[::-1] for x in stringlist]\r\n    return result", "entry_point": "reverse_string_list", "test": "def check(candidate):\n    assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "prompt_code": "def reverse_string_list(stringlist):\r\n"}
{"task_id": 457, "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \r\n", "canonical_solution": "    minList = min((x) for x in lst) \r\n    return minList", "entry_point": "Find_Min", "test": "def check(candidate):\n    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "prompt_code": "def Find_Min(lst): \r\n"}
{"task_id": 458, "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\r\n", "canonical_solution": "  area=l*b\r\n  return area", "entry_point": "rectangle_area", "test": "def check(candidate):\n    assert rectangle_area(10,20)==200", "prompt_code": "def rectangle_area(l,b):\r\n"}
{"task_id": 459, "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\nimport re\r\ndef remove_uppercase(str1):\r\n", "canonical_solution": "  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)", "entry_point": "remove_uppercase", "test": "def check(candidate):\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "prompt_code": "import re\r\ndef remove_uppercase(str1):\r\n"}
{"task_id": 460, "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \r\n", "canonical_solution": "    return [item[0] for item in lst] ", "entry_point": "Extract", "test": "def check(candidate):\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "prompt_code": "def Extract(lst): \r\n"}
{"task_id": 461, "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\r\n", "canonical_solution": "    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr", "entry_point": "upper_ctr", "test": "def check(candidate):\n    assert upper_ctr('PYthon') == 1", "prompt_code": "def upper_ctr(str):\r\n"}
{"task_id": 462, "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\r\n", "canonical_solution": "    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result", "entry_point": "combinations_list", "test": "def check(candidate):\n    assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "prompt_code": "def combinations_list(list1):\r\n"}
{"task_id": 463, "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\r\n", "canonical_solution": "\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far", "entry_point": "max_subarray_product", "test": "def check(candidate):\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "prompt_code": "def max_subarray_product(arr):\r\n"}
{"task_id": 464, "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\r\n", "canonical_solution": "    result = all(x == n for x in dict.values()) \r\n    return result", "entry_point": "check_value", "test": "def check(candidate):\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "prompt_code": "def check_value(dict, n):\r\n"}
{"task_id": 465, "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\r\n", "canonical_solution": "  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1", "entry_point": "drop_empty", "test": "def check(candidate):\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "prompt_code": "def drop_empty(dict1):\r\n"}
{"task_id": 466, "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \r\n", "canonical_solution": "\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ", "entry_point": "find_peak_util", "test": "def check(candidate):\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2", "prompt_code": "def find_peak_util(arr, low, high, n): \r\n"}
{"task_id": 467, "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\r\n", "canonical_solution": "    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)", "entry_point": "decimal_to_Octal", "test": "def check(candidate):\n    assert decimal_to_Octal(10) == 12", "prompt_code": "def decimal_to_Octal(deciNum):\r\n"}
{"task_id": 468, "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \r\n", "canonical_solution": "\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)", "entry_point": "max_product", "test": "def check(candidate):\n    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ", "prompt_code": "def max_product(arr, n ): \r\n"}
{"task_id": 469, "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\r\n", "canonical_solution": "    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]", "entry_point": "max_profit", "test": "def check(candidate):\n    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10", "prompt_code": "def max_profit(price, k):\r\n"}
{"task_id": 470, "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\r\n", "canonical_solution": "  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "entry_point": "add_pairwise", "test": "def check(candidate):\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "prompt_code": "def add_pairwise(test_tup):\r\n"}
{"task_id": 471, "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \r\n", "canonical_solution": "    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ", "entry_point": "find_remainder", "test": "def check(candidate):\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9", "prompt_code": "def find_remainder(arr, lens, n): \r\n"}
{"task_id": 472, "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \r\n", "canonical_solution": "    return sorted(l) == list(range(min(l),max(l)+1)) ", "entry_point": "check_Consecutive", "test": "def check(candidate):\n    assert check_Consecutive([1,2,3,4,5]) == True", "prompt_code": "def check_Consecutive(l): \r\n"}
{"task_id": 473, "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\r\n", "canonical_solution": "  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)", "entry_point": "tuple_intersection", "test": "def check(candidate):\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "prompt_code": "def tuple_intersection(test_list1, test_list2):\r\n"}
{"task_id": 474, "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\r\n", "canonical_solution": " str2 = str1.replace(ch, newch)\r\n return str2", "entry_point": "replace_char", "test": "def check(candidate):\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "prompt_code": "def replace_char(str1,ch,newch):\r\n"}
{"task_id": 475, "prompt": "Write a function to sort counter by value.\nfrom collections import Counter\r\ndef sort_counter(dict1):\r\n", "canonical_solution": " x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter", "entry_point": "sort_counter", "test": "def check(candidate):\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "prompt_code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n"}
{"task_id": 476, "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\r\n", "canonical_solution": "      sum= max(nums)+min(nums)\r\n      return sum", "entry_point": "big_sum", "test": "def check(candidate):\n    assert big_sum([1,2,3]) == 4", "prompt_code": "def big_sum(nums):\r\n"}
{"task_id": 477, "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\r\n", "canonical_solution": "  return (string.lower())", "entry_point": "is_lower", "test": "def check(candidate):\n    assert is_lower(\"InValid\") == \"invalid\"", "prompt_code": "def is_lower(string):\r\n"}
{"task_id": 478, "prompt": "Write a function to remove lowercase substrings from a given string.\nimport re\r\ndef remove_lowercase(str1):\r\n", "canonical_solution": " remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result", "entry_point": "remove_lowercase", "test": "def check(candidate):\n    assert remove_lowercase(\"PYTHon\")==('PYTH')", "prompt_code": "import re\r\ndef remove_lowercase(str1):\r\n"}
{"task_id": 479, "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \r\n", "canonical_solution": "    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ", "entry_point": "first_Digit", "test": "def check(candidate):\n    assert first_Digit(123) == 1", "prompt_code": "def first_Digit(n) :  \r\n"}
{"task_id": 480, "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\r\n", "canonical_solution": "  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch", "entry_point": "get_max_occuring_char", "test": "def check(candidate):\n    assert get_max_occuring_char(\"data\") == \"a\"", "prompt_code": "def get_max_occuring_char(str1):\r\n"}
{"task_id": 481, "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\r\n", "canonical_solution": "\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "entry_point": "is_subset_sum", "test": "def check(candidate):\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True", "prompt_code": "def is_subset_sum(set, n, sum):\r\n"}
{"task_id": 482, "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nimport re \r\ndef match(text): \r\n", "canonical_solution": "\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ", "entry_point": "match", "test": "def check(candidate):\n    assert match(\"Geeks\") == 'Yes'", "prompt_code": "import re \r\ndef match(text): \r\n"}
{"task_id": 483, "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \r\n", "canonical_solution": "    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ", "entry_point": "first_Factorial_Divisible_Number", "test": "def check(candidate):\n    assert first_Factorial_Divisible_Number(10) == 5", "prompt_code": "def first_Factorial_Divisible_Number(x): \r\n"}
{"task_id": 484, "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\r\n", "canonical_solution": "  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ", "entry_point": "remove_matching_tuple", "test": "def check(candidate):\n    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]", "prompt_code": "def remove_matching_tuple(test_list1, test_list2):\r\n"}
{"task_id": 485, "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \r\n", "canonical_solution": "\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1", "entry_point": "is_palindrome", "test": "def check(candidate):\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545", "prompt_code": "def is_palindrome(n) : \r\n"}
{"task_id": 486, "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \r\n", "canonical_solution": "\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "entry_point": "nCr", "test": "def check(candidate):\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185", "prompt_code": "def nCr(n, r): \r\n"}
{"task_id": 487, "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \r\n", "canonical_solution": "\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup", "entry_point": "sort_tuple", "test": "def check(candidate):\n    assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]", "prompt_code": "def sort_tuple(tup): \r\n"}
{"task_id": 488, "prompt": "Write a function to find the area of a pentagon.\nimport math\r\ndef area_pentagon(a):\r\n", "canonical_solution": "  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area", "entry_point": "area_pentagon", "test": "def check(candidate):\n    assert area_pentagon(5)==43.01193501472417", "prompt_code": "import math\r\ndef area_pentagon(a):\r\n"}
{"task_id": 489, "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \r\n", "canonical_solution": "    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "entry_point": "frequency_Of_Largest", "test": "def check(candidate):\n    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2", "prompt_code": "def frequency_Of_Largest(n,arr): \r\n"}
{"task_id": 490, "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\r\n", "canonical_solution": "  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ", "entry_point": "extract_symmetric", "test": "def check(candidate):\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}", "prompt_code": "def extract_symmetric(test_list):\r\n"}
{"task_id": 491, "prompt": "Write a function to find the sum of geometric progression series.\nimport math\r\ndef sum_gp(a,n,r):\r\n", "canonical_solution": " total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total", "entry_point": "sum_gp", "test": "def check(candidate):\n    assert sum_gp(1,5,2)==31", "prompt_code": "import math\r\ndef sum_gp(a,n,r):\r\n"}
{"task_id": 492, "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\r\n", "canonical_solution": "\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found", "entry_point": "binary_search", "test": "def check(candidate):\n    assert binary_search([1,2,3,5,8], 6) == False", "prompt_code": "def binary_search(item_list,item):\r\n"}
{"task_id": 493, "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nimport math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n", "canonical_solution": "    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons", "entry_point": "calculate_polygons", "test": "def check(candidate):\n    assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]", "prompt_code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n"}
{"task_id": 494, "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\r\n", "canonical_solution": "  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ", "entry_point": "binary_to_integer", "test": "def check(candidate):\n    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'", "prompt_code": "def binary_to_integer(test_tup):\r\n"}
{"task_id": 495, "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\nimport re\r\ndef remove_lowercase(str1):\r\n", "canonical_solution": "  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)", "entry_point": "remove_lowercase", "test": "def check(candidate):\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'", "prompt_code": "import re\r\ndef remove_lowercase(str1):\r\n"}
{"task_id": 496, "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nimport heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n", "canonical_solution": "  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums", "entry_point": "heap_queue_smallest", "test": "def check(candidate):\n    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ", "prompt_code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n"}
{"task_id": 497, "prompt": "Write a function to find the surface area of a cone.\nimport math\r\ndef surfacearea_cone(r,h):\r\n", "canonical_solution": "  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA", "entry_point": "surfacearea_cone", "test": "def check(candidate):\n    assert surfacearea_cone(5,12)==282.7433388230814", "prompt_code": "import math\r\ndef surfacearea_cone(r,h):\r\n"}
{"task_id": 498, "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\r\n", "canonical_solution": "    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd", "entry_point": "gcd", "test": "def check(candidate):\n    assert gcd(12, 17) == 1", "prompt_code": "def gcd(x, y):\r\n"}
{"task_id": 499, "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\r\n", "canonical_solution": "  diameter=2*r\r\n  return diameter", "entry_point": "diameter_circle", "test": "def check(candidate):\n    assert diameter_circle(10)==20", "prompt_code": "def diameter_circle(r):\r\n"}
{"task_id": 500, "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\r\n", "canonical_solution": "  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ", "entry_point": "concatenate_elements", "test": "def check(candidate):\n    assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'", "prompt_code": "def concatenate_elements(list):\r\n"}
{"task_id": 501, "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\r\n", "canonical_solution": "    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result", "entry_point": "ngcd", "test": "def check(candidate):\n    assert num_comm_div(2,4) == 2", "prompt_code": "def ngcd(x,y):\r\n"}
{"task_id": 502, "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\r\n", "canonical_solution": "  r = n%m\r\n  return (r)", "entry_point": "find", "test": "def check(candidate):\n    assert find(3,3) == 0", "prompt_code": "def find(n,m):\r\n"}
{"task_id": 503, "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\r\n", "canonical_solution": "    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "entry_point": "add_consecutive_nums", "test": "def check(candidate):\n    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]", "prompt_code": "def add_consecutive_nums(nums):\r\n"}
{"task_id": 504, "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \r\n", "canonical_solution": "    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum", "entry_point": "sum_Of_Series", "test": "def check(candidate):\n    assert sum_Of_Series(5) == 225", "prompt_code": "def sum_Of_Series(n): \r\n"}
{"task_id": 505, "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\r\n", "canonical_solution": "    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A", "entry_point": "re_order", "test": "def check(candidate):\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]", "prompt_code": "def re_order(A):\r\n"}
{"task_id": 506, "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \r\n", "canonical_solution": "\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ", "entry_point": "permutation_coefficient", "test": "def check(candidate):\n    assert permutation_coefficient(10, 2) == 90", "prompt_code": "def permutation_coefficient(n, k): \r\n"}
{"task_id": 507, "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\r\n", "canonical_solution": "    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ", "entry_point": "remove_words", "test": "def check(candidate):\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']", "prompt_code": "def remove_words(list1, removewords):\r\n"}
{"task_id": 508, "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\r\n", "canonical_solution": "    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2", "entry_point": "same_order", "test": "def check(candidate):\n    assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True", "prompt_code": "def same_order(l1, l2):\r\n"}
{"task_id": 509, "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \r\n", "canonical_solution": "    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ", "entry_point": "average_Odd", "test": "def check(candidate):\n    assert average_Odd(9) == 5", "prompt_code": "def average_Odd(n) : \r\n"}
{"task_id": 510, "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \r\n", "canonical_solution": "\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]", "entry_point": "no_of_subsequences", "test": "def check(candidate):\n    assert no_of_subsequences([1,2,3,4], 10) == 11", "prompt_code": "def no_of_subsequences(arr, k): \r\n"}
{"task_id": 511, "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \r\n", "canonical_solution": "    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum", "entry_point": "find_Min_Sum", "test": "def check(candidate):\n    assert find_Min_Sum(12) == 7", "prompt_code": "def find_Min_Sum(num): \r\n"}
{"task_id": 512, "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \r\n", "canonical_solution": "\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) ", "entry_point": "flatten", "test": "def check(candidate):\n    assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}", "prompt_code": "def flatten(test_tuple): \r\n"}
{"task_id": 513, "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\r\n", "canonical_solution": "  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) ", "entry_point": "add_str", "test": "def check(candidate):\n    assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']", "prompt_code": "def add_str(test_tup, K):\r\n"}
{"task_id": 514, "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\r\n", "canonical_solution": "  res = sum(list(test_tup))\r\n  return (res) ", "entry_point": "sum_elements", "test": "def check(candidate):\n    assert sum_elements((7, 8, 9, 1, 10, 7)) == 42", "prompt_code": "def sum_elements(test_tup):\r\n"}
{"task_id": 515, "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \r\n", "canonical_solution": "\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]", "entry_point": "modular_sum", "test": "def check(candidate):\n    assert modular_sum([3, 1, 7, 5], 4, 6) == True", "prompt_code": "def modular_sum(arr, n, m): \r\n"}
{"task_id": 516, "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\r\n", "canonical_solution": "    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums", "entry_point": "radix_sort", "test": "def check(candidate):\n    assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]", "prompt_code": "def radix_sort(nums):\r\n"}
{"task_id": 517, "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \r\n", "canonical_solution": "    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max", "entry_point": "largest_pos", "test": "def check(candidate):\n    assert largest_pos([1,2,3,4,-1]) == 4", "prompt_code": "def largest_pos(list1): \r\n"}
{"task_id": 518, "prompt": "Write a function to find the square root of a perfect number.\nimport math\r\ndef sqrt_root(num):\r\n", "canonical_solution": " sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root ", "entry_point": "sqrt_root", "test": "def check(candidate):\n    assert sqrt_root(4)==2", "prompt_code": "import math\r\ndef sqrt_root(num):\r\n"}
{"task_id": 519, "prompt": "Write a function to calculate volume of a tetrahedron.\nimport math\r\ndef volume_tetrahedron(num):\r\n", "canonical_solution": "\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)", "entry_point": "volume_tetrahedron", "test": "def check(candidate):\n    assert volume_tetrahedron(10)==117.85", "prompt_code": "import math\r\ndef volume_tetrahedron(num):\r\n"}
{"task_id": 520, "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \r\n", "canonical_solution": "\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm ", "entry_point": "find_lcm", "test": "def check(candidate):\n    assert get_lcm([2, 7, 3, 9, 4]) == 252", "prompt_code": "def find_lcm(num1, num2): \r\n"}
{"task_id": 521, "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\r\n", "canonical_solution": "  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False", "entry_point": "check_isosceles", "test": "def check(candidate):\n    assert check_isosceles(6,8,12)==True", "prompt_code": "def check_isosceles(x,y,z):\r\n"}
{"task_id": 522, "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \r\n", "canonical_solution": "\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum", "entry_point": "lbs", "test": "def check(candidate):\n    assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7", "prompt_code": "def lbs(arr): \r\n"}
{"task_id": 523, "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\r\n", "canonical_solution": "    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  ", "entry_point": "check_string", "test": "def check(candidate):\n    assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']", "prompt_code": "def check_string(str1):\r\n"}
{"task_id": 524, "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \r\n", "canonical_solution": "\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max", "entry_point": "max_sum_increasing_subsequence", "test": "def check(candidate):\n    assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106", "prompt_code": "def max_sum_increasing_subsequence(arr, n): \r\n"}
{"task_id": 525, "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\r\n", "canonical_solution": "  return line1[0]/line1[1] == line2[0]/line2[1]", "entry_point": "parallel_lines", "test": "def check(candidate):\n    assert parallel_lines([2,3,4], [2,3,8]) == True", "prompt_code": "def parallel_lines(line1, line2):\r\n"}
{"task_id": 526, "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\r\n", "canonical_solution": "     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  ", "entry_point": "capitalize_first_last_letters", "test": "def check(candidate):\n    assert capitalize_first_last_letters(\"python\") == \"PythoN\"", "prompt_code": "def capitalize_first_last_letters(str1):\r\n"}
{"task_id": 527, "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\r\n", "canonical_solution": "    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "entry_point": "get_pairs_count", "test": "def check(candidate):\n    assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3", "prompt_code": "def get_pairs_count(arr, n, sum):\r\n"}
{"task_id": 528, "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\r\n", "canonical_solution": "   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     ", "entry_point": "min_length", "test": "def check(candidate):\n    assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])", "prompt_code": "def min_length(list1):\r\n"}
{"task_id": 529, "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \r\n", "canonical_solution": "\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]", "entry_point": "jacobsthal_lucas", "test": "def check(candidate):\n    assert jacobsthal_lucas(5) == 31", "prompt_code": "def jacobsthal_lucas(n): \r\n"}
{"task_id": 530, "prompt": "Write a function to find the ration of negative numbers in an array of integers.\nfrom array import array\r\ndef negative_count(nums):\r\n", "canonical_solution": "    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "entry_point": "negative_count", "test": "def check(candidate):\n    assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31", "prompt_code": "from array import array\r\ndef negative_count(nums):\r\n"}
{"task_id": 531, "prompt": "Write a function to find minimum number of coins that make a given value.\nimport sys \r\ndef min_coins(coins, m, V): \r\n", "canonical_solution": "    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res ", "entry_point": "min_coins", "test": "def check(candidate):\n    assert min_coins([9, 6, 5, 1] ,4,11)==2", "prompt_code": "import sys \r\ndef min_coins(coins, m, V): \r\n"}
{"task_id": 532, "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\r\n", "canonical_solution": "  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True", "entry_point": "check_permutation", "test": "def check(candidate):\n    assert check_permutation(\"abc\", \"cba\") == True", "prompt_code": "def check_permutation(str1, str2):\r\n"}
{"task_id": 533, "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\r\n", "canonical_solution": "  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ", "entry_point": "remove_datatype", "test": "def check(candidate):\n    assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]", "prompt_code": "def remove_datatype(test_tuple, data_type):\r\n"}
{"task_id": 534, "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\nimport re\r\ndef search_literal(pattern,text):\r\n", "canonical_solution": " match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)", "entry_point": "search_literal", "test": "def check(candidate):\n    assert search_literal('python','python programming language')==(0,6)", "prompt_code": "import re\r\ndef search_literal(pattern,text):\r\n"}
{"task_id": 535, "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\r\n", "canonical_solution": "  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea", "entry_point": "topbottom_surfacearea", "test": "def check(candidate):\n    assert topbottom_surfacearea(10)==314.15000000000003", "prompt_code": "def topbottom_surfacearea(r):\r\n"}
{"task_id": 536, "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\r\n", "canonical_solution": " return list[::n]", "entry_point": "nth_items", "test": "def check(candidate):\n    assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ", "prompt_code": "def nth_items(list,n):\r\n"}
{"task_id": 537, "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\r\n", "canonical_solution": "  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'", "entry_point": "first_repeated_word", "test": "def check(candidate):\n    assert first_repeated_word(\"ab ca bc ab\") == \"ab\"", "prompt_code": "def first_repeated_word(str1):\r\n"}
{"task_id": 538, "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\r\n", "canonical_solution": "    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "entry_point": "string_list_to_tuple", "test": "def check(candidate):\n    assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "prompt_code": "def string_list_to_tuple(str1):\r\n"}
{"task_id": 539, "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\r\n", "canonical_solution": "  result = list(map(pow, bases_num, index))\r\n  return result", "entry_point": "basesnum_coresspondingnum", "test": "def check(candidate):\n    assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]", "prompt_code": "def basesnum_coresspondingnum(bases_num,index):\r\n"}
{"task_id": 540, "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \r\n", "canonical_solution": "    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count ", "entry_point": "find_Diff", "test": "def check(candidate):\n    assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2", "prompt_code": "def find_Diff(arr,n): \r\n"}
{"task_id": 541, "prompt": "Write a function to find if the given number is abundant or not.\nimport math \r\ndef get_sum(n): \r\n", "canonical_solution": "\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False", "entry_point": "get_sum", "test": "def check(candidate):\n    assert check_abundant(12) == True", "prompt_code": "import math \r\ndef get_sum(n): \r\n"}
{"task_id": 542, "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\nimport re\r\ndef fill_spaces(text):\r\n", "canonical_solution": "  return (re.sub(\"[ ,.]\", \":\", text))", "entry_point": "fill_spaces", "test": "def check(candidate):\n    assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'", "prompt_code": "import re\r\ndef fill_spaces(text):\r\n"}
{"task_id": 543, "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\r\n", "canonical_solution": "    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count", "entry_point": "count_digits", "test": "def check(candidate):\n    assert count_digits(9875,10)==(4)", "prompt_code": "def count_digits(num1,num2):\r\n"}
{"task_id": 544, "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\r\n", "canonical_solution": "  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) ", "entry_point": "flatten_tuple", "test": "def check(candidate):\n    assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'", "prompt_code": "def flatten_tuple(test_list):\r\n"}
{"task_id": 545, "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \r\n", "canonical_solution": "    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) ", "entry_point": "take_L_and_F_set_bits", "test": "def check(candidate):\n    assert toggle_F_and_L_bits(10) == 3", "prompt_code": "def take_L_and_F_set_bits(n) : \r\n"}
{"task_id": 546, "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\r\n", "canonical_solution": " flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1", "entry_point": "last_occurence_char", "test": "def check(candidate):\n    assert last_occurence_char(\"hello world\",'l')==10", "prompt_code": "def last_occurence_char(string,char):\r\n"}
{"task_id": 547, "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \r\n", "canonical_solution": "    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum", "entry_point": "Total_Hamming_Distance", "test": "def check(candidate):\n    assert Total_Hamming_Distance(4) == 7", "prompt_code": "def Total_Hamming_Distance(n):   \r\n"}
{"task_id": 548, "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \r\n", "canonical_solution": "\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum", "entry_point": "longest_increasing_subsequence", "test": "def check(candidate):\n    assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5", "prompt_code": "def longest_increasing_subsequence(arr): \r\n"}
{"task_id": 549, "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \r\n", "canonical_solution": "    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm ", "entry_point": "odd_Num_Sum", "test": "def check(candidate):\n    assert odd_Num_Sum(1) == 1", "prompt_code": "def odd_Num_Sum(n) : \r\n"}
{"task_id": 550, "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \r\n", "canonical_solution": "    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) ", "entry_point": "find_Max", "test": "def check(candidate):\n    assert find_Max([2,3,5,6,9],0,4) == 9", "prompt_code": "def find_Max(arr,low,high): \r\n"}
{"task_id": 551, "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\r\n", "canonical_solution": "   result = [i.pop(n) for i in list1]\r\n   return result ", "entry_point": "extract_column", "test": "def check(candidate):\n    assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]", "prompt_code": "def extract_column(list1, n):\r\n"}
{"task_id": 552, "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\r\n", "canonical_solution": "  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\"", "entry_point": "Seq_Linear", "test": "def check(candidate):\n    assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"", "prompt_code": "def Seq_Linear(seq_nums):\r\n"}
{"task_id": 553, "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\r\n", "canonical_solution": "  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) ", "entry_point": "tuple_to_float", "test": "def check(candidate):\n    assert tuple_to_float((4, 56)) == 4.56", "prompt_code": "def tuple_to_float(test_tup):\r\n"}
{"task_id": 554, "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \r\n", "canonical_solution": "    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li", "entry_point": "Split", "test": "def check(candidate):\n    assert Split([1,2,3,4,5,6]) == [1,3,5]", "prompt_code": "def Split(list): \r\n"}
{"task_id": 555, "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \r\n", "canonical_solution": "    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ", "entry_point": "difference", "test": "def check(candidate):\n    assert difference(3) == 30", "prompt_code": "def difference(n) :  \r\n"}
{"task_id": 556, "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \r\n", "canonical_solution": "    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  ", "entry_point": "find_Odd_Pair", "test": "def check(candidate):\n    assert find_Odd_Pair([5,4,7,2,1],5) == 6", "prompt_code": "def find_Odd_Pair(A,N) : \r\n"}
{"task_id": 557, "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\r\n", "canonical_solution": " string1 = string.swapcase()\r\n return string1", "entry_point": "toggle_string", "test": "def check(candidate):\n    assert toggle_string(\"Python\")==(\"pYTHON\")", "prompt_code": "def toggle_string(string):\r\n"}
{"task_id": 558, "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\r\n", "canonical_solution": "         return sum(map(int,str(abs(n1-n2))))", "entry_point": "digit_distance_nums", "test": "def check(candidate):\n    assert digit_distance_nums(1,2) == 1", "prompt_code": "def digit_distance_nums(n1, n2):\r\n"}
{"task_id": 559, "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\r\n", "canonical_solution": "  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far", "entry_point": "max_sub_array_sum", "test": "def check(candidate):\n    assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7", "prompt_code": "def max_sub_array_sum(a, size):\r\n"}
{"task_id": 560, "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ", "entry_point": "union_elements", "test": "def check(candidate):\n    assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)", "prompt_code": "def union_elements(test_tup1, test_tup2):\r\n"}
{"task_id": 561, "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\r\n", "canonical_solution": "  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) ", "entry_point": "assign_elements", "test": "def check(candidate):\n    assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}", "prompt_code": "def assign_elements(test_list):\r\n"}
{"task_id": 562, "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \r\n", "canonical_solution": "    maxLength = max(len(x) for x in lst )\r\n    return maxLength ", "entry_point": "Find_Max_Length", "test": "def check(candidate):\n    assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4", "prompt_code": "def Find_Max_Length(lst):  \r\n"}
{"task_id": 563, "prompt": "Write a function to extract values between quotation marks of a string.\nimport re\r\ndef extract_values(text):\r\n", "canonical_solution": " return (re.findall(r'\"(.*?)\"', text))", "entry_point": "extract_values", "test": "def check(candidate):\n    assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']", "prompt_code": "import re\r\ndef extract_values(text):\r\n"}
{"task_id": 564, "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \r\n", "canonical_solution": "    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "entry_point": "count_Pairs", "test": "def check(candidate):\n    assert count_Pairs([1,2,1],3) == 2", "prompt_code": "def count_Pairs(arr,n): \r\n"}
{"task_id": 565, "prompt": "Write a python function to split a string into characters.\ndef split(word): \r\n", "canonical_solution": "    return [char for char in word] ", "entry_point": "split", "test": "def check(candidate):\n    assert split('python') == ['p','y','t','h','o','n']", "prompt_code": "def split(word): \r\n"}
{"task_id": 566, "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\r\n", "canonical_solution": "  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))", "entry_point": "sum_digits", "test": "def check(candidate):\n    assert sum_digits(345)==12", "prompt_code": "def sum_digits(n):\r\n"}
{"task_id": 567, "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\r\n", "canonical_solution": "    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result", "entry_point": "issort_list", "test": "def check(candidate):\n    assert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "prompt_code": "def issort_list(list1):\r\n"}
{"task_id": 568, "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\r\n", "canonical_solution": " empty_list = [{} for _ in range(length)]\r\n return empty_list", "entry_point": "empty_list", "test": "def check(candidate):\n    assert empty_list(5)==[{},{},{},{},{}]", "prompt_code": "def empty_list(length):\r\n"}
{"task_id": 569, "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\r\n", "canonical_solution": "    result = list(map(sorted,list1)) \r\n    return result", "entry_point": "sort_sublists", "test": "def check(candidate):\n    assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "prompt_code": "def sort_sublists(list1):\r\n"}
{"task_id": 570, "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\r\n", "canonical_solution": "    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list", "entry_point": "remove_words", "test": "def check(candidate):\n    assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']", "prompt_code": "def remove_words(list1, charlist):\r\n"}
{"task_id": 571, "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \r\n", "canonical_solution": "\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]", "entry_point": "max_sum_pair_diff_lessthan_K", "test": "def check(candidate):\n    assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62", "prompt_code": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n"}
{"task_id": 572, "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\r\n", "canonical_solution": "  return [i for i in nums if nums.count(i)==1]", "entry_point": "two_unique_nums", "test": "def check(candidate):\n    assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "prompt_code": "def two_unique_nums(nums):\r\n"}
{"task_id": 573, "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\r\n", "canonical_solution": "    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p", "entry_point": "unique_product", "test": "def check(candidate):\n    assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000", "prompt_code": "def unique_product(list_data):\r\n"}
{"task_id": 574, "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\r\n", "canonical_solution": "  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea", "entry_point": "surfacearea_cylinder", "test": "def check(candidate):\n    assert surfacearea_cylinder(10,5)==942.45", "prompt_code": "def surfacearea_cylinder(r,h):\r\n"}
{"task_id": 575, "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \r\n", "canonical_solution": "    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) ", "entry_point": "count_no ", "test": "def check(candidate):\n    assert count_no(2,3,1,10) == 5", "prompt_code": "def count_no (A,N,L,R): \r\n"}
{"task_id": 576, "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \r\n", "canonical_solution": "    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; ", "entry_point": "is_Sub_Array", "test": "def check(candidate):\n    assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False", "prompt_code": "def is_Sub_Array(A,B,n,m): \r\n"}
{"task_id": 577, "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \r\n", "canonical_solution": "    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0", "entry_point": "last_Digit_Factorial", "test": "def check(candidate):\n    assert last_Digit_Factorial(4) == 4", "prompt_code": "def last_Digit_Factorial(n): \r\n"}
{"task_id": 578, "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\r\n", "canonical_solution": "    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result", "entry_point": "interleave_lists", "test": "def check(candidate):\n    assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "prompt_code": "def interleave_lists(list1,list2,list3):\r\n"}
{"task_id": 579, "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) ", "entry_point": "find_dissimilar", "test": "def check(candidate):\n    assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)", "prompt_code": "def find_dissimilar(test_tup1, test_tup2):\r\n"}
{"task_id": 580, "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \r\n", "canonical_solution": "\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ", "entry_point": "even_ele", "test": "def check(candidate):\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)", "prompt_code": "def even_ele(test_tuple, even_fnc): \r\n"}
{"task_id": 581, "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \r\n", "canonical_solution": "    return 2 * b * s + pow(b,2) ", "entry_point": "surface_Area", "test": "def check(candidate):\n    assert surface_Area(3,4) == 33", "prompt_code": "def surface_Area(b,s): \r\n"}
{"task_id": 582, "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\r\n", "canonical_solution": "  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True", "entry_point": "my_dict", "test": "def check(candidate):\n    assert my_dict({10})==False", "prompt_code": "def my_dict(dict1):\r\n"}
{"task_id": 583, "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\r\n", "canonical_solution": "    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num", "entry_point": "catalan_number", "test": "def check(candidate):\n    assert catalan_number(10)==16796", "prompt_code": "def catalan_number(num):\r\n"}
{"task_id": 584, "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\nimport re\r\ndef find_adverbs(text):\r\n", "canonical_solution": "  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))", "entry_point": "find_adverbs", "test": "def check(candidate):\n    assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'", "prompt_code": "import re\r\ndef find_adverbs(text):\r\n"}
{"task_id": 585, "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\nimport heapq\r\ndef expensive_items(items,n):\r\n", "canonical_solution": "  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items", "entry_point": "expensive_items", "test": "def check(candidate):\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]", "prompt_code": "import heapq\r\ndef expensive_items(items,n):\r\n"}
{"task_id": 586, "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \r\n", "canonical_solution": "   b = a[:k] \r\n   return (a[k::]+b[::]) ", "entry_point": "split_Arr", "test": "def check(candidate):\n    assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]", "prompt_code": "def split_Arr(a,n,k):  \r\n"}
{"task_id": 587, "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\r\n", "canonical_solution": "  tuplex = tuple(listx)\r\n  return tuplex", "entry_point": "list_tuple", "test": "def check(candidate):\n    assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)", "prompt_code": "def list_tuple(listx):\r\n"}
{"task_id": 588, "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\r\n", "canonical_solution": "     diff= max(nums)-min(nums)\r\n     return diff", "entry_point": "big_diff", "test": "def check(candidate):\n    assert big_diff([1,2,3,4]) == 3", "prompt_code": "def big_diff(nums):\r\n"}
{"task_id": 589, "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\r\n", "canonical_solution": "    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists", "entry_point": "perfect_squares", "test": "def check(candidate):\n    assert perfect_squares(1,30)==[1, 4, 9, 16, 25]", "prompt_code": "def perfect_squares(a, b):\r\n"}
{"task_id": 590, "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\nimport cmath\r\ndef polar_rect(x,y):\r\n", "canonical_solution": " cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)", "entry_point": "polar_rect", "test": "def check(candidate):\n    assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))", "prompt_code": "import cmath\r\ndef polar_rect(x,y):\r\n"}
{"task_id": 591, "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \r\n", "canonical_solution": "    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList ", "entry_point": "swap_List", "test": "def check(candidate):\n    assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]", "prompt_code": "def swap_List(newList): \r\n"}
{"task_id": 592, "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \r\n", "canonical_solution": "    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); ", "entry_point": "binomial_Coeff", "test": "def check(candidate):\n    assert sum_Of_product(3) == 15", "prompt_code": "def binomial_Coeff(n,k): \r\n"}
{"task_id": 593, "prompt": "Write a function to remove leading zeroes from an ip address.\nimport re\r\ndef removezero_ip(ip):\r\n", "canonical_solution": " string = re.sub('\\.[0]*', '.', ip)\r\n return string\r", "entry_point": "removezero_ip", "test": "def check(candidate):\n    assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ", "prompt_code": "import re\r\ndef removezero_ip(ip):\r\n"}
{"task_id": 594, "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\r\n", "canonical_solution": "    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)", "entry_point": "diff_even_odd", "test": "def check(candidate):\n    assert diff_even_odd([1,3,5,7,4,1,6,8])==3", "prompt_code": "def diff_even_odd(list1):\r\n"}
{"task_id": 595, "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \r\n", "canonical_solution": "    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "entry_point": "min_Swaps", "test": "def check(candidate):\n    assert min_Swaps(\"1101\",\"1110\") == 1", "prompt_code": "def min_Swaps(str1,str2) : \r\n"}
{"task_id": 596, "prompt": "Write a function to find the size of the given tuple.\nimport sys \r\ndef tuple_size(tuple_list):\r\n", "canonical_solution": "  return (sys.getsizeof(tuple_list)) ", "entry_point": "tuple_size", "test": "def check(candidate):\n    assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))", "prompt_code": "import sys \r\ndef tuple_size(tuple_list):\r\n"}
{"task_id": 597, "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\r\n", "canonical_solution": "\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]", "entry_point": "find_kth", "test": "def check(candidate):\n    assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6", "prompt_code": "def find_kth(arr1, arr2, m, n, k):\r\n"}
{"task_id": 598, "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\r\n", "canonical_solution": " sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False", "entry_point": "armstrong_number", "test": "def check(candidate):\n    assert armstrong_number(153)==True", "prompt_code": "def armstrong_number(number):\r\n"}
{"task_id": 599, "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\r\n", "canonical_solution": " total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)", "entry_point": "sum_average", "test": "def check(candidate):\n    assert sum_average(10)==(55, 5.5)", "prompt_code": "def sum_average(number):\r\n"}
{"task_id": 600, "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \r\n", "canonical_solution": "    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ", "entry_point": "is_Even", "test": "def check(candidate):\n    assert is_Even(1) == False", "prompt_code": "def is_Even(n) : \r\n"}
{"task_id": 601, "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\nclass Pair(object): \r\n\tdef __init__(self, a, b): \r\n", "canonical_solution": "\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max", "entry_point": "__init__", "test": "def check(candidate):\n    assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3", "prompt_code": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n"}
{"task_id": 602, "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\r\n", "canonical_solution": "  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "entry_point": "first_repeated_char", "test": "def check(candidate):\n    assert first_repeated_char(\"abcabc\") == \"a\"", "prompt_code": "def first_repeated_char(str1):\r\n"}
{"task_id": 603, "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\r\n", "canonical_solution": "\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics", "entry_point": "get_ludic", "test": "def check(candidate):\n    assert get_ludic(10) == [1, 2, 3, 5, 7]", "prompt_code": "def get_ludic(n):\r\n"}
{"task_id": 604, "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\r\n", "canonical_solution": "        return ' '.join(reversed(s.split()))", "entry_point": "reverse_words", "test": "def check(candidate):\n    assert reverse_words(\"python program\")==(\"program python\")", "prompt_code": "def reverse_words(s):\r\n"}
{"task_id": 605, "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\r\n", "canonical_solution": "  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False", "entry_point": "prime_num", "test": "def check(candidate):\n    assert prime_num(13)==True", "prompt_code": "def prime_num(num):\r\n"}
{"task_id": 606, "prompt": "Write a function to convert degrees to radians.\nimport math\r\ndef radian_degree(degree):\r\n", "canonical_solution": " radian = degree*(math.pi/180)\r\n return radian", "entry_point": "radian_degree", "test": "def check(candidate):\n    assert radian_degree(90)==1.5707963267948966", "prompt_code": "import math\r\ndef radian_degree(degree):\r\n"}
{"task_id": 607, "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\nimport re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n", "canonical_solution": "  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)", "entry_point": "find_literals", "test": "def check(candidate):\n    assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "prompt_code": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n"}
{"task_id": 608, "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \r\n", "canonical_solution": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ", "entry_point": "bell_Number", "test": "def check(candidate):\n    assert bell_Number(2) == 2", "prompt_code": "def bell_Number(n): \r\n"}
{"task_id": 609, "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\r\n", "canonical_solution": "    x = max(B - 1,N)\r\n    return (A*x) // B", "entry_point": "floor_Min", "test": "def check(candidate):\n    assert floor_Min(10,20,30) == 15", "prompt_code": "def floor_Min(A,B,N):\r\n"}
{"task_id": 610, "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\r\n", "canonical_solution": "    return  list1[:L-1] + list1[L:]", "entry_point": "remove_kth_element", "test": "def check(candidate):\n    assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "prompt_code": "def remove_kth_element(list1, L):\r\n"}
{"task_id": 611, "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\r\n", "canonical_solution": "  res = max([sub[N] for sub in test_list])\r\n  return (res) ", "entry_point": "max_of_nth", "test": "def check(candidate):\n    assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19", "prompt_code": "def max_of_nth(test_list, N):\r\n"}
{"task_id": 612, "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \r\n", "canonical_solution": "    return [list(ele) for ele in list(zip(*lst))] ", "entry_point": "merge", "test": "def check(candidate):\n    assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "prompt_code": "def merge(lst):  \r\n"}
{"task_id": 613, "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\r\n", "canonical_solution": "  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) ", "entry_point": "maximum_value", "test": "def check(candidate):\n    assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]", "prompt_code": "def maximum_value(test_list):\r\n"}
{"task_id": 614, "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\r\n", "canonical_solution": "  res = sum(map(sum, test_list))\r\n  return (res)", "entry_point": "cummulative_sum", "test": "def check(candidate):\n    assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "prompt_code": "def cummulative_sum(test_list):\r\n"}
{"task_id": 615, "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\r\n", "canonical_solution": "    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result", "entry_point": "average_tuple", "test": "def check(candidate):\n    assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]", "prompt_code": "def average_tuple(nums):\r\n"}
{"task_id": 616, "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ", "entry_point": "tuple_modulo", "test": "def check(candidate):\n    assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "prompt_code": "def tuple_modulo(test_tup1, test_tup2):\r\n"}
{"task_id": 617, "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \r\n", "canonical_solution": "    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2", "entry_point": "min_Jumps", "test": "def check(candidate):\n    assert min_Jumps(3,4,11)==3.5", "prompt_code": "def min_Jumps(a, b, d): \r\n"}
{"task_id": 618, "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\r\n", "canonical_solution": "  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "entry_point": "div_list", "test": "def check(candidate):\n    assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "prompt_code": "def div_list(nums1,nums2):\r\n"}
{"task_id": 619, "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\r\n", "canonical_solution": "  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) ", "entry_point": "move_num", "test": "def check(candidate):\n    assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "prompt_code": "def move_num(test_str):\r\n"}
{"task_id": 620, "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\r\n", "canonical_solution": "\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)", "entry_point": "largest_subset", "test": "def check(candidate):\n    assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4", "prompt_code": "def largest_subset(a, n):\r\n"}
{"task_id": 621, "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\r\n", "canonical_solution": "  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res ", "entry_point": "increment_numerics", "test": "def check(candidate):\n    assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']", "prompt_code": "def increment_numerics(test_list, K):\r\n"}
{"task_id": 622, "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\r\n", "canonical_solution": "  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2", "entry_point": "get_median", "test": "def check(candidate):\n    assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "prompt_code": "def get_median(arr1, arr2, n):\r\n"}
{"task_id": 623, "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\r\n", "canonical_solution": " nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums", "entry_point": "nth_nums", "test": "def check(candidate):\n    assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "prompt_code": "def nth_nums(nums,n):\r\n"}
{"task_id": 624, "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\r\n", "canonical_solution": "  return (string.upper())", "entry_point": "is_upper", "test": "def check(candidate):\n    assert is_upper(\"person\") ==\"PERSON\"", "prompt_code": "def is_upper(string):\r\n"}
{"task_id": 625, "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \r\n", "canonical_solution": "    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ", "entry_point": "swap_List", "test": "def check(candidate):\n    assert swap_List([1,2,3]) == [3,2,1]", "prompt_code": "def swap_List(newList): \r\n"}
{"task_id": 626, "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \r\n", "canonical_solution": "    if r < 0 : \r\n        return -1\r\n    return r * r ", "entry_point": "triangle_area", "test": "def check(candidate):\n    assert triangle_area(0) == 0", "prompt_code": "def triangle_area(r) :  \r\n"}
{"task_id": 627, "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \r\n", "canonical_solution": "    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ", "entry_point": "find_First_Missing", "test": "def check(candidate):\n    assert find_First_Missing([0,1,2,3],0,3) == 4", "prompt_code": "def find_First_Missing(array,start,end): \r\n"}
{"task_id": 628, "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\nMAX=1000;\r\ndef replace_spaces(string):\r\n", "canonical_solution": "  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)", "entry_point": "replace_spaces", "test": "def check(candidate):\n    assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'", "prompt_code": "MAX=1000;\r\ndef replace_spaces(string):\r\n"}
{"task_id": 629, "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \r\n", "canonical_solution": "    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li", "entry_point": "Split", "test": "def check(candidate):\n    assert Split([1,2,3,4,5]) == [2,4]", "prompt_code": "def Split(list): \r\n"}
{"task_id": 630, "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \r\n", "canonical_solution": "  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ", "entry_point": "adjac", "test": "def check(candidate):\n    assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "prompt_code": "def adjac(ele, sub = []): \r\n"}
{"task_id": 631, "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\nimport re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n", "canonical_solution": "  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)", "entry_point": "replace_spaces", "test": "def check(candidate):\n    assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'", "prompt_code": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n"}
{"task_id": 632, "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\r\n", "canonical_solution": "    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)", "entry_point": "move_zero", "test": "def check(candidate):\n    assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "prompt_code": "def move_zero(num_list):\r\n"}
{"task_id": 633, "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \r\n", "canonical_solution": "    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ", "entry_point": "pair_OR_Sum", "test": "def check(candidate):\n    assert pair_OR_Sum([5,9,7,6],4) == 47", "prompt_code": "def pair_OR_Sum(arr,n) : \r\n"}
{"task_id": 634, "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \r\n", "canonical_solution": "    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ", "entry_point": "even_Power_Sum", "test": "def check(candidate):\n    assert even_Power_Sum(2) == 272", "prompt_code": "def even_Power_Sum(n): \r\n"}
{"task_id": 635, "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\nimport heapq as hq\r\ndef heap_sort(iterable):\r\n", "canonical_solution": "    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]", "entry_point": "heap_sort", "test": "def check(candidate):\n    assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "prompt_code": "import heapq as hq\r\ndef heap_sort(iterable):\r\n"}
{"task_id": 636, "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \r\n", "canonical_solution": "    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "entry_point": "Check_Solution", "test": "def check(candidate):\n    assert Check_Solution(2,0,2) == \"Yes\"", "prompt_code": "def Check_Solution(a,b,c): \r\n"}
{"task_id": 637, "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \r\n", "canonical_solution": "  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False", "entry_point": "noprofit_noloss", "test": "def check(candidate):\n    assert noprofit_noloss(1500,1200)==False", "prompt_code": "def noprofit_noloss(actual_cost,sale_amount): \r\n"}
{"task_id": 638, "prompt": "Write a function to calculate wind chill index.\nimport math\r\ndef wind_chill(v,t):\r\n", "canonical_solution": " windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))", "entry_point": "wind_chill", "test": "def check(candidate):\n    assert wind_chill(120,35)==40", "prompt_code": "import math\r\ndef wind_chill(v,t):\r\n"}
{"task_id": 639, "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\r\n", "canonical_solution": "  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))", "entry_point": "sample_nam", "test": "def check(candidate):\n    assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16", "prompt_code": "def sample_nam(sample_names):\r\n"}
{"task_id": 640, "prompt": "Write a function to remove the parenthesis area in a string.\nimport re\r\ndef remove_parenthesis(items):\r\n", "canonical_solution": " for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "entry_point": "remove_parenthesis", "test": "def check(candidate):\n    assert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "prompt_code": "import re\r\ndef remove_parenthesis(items):\r\n"}
{"task_id": 641, "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \r\n", "canonical_solution": "\treturn int(n * (7 * n - 5) / 2) ", "entry_point": "is_nonagonal", "test": "def check(candidate):\n    assert is_nonagonal(10) == 325", "prompt_code": "def is_nonagonal(n): \r\n"}
{"task_id": 642, "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\r\n", "canonical_solution": "  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) ", "entry_point": "remove_similar_row", "test": "def check(candidate):\n    assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}", "prompt_code": "def remove_similar_row(test_list):\r\n"}
{"task_id": 643, "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\nimport re\r\ndef text_match_wordz_middle(text):\r\n", "canonical_solution": "        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "entry_point": "text_match_wordz_middle", "test": "def check(candidate):\n    assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')", "prompt_code": "import re\r\ndef text_match_wordz_middle(text):\r\n"}
{"task_id": 644, "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \r\n", "canonical_solution": "  return (input[k-1::-1] + input[k:]) ", "entry_point": "reverse_Array_Upto_K", "test": "def check(candidate):\n    assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "prompt_code": "def reverse_Array_Upto_K(input, k): \r\n"}
{"task_id": 645, "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \r\n", "canonical_solution": "\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ", "entry_point": "get_product", "test": "def check(candidate):\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665", "prompt_code": "def get_product(val) : \r\n"}
{"task_id": 646, "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\r\n", "canonical_solution": "    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No", "entry_point": "No_of_cubes", "test": "def check(candidate):\n    assert No_of_cubes(2,1) == 8", "prompt_code": "def No_of_cubes(N,K):\r\n"}
{"task_id": 647, "prompt": "Write a function to split a string at uppercase letters.\nimport re\r\ndef split_upperstring(text):\r\n", "canonical_solution": " return (re.findall('[A-Z][^A-Z]*', text))", "entry_point": "split_upperstring", "test": "def check(candidate):\n    assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']", "prompt_code": "import re\r\ndef split_upperstring(text):\r\n"}
{"task_id": 648, "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\nfrom itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n", "canonical_solution": "    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))", "entry_point": "exchange_elements", "test": "def check(candidate):\n    assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ", "prompt_code": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n"}
{"task_id": 649, "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n", "canonical_solution": "    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "entry_point": "sum_Range_list", "test": "def check(candidate):\n    assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29", "prompt_code": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n"}
{"task_id": 650, "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\r\n", "canonical_solution": "    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True", "entry_point": "are_Equal", "test": "def check(candidate):\n    assert are_Equal([1,2,3],[3,2,1],3,3) == True", "prompt_code": "def are_Equal(arr1,arr2,n,m):\r\n"}
{"task_id": 651, "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) ", "entry_point": "check_subset", "test": "def check(candidate):\n    assert check_subset((10, 4, 5, 6), (5, 10)) == True", "prompt_code": "def check_subset(test_tup1, test_tup2):\r\n"}
{"task_id": 652, "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\r\n", "canonical_solution": "  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))", "entry_point": "matrix_to_list", "test": "def check(candidate):\n    assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'", "prompt_code": "def matrix_to_list(test_list):\r\n"}
{"task_id": 653, "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\nfrom collections import defaultdict\r\ndef grouping_dictionary(l):\r\n", "canonical_solution": "    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d", "entry_point": "grouping_dictionary", "test": "def check(candidate):\n    assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})", "prompt_code": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n"}
{"task_id": 654, "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\r\n", "canonical_solution": "  perimeter=2*(l+b)\r\n  return perimeter", "entry_point": "rectangle_perimeter", "test": "def check(candidate):\n    assert rectangle_perimeter(10,20)==60", "prompt_code": "def rectangle_perimeter(l,b):\r\n"}
{"task_id": 655, "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \r\n", "canonical_solution": "    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm ", "entry_point": "fifth_Power_Sum", "test": "def check(candidate):\n    assert fifth_Power_Sum(2) == 33", "prompt_code": "def fifth_Power_Sum(n) : \r\n"}
{"task_id": 656, "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \r\n", "canonical_solution": "    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum", "entry_point": "find_Min_Sum", "test": "def check(candidate):\n    assert find_Min_Sum([3,2,1],[2,1,3],3) == 0", "prompt_code": "def find_Min_Sum(a,b,n): \r\n"}
{"task_id": 657, "prompt": "Write a python function to find the first digit in factorial of a given number.\nimport math \r\ndef first_Digit(n) : \r\n", "canonical_solution": "    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) ", "entry_point": "first_Digit", "test": "def check(candidate):\n    assert first_Digit(5) == 1", "prompt_code": "import math \r\ndef first_Digit(n) : \r\n"}
{"task_id": 658, "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\r\n", "canonical_solution": "    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "entry_point": "max_occurrences", "test": "def check(candidate):\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2", "prompt_code": "def max_occurrences(list1):\r\n"}
{"task_id": 659, "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \r\n", "canonical_solution": "    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated ", "entry_point": "Repeat", "test": "def check(candidate):\n    assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]", "prompt_code": "def Repeat(x): \r\n"}
{"task_id": 660, "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \r\n", "canonical_solution": "    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)", "entry_point": "find_Points", "test": "def check(candidate):\n    assert find_Points(5,10,1,5) == (1,10)", "prompt_code": "def find_Points(l1,r1,l2,r2): \r\n"}
{"task_id": 661, "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \r\n", "canonical_solution": "\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]", "entry_point": "max_sum_of_three_consecutive", "test": "def check(candidate):\n    assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101", "prompt_code": "def max_sum_of_three_consecutive(arr, n): \r\n"}
{"task_id": 662, "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\r\n", "canonical_solution": "  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict", "entry_point": "sorted_dict", "test": "def check(candidate):\n    assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}", "prompt_code": "def sorted_dict(dict1):\r\n"}
{"task_id": 663, "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\nimport sys \r\ndef find_max_val(n, x, y): \r\n", "canonical_solution": "\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) ", "entry_point": "find_max_val", "test": "def check(candidate):\n    assert find_max_val(15, 10, 5) == 15", "prompt_code": "import sys \r\ndef find_max_val(n, x, y): \r\n"}
{"task_id": 664, "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \r\n", "canonical_solution": "    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count ", "entry_point": "average_Even", "test": "def check(candidate):\n    assert average_Even(2) == 2", "prompt_code": "def average_Even(n) : \r\n"}
{"task_id": 665, "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\r\n", "canonical_solution": "    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)", "entry_point": "move_last", "test": "def check(candidate):\n    assert move_last([1,2,3,4]) == [2,3,4,1]", "prompt_code": "def move_last(num_list):\r\n"}
{"task_id": 666, "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\r\n", "canonical_solution": " count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count", "entry_point": "count_char", "test": "def check(candidate):\n    assert count_char(\"Python\",'o')==1", "prompt_code": "def count_char(string,char):\r\n"}
{"task_id": 667, "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \r\n", "canonical_solution": "    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n", "entry_point": "Check_Vow", "test": "def check(candidate):\n    assert Check_Vow('corner','AaEeIiOoUu') == 2", "prompt_code": "def Check_Vow(string, vowels): \r\n"}
{"task_id": 668, "prompt": "Write a python function to replace multiple occurence of character by single.\nimport re \r\ndef replace(string, char): \r\n", "canonical_solution": "    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string ", "entry_point": "replace", "test": "def check(candidate):\n    assert replace('peep','e') == 'pep'", "prompt_code": "import re \r\ndef replace(string, char): \r\n"}
{"task_id": 669, "prompt": "Write a function to check whether the given ip address is valid or not using regex.\nimport re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n", "canonical_solution": "\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") ", "entry_point": "check_IP", "test": "def check(candidate):\n    assert check_IP(\"192.168.0.1\") == 'Valid IP address'", "prompt_code": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n"}
{"task_id": 670, "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\r\n", "canonical_solution": "    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "entry_point": "decreasing_trend", "test": "def check(candidate):\n    assert decreasing_trend([-4,-3,-2,-1]) == True", "prompt_code": "def decreasing_trend(nums):\r\n"}
{"task_id": 671, "prompt": "Write a python function to set the right most unset bit.\nimport math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n", "canonical_solution": "    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) ", "entry_point": "get_Pos_Of_Right_most_Set_Bit", "test": "def check(candidate):\n    assert set_Right_most_Unset_Bit(21) == 23", "prompt_code": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n"}
{"task_id": 672, "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \r\n", "canonical_solution": "    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum", "entry_point": "max_of_three", "test": "def check(candidate):\n    assert max_of_three(10,20,30)==30", "prompt_code": "def max_of_three(num1,num2,num3): \r\n"}
{"task_id": 673, "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \r\n", "canonical_solution": "    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ", "entry_point": "convert", "test": "def check(candidate):\n    assert convert([1,2,3]) == 123", "prompt_code": "def convert(list): \r\n"}
{"task_id": 674, "prompt": "Write a function to remove duplicate words from a given string using collections module.\nfrom collections import OrderedDict\r\ndef remove_duplicate(string):\r\n", "canonical_solution": "  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result", "entry_point": "remove_duplicate", "test": "def check(candidate):\n    assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")", "prompt_code": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n"}
{"task_id": 675, "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\r\n", "canonical_solution": "    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums", "entry_point": "sum_nums", "test": "def check(candidate):\n    assert sum_nums(2,10,11,20)==20", "prompt_code": "def sum_nums(x, y,m,n):\r\n"}
{"task_id": 676, "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\nimport re\r\ndef remove_extra_char(text1):\r\n", "canonical_solution": "  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))", "entry_point": "remove_extra_char", "test": "def check(candidate):\n    assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'", "prompt_code": "import re\r\ndef remove_extra_char(text1):\r\n"}
{"task_id": 677, "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\r\n", "canonical_solution": " total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False", "entry_point": "validity_triangle", "test": "def check(candidate):\n    assert validity_triangle(60,50,90)==False", "prompt_code": "def validity_triangle(a,b,c):\r\n"}
{"task_id": 678, "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\r\n", "canonical_solution": "  str1 = str1.replace(' ','')\r\n  return str1", "entry_point": "remove_spaces", "test": "def check(candidate):\n    assert remove_spaces(\"a b c\") == \"abc\"", "prompt_code": "def remove_spaces(str1):\r\n"}
{"task_id": 679, "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\r\n", "canonical_solution": "  return list(ditionary)[key]", "entry_point": "access_key", "test": "def check(candidate):\n    assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'", "prompt_code": "def access_key(ditionary,key):\r\n"}
{"task_id": 680, "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\r\n", "canonical_solution": "    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "entry_point": "increasing_trend", "test": "def check(candidate):\n    assert increasing_trend([1,2,3,4]) == True", "prompt_code": "def increasing_trend(nums):\r\n"}
{"task_id": 681, "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \r\n", "canonical_solution": "    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ", "entry_point": "smallest_Divisor", "test": "def check(candidate):\n    assert smallest_Divisor(10) == 2", "prompt_code": "def smallest_Divisor(n): \r\n"}
{"task_id": 682, "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\r\n", "canonical_solution": "  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)", "entry_point": "mul_list", "test": "def check(candidate):\n    assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]", "prompt_code": "def mul_list(nums1,nums2):\r\n"}
{"task_id": 683, "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \r\n", "canonical_solution": "    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False", "entry_point": "sum_Square", "test": "def check(candidate):\n    assert sum_Square(25) == True", "prompt_code": "def sum_Square(n) : \r\n"}
{"task_id": 684, "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \r\n", "canonical_solution": "    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ", "entry_point": "count_Char", "test": "def check(candidate):\n    assert count_Char(\"abcac\",'a') == 4", "prompt_code": "def count_Char(str,x): \r\n"}
{"task_id": 685, "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \r\n", "canonical_solution": "    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum", "entry_point": "sum_Of_Primes", "test": "def check(candidate):\n    assert sum_Of_Primes(10) == 17", "prompt_code": "def sum_Of_Primes(n): \r\n"}
{"task_id": 686, "prompt": "Write a function to find the frequency of each element in the given list.\nfrom collections import defaultdict \r\ndef freq_element(test_tup):\r\n", "canonical_solution": "  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) ", "entry_point": "freq_element", "test": "def check(candidate):\n    assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'", "prompt_code": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n"}
{"task_id": 687, "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\r\n", "canonical_solution": "\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)", "entry_point": "recur_gcd", "test": "def check(candidate):\n    assert recur_gcd(12,14) == 2", "prompt_code": "def recur_gcd(a, b):\r\n"}
{"task_id": 688, "prompt": "Write a function to get the length of a complex number.\nimport cmath\r\ndef len_complex(a,b):\r\n", "canonical_solution": "  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length", "entry_point": "len_complex", "test": "def check(candidate):\n    assert len_complex(3,4)==5.0", "prompt_code": "import cmath\r\ndef len_complex(a,b):\r\n"}
{"task_id": 689, "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\r\n", "canonical_solution": "\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]", "entry_point": "min_jumps", "test": "def check(candidate):\n    assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3", "prompt_code": "def min_jumps(arr, n):\r\n"}
{"task_id": 690, "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\r\n", "canonical_solution": "    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "entry_point": "mul_consecutive_nums", "test": "def check(candidate):\n    assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]", "prompt_code": "def mul_consecutive_nums(nums):\r\n"}
{"task_id": 691, "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\nfrom itertools import groupby \r\ndef group_element(test_list):\r\n", "canonical_solution": "  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n", "entry_point": "group_element", "test": "def check(candidate):\n    assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}", "prompt_code": "from itertools import groupby \r\ndef group_element(test_list):\r\n"}
{"task_id": 692, "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \r\n", "canonical_solution": "    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) ", "entry_point": "last_Two_Digits", "test": "def check(candidate):\n    assert last_Two_Digits(7) == 40", "prompt_code": "def last_Two_Digits(N): \r\n"}
{"task_id": 693, "prompt": "Write a function to remove multiple spaces in a string by using regex.\nimport re\r\ndef remove_multiple_spaces(text1):\r\n", "canonical_solution": "  return (re.sub(' +',' ',text1))", "entry_point": "remove_multiple_spaces", "test": "def check(candidate):\n    assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'", "prompt_code": "import re\r\ndef remove_multiple_spaces(text1):\r\n"}
{"task_id": 694, "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\r\n", "canonical_solution": "  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res", "entry_point": "extract_unique", "test": "def check(candidate):\n    assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]", "prompt_code": "def extract_unique(test_dict):\r\n"}
{"task_id": 695, "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "check_greater", "test": "def check(candidate):\n    assert check_greater((10, 4, 5), (13, 5, 18)) == True", "prompt_code": "def check_greater(test_tup1, test_tup2):\r\n"}
{"task_id": 696, "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \r\n", "canonical_solution": " result = list(map(list.__add__, list1, list2)) \r\n return result", "entry_point": "zip_list", "test": "def check(candidate):\n    assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]", "prompt_code": "def zip_list(list1,list2):  \r\n"}
{"task_id": 697, "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\r\n", "canonical_solution": "   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even", "entry_point": "count_even", "test": "def check(candidate):\n    assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3", "prompt_code": "def count_even(array_nums):\r\n"}
{"task_id": 698, "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\r\n", "canonical_solution": "  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n", "entry_point": "sort_dict_item", "test": "def check(candidate):\n    assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}", "prompt_code": "def sort_dict_item(test_dict):\r\n"}
{"task_id": 699, "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \r\n", "canonical_solution": "    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "entry_point": "min_Swaps", "test": "def check(candidate):\n    assert min_Swaps(\"1101\",\"1110\") == 1", "prompt_code": "def min_Swaps(str1,str2) : \r\n"}
{"task_id": 700, "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\r\n", "canonical_solution": "\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr", "entry_point": "count_range_in_list", "test": "def check(candidate):\n    assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6", "prompt_code": "def count_range_in_list(li, min, max):\r\n"}
{"task_id": 701, "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\r\n", "canonical_solution": "  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1", "entry_point": "equilibrium_index", "test": "def check(candidate):\n    assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3", "prompt_code": "def equilibrium_index(arr):\r\n"}
{"task_id": 702, "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \r\n", "canonical_solution": "\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans", "entry_point": "find_ind", "test": "def check(candidate):\n    assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5", "prompt_code": "def find_ind(key, i, n, \r\n"}
{"task_id": 703, "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\r\n", "canonical_solution": "  if x in d:\r\n    return True\r\n  else:\r\n     return False", "entry_point": "is_key_present", "test": "def check(candidate):\n    assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True", "prompt_code": "def is_key_present(d,x):\r\n"}
{"task_id": 704, "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\r\n", "canonical_solution": "  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))", "entry_point": "harmonic_sum", "test": "def check(candidate):\n    assert harmonic_sum(10)==2.9289682539682538", "prompt_code": "def harmonic_sum(n):\r\n"}
{"task_id": 705, "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\r\n", "canonical_solution": "      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1", "entry_point": "sort_sublists", "test": "def check(candidate):\n    assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]", "prompt_code": "def sort_sublists(list1):\r\n"}
{"task_id": 706, "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \r\n", "canonical_solution": "\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t", "entry_point": "is_subset", "test": "def check(candidate):\n    assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True", "prompt_code": "def is_subset(arr1, m, arr2, n): \r\n"}
{"task_id": 707, "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \r\n", "canonical_solution": "    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  ", "entry_point": "count_Set_Bits", "test": "def check(candidate):\n    assert count_Set_Bits(16) == 33", "prompt_code": "def count_Set_Bits(n) :  \r\n"}
{"task_id": 708, "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \r\n", "canonical_solution": "    li = list(string.split(\" \")) \r\n    return li ", "entry_point": "Convert", "test": "def check(candidate):\n    assert Convert('python program') == ['python','program']", "prompt_code": "def Convert(string): \r\n"}
{"task_id": 709, "prompt": "Write a function to count unique keys for each value present in the tuple.\nfrom collections import defaultdict \r\ndef get_unique(test_list):\r\n", "canonical_solution": "  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ", "entry_point": "get_unique", "test": "def check(candidate):\n    assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'", "prompt_code": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n"}
{"task_id": 710, "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\r\n", "canonical_solution": "  res = (test_tup[0], test_tup[-1])\r\n  return (res) ", "entry_point": "front_and_rear", "test": "def check(candidate):\n    assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)", "prompt_code": "def front_and_rear(test_tup):\r\n"}
{"task_id": 711, "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \r\n", "canonical_solution": "    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False", "entry_point": "product_Equal", "test": "def check(candidate):\n    assert product_Equal(2841) == True", "prompt_code": "def product_Equal(n): \r\n"}
{"task_id": 712, "prompt": "Write a function to remove duplicates from a list of lists.\nimport itertools\r\ndef remove_duplicate(list1):\r\n", "canonical_solution": " list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate", "entry_point": "remove_duplicate", "test": "def check(candidate):\n    assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ", "prompt_code": "import itertools\r\ndef remove_duplicate(list1):\r\n"}
{"task_id": 713, "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\r\n", "canonical_solution": "  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ", "entry_point": "check_valid", "test": "def check(candidate):\n    assert check_valid((True, True, True, True) ) == True", "prompt_code": "def check_valid(test_tup):\r\n"}
{"task_id": 714, "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \r\n", "canonical_solution": "    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ", "entry_point": "count_Fac", "test": "def check(candidate):\n    assert count_Fac(24) == 3", "prompt_code": "def count_Fac(n):  \r\n"}
{"task_id": 715, "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\r\n", "canonical_solution": "  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ", "entry_point": "str_to_tuple", "test": "def check(candidate):\n    assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)", "prompt_code": "def str_to_tuple(test_str):\r\n"}
{"task_id": 716, "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\r\n", "canonical_solution": "  perimeter=4*a\r\n  return perimeter", "entry_point": "rombus_perimeter", "test": "def check(candidate):\n    assert rombus_perimeter(10)==40", "prompt_code": "def rombus_perimeter(a):\r\n"}
{"task_id": 717, "prompt": "Write a function to calculate the standard deviation.\nimport math\r\nimport sys\r\ndef sd_calc(data):\r\n", "canonical_solution": "    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean", "entry_point": "sd_calc", "test": "def check(candidate):\n    assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979", "prompt_code": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n"}
{"task_id": 718, "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\r\n", "canonical_solution": "    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result ", "entry_point": "alternate_elements", "test": "def check(candidate):\n    assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']", "prompt_code": "def alternate_elements(list1):\r\n"}
{"task_id": 719, "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\nimport re\r\ndef text_match(text):\r\n", "canonical_solution": "        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "entry_point": "text_match", "test": "def check(candidate):\n    assert text_match(\"ac\")==('Found a match!')", "prompt_code": "import re\r\ndef text_match(text):\r\n"}
{"task_id": 720, "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\r\n", "canonical_solution": "  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ", "entry_point": "add_dict_to_tuple", "test": "def check(candidate):\n    assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "prompt_code": "def add_dict_to_tuple(test_tup, test_dict):\r\n"}
{"task_id": 721, "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\nM = 100\r\ndef maxAverageOfPath(cost, N): \r\n", "canonical_solution": "\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "entry_point": "maxAverageOfPath", "test": "def check(candidate):\n    assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2", "prompt_code": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n"}
{"task_id": 722, "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\r\n", "canonical_solution": "    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ", "entry_point": "filter_data", "test": "def check(candidate):\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "prompt_code": "def filter_data(students,h,w):\r\n"}
{"task_id": 723, "prompt": "Write a function to count the same pair in two given lists using map function.\nfrom operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n", "canonical_solution": "    result = sum(map(eq, nums1, nums2))\r\n    return result", "entry_point": "count_same_pair", "test": "def check(candidate):\n    assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4", "prompt_code": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n"}
{"task_id": 724, "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\r\n", "canonical_solution": "    return sum([int(i) for i in str(pow(base, power))])", "entry_point": "power_base_sum", "test": "def check(candidate):\n    assert power_base_sum(2,100)==115", "prompt_code": "def power_base_sum(base, power):\r\n"}
{"task_id": 725, "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\nimport re\r\ndef extract_quotation(text1):\r\n", "canonical_solution": "  return (re.findall(r'\"(.*?)\"', text1))", "entry_point": "extract_quotation", "test": "def check(candidate):\n    assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "prompt_code": "import re\r\ndef extract_quotation(text1):\r\n"}
{"task_id": 726, "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\r\n", "canonical_solution": "  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "entry_point": "multiply_elements", "test": "def check(candidate):\n    assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "prompt_code": "def multiply_elements(test_tup):\r\n"}
{"task_id": 727, "prompt": "Write a function to remove all characters except letters and numbers using regex\nimport re \r\ndef remove_char(S):\r\n", "canonical_solution": "  result = re.sub('[\\W_]+', '', S) \r\n  return result", "entry_point": "remove_char", "test": "def check(candidate):\n    assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'", "prompt_code": "import re \r\ndef remove_char(S):\r\n"}
{"task_id": 728, "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\r\n", "canonical_solution": "  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "entry_point": "sum_list", "test": "def check(candidate):\n    assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "prompt_code": "def sum_list(lst1,lst2):\r\n"}
{"task_id": 729, "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\r\n", "canonical_solution": "  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)", "entry_point": "add_list", "test": "def check(candidate):\n    assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]", "prompt_code": "def add_list(nums1,nums2):\r\n"}
{"task_id": 730, "prompt": "Write a function to remove consecutive duplicates of a given list.\nfrom itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n", "canonical_solution": "    return [key for key, group in groupby(nums)] ", "entry_point": "consecutive_duplicates", "test": "def check(candidate):\n    assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "prompt_code": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n"}
{"task_id": 731, "prompt": "Write a function to find the lateral surface area of a cone.\nimport math\r\ndef lateralsurface_cone(r,h):\r\n", "canonical_solution": "  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA", "entry_point": "lateralsurface_cone", "test": "def check(candidate):\n    assert lateralsurface_cone(5,12)==204.20352248333654", "prompt_code": "import math\r\ndef lateralsurface_cone(r,h):\r\n"}
{"task_id": 732, "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nimport re\r\ndef replace_specialchar(text):\r\n", "canonical_solution": " return (re.sub(\"[ ,.]\", \":\", text))\r", "entry_point": "replace_specialchar", "test": "def check(candidate):\n    assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')", "prompt_code": "import re\r\ndef replace_specialchar(text):\r\n"}
{"task_id": 733, "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\r\n", "canonical_solution": "    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result", "entry_point": "find_first_occurrence", "test": "def check(candidate):\n    assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "prompt_code": "def find_first_occurrence(A, x):\r\n"}
{"task_id": 734, "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\r\n", "canonical_solution": "    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)", "entry_point": "sum_Of_Subarray_Prod", "test": "def check(candidate):\n    assert sum_Of_Subarray_Prod([1,2,3],3) == 20", "prompt_code": "def sum_Of_Subarray_Prod(arr,n):\r\n"}
{"task_id": 735, "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \r\n", "canonical_solution": "    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ", "entry_point": "set_middle_bits", "test": "def check(candidate):\n    assert toggle_middle_bits(9) == 15", "prompt_code": "def set_middle_bits(n):  \r\n"}
{"task_id": 736, "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\nimport bisect\r\ndef left_insertion(a, x):\r\n", "canonical_solution": "    i = bisect.bisect_left(a, x)\r\n    return i", "entry_point": "left_insertion", "test": "def check(candidate):\n    assert left_insertion([1,2,4,5],6)==4", "prompt_code": "import bisect\r\ndef left_insertion(a, x):\r\n"}
{"task_id": 737, "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\nimport re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n", "canonical_solution": "\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ", "entry_point": "check_str", "test": "def check(candidate):\n    assert check_str(\"annie\") == 'Valid'", "prompt_code": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n"}
{"task_id": 738, "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\r\n", "canonical_solution": "  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "entry_point": "geometric_sum", "test": "def check(candidate):\n    assert geometric_sum(7) == 1.9921875", "prompt_code": "def geometric_sum(n):\r\n"}
{"task_id": 739, "prompt": "Write a python function to find the index of smallest triangular number with n digits.\nimport math \r\ndef find_Index(n): \r\n", "canonical_solution": "    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ", "entry_point": "find_Index", "test": "def check(candidate):\n    assert find_Index(2) == 4", "prompt_code": "import math \r\ndef find_Index(n): \r\n"}
{"task_id": 740, "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\r\n", "canonical_solution": "  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ", "entry_point": "tuple_to_dict", "test": "def check(candidate):\n    assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "prompt_code": "def tuple_to_dict(test_tup):\r\n"}
{"task_id": 741, "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\r\n", "canonical_solution": "    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True", "entry_point": "all_Characters_Same", "test": "def check(candidate):\n    assert all_Characters_Same(\"python\") == False", "prompt_code": "def all_Characters_Same(s) :\r\n"}
{"task_id": 742, "prompt": "Write a function to caluclate the area of a tetrahedron.\nimport math\r\ndef area_tetrahedron(side):\r\n", "canonical_solution": "  area = math.sqrt(3)*(side*side)\r\n  return area", "entry_point": "area_tetrahedron", "test": "def check(candidate):\n    assert area_tetrahedron(3)==15.588457268119894", "prompt_code": "import math\r\ndef area_tetrahedron(side):\r\n"}
{"task_id": 743, "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\r\n", "canonical_solution": "  result =  list1[-(m):]+list1[:-(n)]\r\n  return result", "entry_point": "rotate_right", "test": "def check(candidate):\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]", "prompt_code": "def rotate_right(list1,m,n):\r\n"}
{"task_id": 744, "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\r\n", "canonical_solution": "  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ", "entry_point": "check_none", "test": "def check(candidate):\n    assert check_none((10, 4, 5, 6, None)) == True", "prompt_code": "def check_none(test_tup):\r\n"}
{"task_id": 745, "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\r\n", "canonical_solution": "    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "entry_point": "divisible_by_digits", "test": "def check(candidate):\n    assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "prompt_code": "def divisible_by_digits(startnum, endnum):\r\n"}
{"task_id": 746, "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\r\n", "canonical_solution": "    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea", "entry_point": "sector_area", "test": "def check(candidate):\n    assert sector_area(4,45)==6.285714285714286", "prompt_code": "def sector_area(r,a):\r\n"}
{"task_id": 747, "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \r\n", "canonical_solution": "\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]", "entry_point": "lcs_of_three", "test": "def check(candidate):\n    assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2", "prompt_code": "def lcs_of_three(X, Y, Z, m, n, o): \r\n"}
{"task_id": 748, "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\nimport re\r\ndef capital_words_spaces(str1):\r\n", "canonical_solution": "  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "entry_point": "capital_words_spaces", "test": "def check(candidate):\n    assert capital_words_spaces(\"Python\") == 'Python'", "prompt_code": "import re\r\ndef capital_words_spaces(str1):\r\n"}
{"task_id": 749, "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\r\n", "canonical_solution": "    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result", "entry_point": "sort_numeric_strings", "test": "def check(candidate):\n    assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "prompt_code": "def sort_numeric_strings(nums_str):\r\n"}
{"task_id": 750, "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\r\n", "canonical_solution": "  test_list += test_tup\r\n  return (test_list) ", "entry_point": "add_tuple", "test": "def check(candidate):\n    assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "prompt_code": "def add_tuple(test_list, test_tup):\r\n"}
{"task_id": 751, "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\r\n", "canonical_solution": "    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child", "entry_point": "check_min_heap", "test": "def check(candidate):\n    assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True", "prompt_code": "def check_min_heap(arr, i):\r\n"}
{"task_id": 752, "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \r\n", "canonical_solution": "\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]", "entry_point": "jacobsthal_num", "test": "def check(candidate):\n    assert jacobsthal_num(5) == 11", "prompt_code": "def jacobsthal_num(n): \r\n"}
{"task_id": 753, "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\r\n", "canonical_solution": "  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) ", "entry_point": "min_k", "test": "def check(candidate):\n    assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "prompt_code": "def min_k(test_list, K):\r\n"}
{"task_id": 754, "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\r\n", "canonical_solution": "    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result", "entry_point": "extract_index_list", "test": "def check(candidate):\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "prompt_code": "def extract_index_list(l1, l2, l3):\r\n"}
{"task_id": 755, "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\r\n", "canonical_solution": "  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ", "entry_point": "second_smallest", "test": "def check(candidate):\n    assert second_smallest([1, 2, -8, -2, 0, -2])==-2", "prompt_code": "def second_smallest(numbers):\r\n"}
{"task_id": 756, "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\nimport re\r\ndef text_match_zero_one(text):\r\n", "canonical_solution": "        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "entry_point": "text_match_zero_one", "test": "def check(candidate):\n    assert text_match_zero_one(\"ac\")==('Found a match!')", "prompt_code": "import re\r\ndef text_match_zero_one(text):\r\n"}
{"task_id": 757, "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\r\n", "canonical_solution": "  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)", "entry_point": "count_reverse_pairs", "test": "def check(candidate):\n    assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'", "prompt_code": "def count_reverse_pairs(test_list):\r\n"}
{"task_id": 758, "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\r\n", "canonical_solution": "    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "entry_point": "unique_sublists", "test": "def check(candidate):\n    assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "prompt_code": "def unique_sublists(list1):\r\n"}
{"task_id": 759, "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\r\n", "canonical_solution": "    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)", "entry_point": "is_decimal", "test": "def check(candidate):\n    assert is_decimal('123.11')==True", "prompt_code": "def is_decimal(num):\r\n"}
{"task_id": 760, "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\r\n", "canonical_solution": "    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')", "entry_point": "unique_Element", "test": "def check(candidate):\n    assert unique_Element([1,1,1],3) == 'YES'", "prompt_code": "def unique_Element(arr,n):\r\n"}
{"task_id": 761, "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\r\n", "canonical_solution": "    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength", "entry_point": "arc_length", "test": "def check(candidate):\n    assert arc_length(9,45)==3.5357142857142856", "prompt_code": "def arc_length(d,a):\r\n"}
{"task_id": 762, "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\r\n", "canonical_solution": "  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False", "entry_point": "check_monthnumber_number", "test": "def check(candidate):\n    assert check_monthnumber_number(6)==True", "prompt_code": "def check_monthnumber_number(monthnum3):\r\n"}
{"task_id": 763, "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \r\n", "canonical_solution": "    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ", "entry_point": "find_Min_Diff", "test": "def check(candidate):\n    assert find_Min_Diff((1,5,3,19,18,25),6) == 1", "prompt_code": "def find_Min_Diff(arr,n): \r\n"}
{"task_id": 764, "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\r\n", "canonical_solution": "      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr", "entry_point": "number_ctr", "test": "def check(candidate):\n    assert number_ctr('program2bedone') == 1", "prompt_code": "def number_ctr(str):\r\n"}
{"task_id": 765, "prompt": "Write a function to find nth polite number.\nimport math \r\ndef is_polite(n): \r\n", "canonical_solution": "\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "entry_point": "is_polite", "test": "def check(candidate):\n    assert is_polite(7) == 11", "prompt_code": "import math \r\ndef is_polite(n): \r\n"}
{"task_id": 766, "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\r\n", "canonical_solution": "    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp", "entry_point": "pair_wise", "test": "def check(candidate):\n    assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "prompt_code": "def pair_wise(l1):\r\n"}
{"task_id": 767, "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\r\n", "canonical_solution": "    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "entry_point": "get_Pairs_Count", "test": "def check(candidate):\n    assert get_Pairs_Count([1,1,1,1],4,2) == 6", "prompt_code": "def get_Pairs_Count(arr,n,sum):\r\n"}
{"task_id": 768, "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \r\n", "canonical_solution": "    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False", "entry_point": "check_Odd_Parity", "test": "def check(candidate):\n    assert check_Odd_Parity(13) == True", "prompt_code": "def check_Odd_Parity(x): \r\n"}
{"task_id": 769, "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\r\n", "canonical_solution": "    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ", "entry_point": "Diff", "test": "def check(candidate):\n    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "prompt_code": "def Diff(li1,li2):\r\n"}
{"task_id": 770, "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \r\n", "canonical_solution": "    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ", "entry_point": "odd_Num_Sum", "test": "def check(candidate):\n    assert odd_Num_Sum(2) == 82", "prompt_code": "def odd_Num_Sum(n) : \r\n"}
{"task_id": 771, "prompt": "Write a function to check if the given expression is balanced or not.\nfrom collections import deque\r\ndef check_expression(exp):\r\n", "canonical_solution": "    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack", "entry_point": "check_expression", "test": "def check(candidate):\n    assert check_expression(\"{()}[{}]\") == True", "prompt_code": "from collections import deque\r\ndef check_expression(exp):\r\n"}
{"task_id": 772, "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\r\n", "canonical_solution": "  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) ", "entry_point": "remove_length", "test": "def check(candidate):\n    assert remove_length('The person is most value tet', 3) == 'person is most value'", "prompt_code": "def remove_length(test_str, K):\r\n"}
{"task_id": 773, "prompt": "Write a function to find the occurrence and position of the substrings within a string.\nimport re\r\ndef occurance_substring(text,pattern):\r\n", "canonical_solution": " for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)", "entry_point": "occurance_substring", "test": "def check(candidate):\n    assert occurance_substring('python programming, python language','python')==('python', 0, 6)", "prompt_code": "import re\r\ndef occurance_substring(text,pattern):\r\n"}
{"task_id": 774, "prompt": "Write a function to check if the string is a valid email address or not using regex.\nimport re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n", "canonical_solution": "\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") ", "entry_point": "check_email", "test": "def check(candidate):\n    assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'", "prompt_code": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n"}
{"task_id": 775, "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\r\n", "canonical_solution": "\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "entry_point": "odd_position", "test": "def check(candidate):\n    assert odd_position([2,1,4,3,6,7,6,3]) == True", "prompt_code": "def odd_position(nums):\r\n"}
{"task_id": 776, "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\r\n", "canonical_solution": "  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) ", "entry_point": "count_vowels", "test": "def check(candidate):\n    assert count_vowels('bestinstareels') == 7", "prompt_code": "def count_vowels(test_str):\r\n"}
{"task_id": 777, "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \r\n", "canonical_solution": "    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum", "entry_point": "find_Sum", "test": "def check(candidate):\n    assert find_Sum([1,2,3,1,1,4,5,6],8) == 21", "prompt_code": "def find_Sum(arr,n): \r\n"}
{"task_id": 778, "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\nfrom itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n", "canonical_solution": "    return [list(group) for key, group in groupby(list1)]", "entry_point": "pack_consecutive_duplicates", "test": "def check(candidate):\n    assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "prompt_code": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n"}
{"task_id": 779, "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\r\n", "canonical_solution": "    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "entry_point": "unique_sublists", "test": "def check(candidate):\n    assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "prompt_code": "def unique_sublists(list1):\r\n"}
{"task_id": 780, "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\nfrom itertools import combinations \r\ndef find_combinations(test_list):\r\n", "canonical_solution": "  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) ", "entry_point": "find_combinations", "test": "def check(candidate):\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "prompt_code": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n"}
{"task_id": 781, "prompt": "Write a python function to check whether the count of divisors is even or odd.\nimport math \r\ndef count_Divisors(n) : \r\n", "canonical_solution": "    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ", "entry_point": "count_Divisors", "test": "def check(candidate):\n    assert count_Divisors(10) == \"Even\"", "prompt_code": "import math \r\ndef count_Divisors(n) : \r\n"}
{"task_id": 782, "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\r\n", "canonical_solution": "    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "entry_point": "Odd_Length_Sum", "test": "def check(candidate):\n    assert Odd_Length_Sum([1,2,4]) == 14", "prompt_code": "def Odd_Length_Sum(arr):\r\n"}
{"task_id": 783, "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\r\n", "canonical_solution": "    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v", "entry_point": "rgb_to_hsv", "test": "def check(candidate):\n    assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "prompt_code": "def rgb_to_hsv(r, g, b):\r\n"}
{"task_id": 784, "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\r\n", "canonical_solution": "    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)", "entry_point": "mul_even_odd", "test": "def check(candidate):\n    assert mul_even_odd([1,3,5,7,4,1,6,8])==4", "prompt_code": "def mul_even_odd(list1):\r\n"}
{"task_id": 785, "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\r\n", "canonical_solution": "  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ", "entry_point": "tuple_str_int", "test": "def check(candidate):\n    assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "prompt_code": "def tuple_str_int(test_str):\r\n"}
{"task_id": 786, "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\nimport bisect\r\ndef right_insertion(a, x):\r\n", "canonical_solution": "    i = bisect.bisect_right(a, x)\r\n    return i", "entry_point": "right_insertion", "test": "def check(candidate):\n    assert right_insertion([1,2,4,5],6)==4", "prompt_code": "import bisect\r\ndef right_insertion(a, x):\r\n"}
{"task_id": 787, "prompt": "Write a function that matches a string that has an a followed by three 'b'.\nimport re\r\ndef text_match_three(text):\r\n", "canonical_solution": "        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "entry_point": "text_match_three", "test": "def check(candidate):\n    assert text_match_three(\"ac\")==('Not matched!')", "prompt_code": "import re\r\ndef text_match_three(text):\r\n"}
{"task_id": 788, "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\r\n", "canonical_solution": "  res = tuple(test_list + [test_str])\r\n  return (res) ", "entry_point": "new_tuple", "test": "def check(candidate):\n    assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "prompt_code": "def new_tuple(test_list, test_str):\r\n"}
{"task_id": 789, "prompt": "Write a function to calculate the perimeter of a regular polygon.\nfrom math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n", "canonical_solution": "  perimeter = s*l\r\n  return perimeter", "entry_point": "perimeter_polygon", "test": "def check(candidate):\n    assert perimeter_polygon(4,20)==80", "prompt_code": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n"}
{"task_id": 790, "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\r\n", "canonical_solution": "\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "entry_point": "even_position", "test": "def check(candidate):\n    assert even_position([3,2,1]) == False", "prompt_code": "def even_position(nums):\r\n"}
{"task_id": 791, "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\r\n", "canonical_solution": "  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ", "entry_point": "remove_nested", "test": "def check(candidate):\n    assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "prompt_code": "def remove_nested(test_tup):\r\n"}
{"task_id": 792, "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \r\n", "canonical_solution": "    return len(input_list)", "entry_point": "count_list", "test": "def check(candidate):\n    assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "prompt_code": "def count_list(input_list): \r\n"}
{"task_id": 793, "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\r\n", "canonical_solution": "    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res", "entry_point": "last", "test": "def check(candidate):\n    assert last([1,2,3],1,3) == 0", "prompt_code": "def last(arr,x,n):\r\n"}
{"task_id": 794, "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nimport re\r\ndef text_starta_endb(text):\r\n", "canonical_solution": "        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "entry_point": "text_starta_endb", "test": "def check(candidate):\n    assert text_starta_endb(\"aabbbb\")==('Found a match!')", "prompt_code": "import re\r\ndef text_starta_endb(text):\r\n"}
{"task_id": 795, "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\nimport heapq\r\ndef cheap_items(items,n):\r\n", "canonical_solution": "  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items", "entry_point": "cheap_items", "test": "def check(candidate):\n    assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]", "prompt_code": "import heapq\r\ndef cheap_items(items,n):\r\n"}
{"task_id": 796, "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\r\n", "canonical_solution": "  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum", "entry_point": "return_sum", "test": "def check(candidate):\n    assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "prompt_code": "def return_sum(dict):\r\n"}
{"task_id": 797, "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \r\n", "canonical_solution": "    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)", "entry_point": "sum_Odd", "test": "def check(candidate):\n    assert sum_in_Range(2,5) == 8", "prompt_code": "def sum_Odd(n): \r\n"}
{"task_id": 798, "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \r\n", "canonical_solution": "    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ", "entry_point": "_sum", "test": "def check(candidate):\n    assert _sum([1, 2, 3]) == 6", "prompt_code": "def _sum(arr):  \r\n"}
{"task_id": 799, "prompt": "Write a python function to left rotate the bits of a given number.\nINT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n", "canonical_solution": "    return (n << d)|(n >> (INT_BITS - d))  ", "entry_point": "left_Rotate", "test": "def check(candidate):\n    assert left_Rotate(16,2) == 64", "prompt_code": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n"}
{"task_id": 800, "prompt": "Write a function to remove all whitespaces from a string.\nimport re\r\ndef remove_all_spaces(text):\r\n", "canonical_solution": " return (re.sub(r'\\s+', '',text))", "entry_point": "remove_all_spaces", "test": "def check(candidate):\n    assert remove_all_spaces('python  program')==('pythonprogram')", "prompt_code": "import re\r\ndef remove_all_spaces(text):\r\n"}
{"task_id": 801, "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\r\n", "canonical_solution": "  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))", "entry_point": "test_three_equal", "test": "def check(candidate):\n    assert test_three_equal(1,1,1) == 3", "prompt_code": "def test_three_equal(x,y,z):\r\n"}
{"task_id": 802, "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \r\n", "canonical_solution": "    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0", "entry_point": "count_Rotation", "test": "def check(candidate):\n    assert count_Rotation([3,2,1],3) == 1", "prompt_code": "def count_Rotation(arr,n):   \r\n"}
{"task_id": 803, "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\r\n", "canonical_solution": "    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False", "entry_point": "is_Perfect_Square", "test": "def check(candidate):\n    assert is_Perfect_Square(10) == False", "prompt_code": "def is_Perfect_Square(n) :\r\n"}
{"task_id": 804, "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \r\n", "canonical_solution": "    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "entry_point": "is_Product_Even", "test": "def check(candidate):\n    assert is_Product_Even([1,2,3],3) == True", "prompt_code": "def is_Product_Even(arr,n): \r\n"}
{"task_id": 805, "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\r\n", "canonical_solution": " return max(lists, key=sum)", "entry_point": "max_sum_list", "test": "def check(candidate):\n    assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "prompt_code": "def max_sum_list(lists):\r\n"}
{"task_id": 806, "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\r\n", "canonical_solution": "  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)", "entry_point": "max_run_uppercase", "test": "def check(candidate):\n    assert max_run_uppercase('GeMKSForGERksISBESt') == 5", "prompt_code": "def max_run_uppercase(test_str):\r\n"}
{"task_id": 807, "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\r\n", "canonical_solution": "  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd", "entry_point": "first_odd", "test": "def check(candidate):\n    assert first_odd([1,3,5]) == 1", "prompt_code": "def first_odd(nums):\r\n"}
{"task_id": 808, "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\r\n", "canonical_solution": "  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "entry_point": "check_K", "test": "def check(candidate):\n    assert check_K((10, 4, 5, 6, 8), 6) == True", "prompt_code": "def check_K(test_tup, K):\r\n"}
{"task_id": 809, "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "check_smaller", "test": "def check(candidate):\n    assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "prompt_code": "def check_smaller(test_tup1, test_tup2):\r\n"}
{"task_id": 810, "prompt": "Write a function to iterate over elements repeating each as many times as its count.\nfrom collections import Counter\r\ndef count_variable(a,b,c,d):\r\n", "canonical_solution": "  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())", "entry_point": "count_variable", "test": "def check(candidate):\n    assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ", "prompt_code": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n"}
{"task_id": 811, "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\r\n", "canonical_solution": "  res = test_list1 == test_list2\r\n  return (res) ", "entry_point": "check_identical", "test": "def check(candidate):\n    assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True", "prompt_code": "def check_identical(test_list1, test_list2):\r\n"}
{"task_id": 812, "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\nimport re\r\ndef road_rd(street):\r\n", "canonical_solution": "  return (re.sub('Road$', 'Rd.', street))", "entry_point": "road_rd", "test": "def check(candidate):\n    assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')", "prompt_code": "import re\r\ndef road_rd(street):\r\n"}
{"task_id": 813, "prompt": "Write a function to find length of the string.\ndef string_length(str1):\r\n", "canonical_solution": "    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count", "entry_point": "string_length", "test": "def check(candidate):\n    assert string_length('python')==6", "prompt_code": "def string_length(str1):\r\n"}
{"task_id": 814, "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\r\n", "canonical_solution": "  area=(p*q)/2\r\n  return area", "entry_point": "rombus_area", "test": "def check(candidate):\n    assert rombus_area(10,20)==100", "prompt_code": "def rombus_area(p,q):\r\n"}
{"task_id": 815, "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\r\n", "canonical_solution": "  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr", "entry_point": "sort_by_dnf", "test": "def check(candidate):\n    assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]", "prompt_code": "def sort_by_dnf(arr, n):\r\n"}
{"task_id": 816, "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\r\n", "canonical_solution": "  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) ", "entry_point": "clear_tuple", "test": "def check(candidate):\n    assert clear_tuple((1, 5, 3, 6, 8)) == ()", "prompt_code": "def clear_tuple(test_tup):\r\n"}
{"task_id": 817, "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\r\n", "canonical_solution": " result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result", "entry_point": "div_of_nums", "test": "def check(candidate):\n    assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]", "prompt_code": "def div_of_nums(nums,m,n):\r\n"}
{"task_id": 818, "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\r\n", "canonical_solution": "      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr", "entry_point": "lower_ctr", "test": "def check(candidate):\n    assert lower_ctr('abc') == 3", "prompt_code": "def lower_ctr(str):\r\n"}
{"task_id": 819, "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\r\n", "canonical_solution": "    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n", "entry_point": "count_duplic", "test": "def check(candidate):\n    assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])", "prompt_code": "def count_duplic(lists):\r\n"}
{"task_id": 820, "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\r\n", "canonical_solution": "  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False", "entry_point": "check_monthnum_number", "test": "def check(candidate):\n    assert check_monthnum_number(2)==True", "prompt_code": "def check_monthnum_number(monthnum1):\r\n"}
{"task_id": 821, "prompt": "Write a function to merge two dictionaries into a single expression.\nimport collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n", "canonical_solution": "    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict", "entry_point": "merge_dictionaries", "test": "def check(candidate):\n    assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}", "prompt_code": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n"}
{"task_id": 822, "prompt": "Write a function to return true if the password is valid.\nimport re\r\ndef pass_validity(p):\r\n", "canonical_solution": " x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False", "entry_point": "pass_validity", "test": "def check(candidate):\n    assert pass_validity(\"password\")==False", "prompt_code": "import re\r\ndef pass_validity(p):\r\n"}
{"task_id": 823, "prompt": "Write a function to check if the given string starts with a substring using regex.\nimport re \r\ndef check_substring(string, sample) : \r\n", "canonical_solution": "  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")", "entry_point": "check_substring", "test": "def check(candidate):\n    assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'", "prompt_code": "import re \r\ndef check_substring(string, sample) : \r\n"}
{"task_id": 824, "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\r\n", "canonical_solution": "    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l", "entry_point": "remove_even", "test": "def check(candidate):\n    assert remove_even([1,3,5,2]) == [1,3,5]", "prompt_code": "def remove_even(l):\r\n"}
{"task_id": 825, "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\r\n", "canonical_solution": "    result = [nums[i] for i in list_index]\r\n    return result", "entry_point": "access_elements", "test": "def check(candidate):\n    assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]", "prompt_code": "def access_elements(nums, list_index):\r\n"}
{"task_id": 826, "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \r\n", "canonical_solution": "    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ", "entry_point": "check_Type_Of_Triangle", "test": "def check(candidate):\n    assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"", "prompt_code": "def check_Type_Of_Triangle(a,b,c): \r\n"}
{"task_id": 827, "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\r\n", "canonical_solution": "    result = sum(row[C] for row in list1)\r\n    return result", "entry_point": "sum_column", "test": "def check(candidate):\n    assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12", "prompt_code": "def sum_column(list1, C):\r\n"}
{"task_id": 828, "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\r\n", "canonical_solution": "  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ", "entry_point": "count_alpha_dig_spl", "test": "def check(candidate):\n    assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)", "prompt_code": "def count_alpha_dig_spl(string):\r\n"}
{"task_id": 829, "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\nfrom collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n", "canonical_solution": "\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) ", "entry_point": "second_frequent", "test": "def check(candidate):\n    assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'", "prompt_code": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n"}
{"task_id": 830, "prompt": "Write a function to round up a number to specific digits.\nimport math\r\ndef round_up(a, digits):\r\n", "canonical_solution": "    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)", "entry_point": "round_up", "test": "def check(candidate):\n    assert round_up(123.01247,0)==124", "prompt_code": "import math\r\ndef round_up(a, digits):\r\n"}
{"task_id": 831, "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \r\n", "canonical_solution": "    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "entry_point": "count_Pairs", "test": "def check(candidate):\n    assert count_Pairs([1,1,1,1],4) == 6", "prompt_code": "def count_Pairs(arr,n): \r\n"}
{"task_id": 832, "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\nimport re \r\ndef extract_max(input): \r\n", "canonical_solution": "\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)", "entry_point": "extract_max", "test": "def check(candidate):\n    assert extract_max('100klh564abc365bg') == 564", "prompt_code": "import re \r\ndef extract_max(input): \r\n"}
{"task_id": 833, "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \r\n", "canonical_solution": "    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list", "entry_point": "get_key", "test": "def check(candidate):\n    assert get_key({1:'python',2:'java'})==[1,2]", "prompt_code": "def get_key(dict): \r\n"}
{"task_id": 834, "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\r\n", "canonical_solution": "        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix", "entry_point": "generate_matrix", "test": "def check(candidate):\n    assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ", "prompt_code": "def generate_matrix(n):\r\n"}
{"task_id": 835, "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \r\n", "canonical_solution": "    return (float)(y2-y1)/(x2-x1)  ", "entry_point": "slope", "test": "def check(candidate):\n    assert slope(4,2,2,5) == -1.5", "prompt_code": "def slope(x1,y1,x2,y2): \r\n"}
{"task_id": 836, "prompt": "Write a function to find length of the subarray having maximum sum.\nfrom sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n", "canonical_solution": "\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "entry_point": "max_sub_array_sum", "test": "def check(candidate):\n    assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5", "prompt_code": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n"}
{"task_id": 837, "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \r\n", "canonical_solution": "    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum", "entry_point": "cube_Sum", "test": "def check(candidate):\n    assert cube_Sum(2) == 28", "prompt_code": "def cube_Sum(n): \r\n"}
{"task_id": 838, "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \r\n", "canonical_solution": "    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ", "entry_point": "min_Swaps", "test": "def check(candidate):\n    assert min_Swaps(\"0011\",\"1111\") == 1", "prompt_code": "def min_Swaps(s1,s2) :  \r\n"}
{"task_id": 839, "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \r\n", "canonical_solution": "\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup", "entry_point": "sort_tuple", "test": "def check(candidate):\n    assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]", "prompt_code": "def sort_tuple(tup): \r\n"}
{"task_id": 840, "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \r\n", "canonical_solution": "    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ", "entry_point": "Check_Solution", "test": "def check(candidate):\n    assert Check_Solution(2,0,-1) == \"Yes\"", "prompt_code": "def Check_Solution(a,b,c):  \r\n"}
{"task_id": 841, "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \r\n", "canonical_solution": "\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ", "entry_point": "get_inv_count", "test": "def check(candidate):\n    assert get_inv_count([1, 20, 6, 4, 5], 5) == 5", "prompt_code": "def get_inv_count(arr, n): \r\n"}
{"task_id": 842, "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\r\n", "canonical_solution": "  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1", "entry_point": "get_odd_occurence", "test": "def check(candidate):\n    assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5", "prompt_code": "def get_odd_occurence(arr, arr_size):\r\n"}
{"task_id": 843, "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\nimport heapq\r\ndef nth_super_ugly_number(n, primes):\r\n", "canonical_solution": "    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]", "entry_point": "nth_super_ugly_number", "test": "def check(candidate):\n    assert nth_super_ugly_number(12,[2,7,13,19])==32", "prompt_code": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n"}
{"task_id": 844, "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \r\n", "canonical_solution": "    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; ", "entry_point": "get_Number", "test": "def check(candidate):\n    assert get_Number(8,5) == 2", "prompt_code": "def get_Number(n, k): \r\n"}
{"task_id": 845, "prompt": "Write a python function to count the number of digits in factorial of a given number.\nimport math \r\ndef find_Digits(n): \r\n", "canonical_solution": "    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; ", "entry_point": "find_Digits", "test": "def check(candidate):\n    assert find_Digits(7) == 4", "prompt_code": "import math \r\ndef find_Digits(n): \r\n"}
{"task_id": 846, "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \r\n", "canonical_solution": "    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result", "entry_point": "find_platform", "test": "def check(candidate):\n    assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3", "prompt_code": "def find_platform(arr, dep, n): \r\n"}
{"task_id": 847, "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n", "canonical_solution": "  return xs[:]\n", "entry_point": "lcopy", "test": "def check(candidate):\n    assert lcopy([1, 2, 3]) == [1, 2, 3]", "prompt_code": "def lcopy(xs):\n"}
{"task_id": 848, "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\r\n", "canonical_solution": " area = 0.5 * (base1 + base2) * height\r\n return area", "entry_point": "area_trapezium", "test": "def check(candidate):\n    assert area_trapezium(6,9,4)==30", "prompt_code": "def area_trapezium(base1,base2,height):\r\n"}
{"task_id": 849, "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \r\n", "canonical_solution": "    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] ", "entry_point": "Sum", "test": "def check(candidate):\n    assert Sum(60) == 10", "prompt_code": "def Sum(N): \r\n"}
{"task_id": 850, "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \r\n", "canonical_solution": "    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False", "entry_point": "is_triangleexists", "test": "def check(candidate):\n    assert is_triangleexists(50,60,70)==True", "prompt_code": "def is_triangleexists(a,b,c): \r\n"}
{"task_id": 851, "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \r\n", "canonical_solution": "    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); ", "entry_point": "Sum_of_Inverse_Divisors", "test": "def check(candidate):\n    assert Sum_of_Inverse_Divisors(6,12) == 2", "prompt_code": "def Sum_of_Inverse_Divisors(N,Sum): \r\n"}
{"task_id": 852, "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \r\n", "canonical_solution": "    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list", "entry_point": "remove_negs", "test": "def check(candidate):\n    assert remove_negs([1,-2,3,-4]) == [1,3]", "prompt_code": "def remove_negs(num_list): \r\n"}
{"task_id": 853, "prompt": "Write a python function to find sum of odd factors of a number.\nimport math\r\ndef sum_of_odd_Factors(n): \r\n", "canonical_solution": "    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res ", "entry_point": "sum_of_odd_Factors", "test": "def check(candidate):\n    assert sum_of_odd_Factors(30) == 24", "prompt_code": "import math\r\ndef sum_of_odd_Factors(n): \r\n"}
{"task_id": 854, "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\nimport heapq as hq\r\ndef raw_heap(rawheap):\r\n", "canonical_solution": "  hq.heapify(rawheap)\r\n  return rawheap", "entry_point": "raw_heap", "test": "def check(candidate):\n    assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]", "prompt_code": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n"}
{"task_id": 855, "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \r\n", "canonical_solution": "    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False", "entry_point": "check_Even_Parity", "test": "def check(candidate):\n    assert check_Even_Parity(10) == True", "prompt_code": "def check_Even_Parity(x): \r\n"}
{"task_id": 856, "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \r\n", "canonical_solution": "    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ", "entry_point": "find_Min_Swaps", "test": "def check(candidate):\n    assert find_Min_Swaps([1,0,1,0],4) == 3", "prompt_code": "def find_Min_Swaps(arr,n) : \r\n"}
{"task_id": 857, "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\r\n", "canonical_solution": "  result = list(map(list,list1)) \r\n  return result ", "entry_point": "listify_list", "test": "def check(candidate):\n    assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]", "prompt_code": "def listify_list(list1):\r\n"}
{"task_id": 858, "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \r\n", "canonical_solution": "    return (len(input_list))**2", "entry_point": "count_list", "test": "def check(candidate):\n    assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25", "prompt_code": "def count_list(input_list): \r\n"}
{"task_id": 859, "prompt": "Write a function to generate all sublists of a given list.\nfrom itertools import combinations\r\ndef sub_lists(my_list):\r\n", "canonical_solution": "\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs", "entry_point": "sub_lists", "test": "def check(candidate):\n    assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]", "prompt_code": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n"}
{"task_id": 860, "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\nimport re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n", "canonical_solution": "\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "entry_point": "check_alphanumeric", "test": "def check(candidate):\n    assert check_alphanumeric(\"dawood@\") == 'Discard'", "prompt_code": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n"}
{"task_id": 861, "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\nfrom collections import Counter \r\ndef anagram_lambda(texts,str):\r\n", "canonical_solution": "  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result", "entry_point": "anagram_lambda", "test": "def check(candidate):\n    assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']", "prompt_code": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n"}
{"task_id": 862, "prompt": "Write a function to find the occurrences of n most common words in a given text.\nfrom collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n", "canonical_solution": "  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)", "entry_point": "n_common_words", "test": "def check(candidate):\n    assert n_common_words(\"python is a programming language\",1)==[('python', 1)]", "prompt_code": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n"}
{"task_id": 863, "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \r\n", "canonical_solution": "\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ", "entry_point": "find_longest_conseq_subseq", "test": "def check(candidate):\n    assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3", "prompt_code": "def find_longest_conseq_subseq(arr, n): \r\n"}
{"task_id": 864, "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\r\n", "canonical_solution": "  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result", "entry_point": "palindrome_lambda", "test": "def check(candidate):\n    assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']", "prompt_code": "def palindrome_lambda(texts):\r\n"}
{"task_id": 865, "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\r\n", "canonical_solution": "    result = map(lambda x:n*x, nums) \r\n    return list(result)", "entry_point": "ntimes_list", "test": "def check(candidate):\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]", "prompt_code": "def ntimes_list(nums,n):\r\n"}
{"task_id": 866, "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\r\n", "canonical_solution": "  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False", "entry_point": "check_monthnumb", "test": "def check(candidate):\n    assert check_monthnumb(\"February\")==False", "prompt_code": "def check_monthnumb(monthname2):\r\n"}
{"task_id": 867, "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \r\n", "canonical_solution": "    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "entry_point": "min_Num", "test": "def check(candidate):\n    assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1", "prompt_code": "def min_Num(arr,n):  \r\n"}
{"task_id": 868, "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \r\n", "canonical_solution": "    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "entry_point": "length_Of_Last_Word", "test": "def check(candidate):\n    assert length_Of_Last_Word(\"python language\") == 8", "prompt_code": "def length_Of_Last_Word(a): \r\n"}
{"task_id": 869, "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\r\n", "canonical_solution": "   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "entry_point": "remove_list_range", "test": "def check(candidate):\n    assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]", "prompt_code": "def remove_list_range(list1, leftrange, rigthrange):\r\n"}
{"task_id": 870, "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\r\n", "canonical_solution": "  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)", "entry_point": "sum_positivenum", "test": "def check(candidate):\n    assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48", "prompt_code": "def sum_positivenum(nums):\r\n"}
{"task_id": 871, "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \r\n", "canonical_solution": "    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "entry_point": "are_Rotations", "test": "def check(candidate):\n    assert are_Rotations(\"abc\",\"cba\") == False", "prompt_code": "def are_Rotations(string1,string2): \r\n"}
{"task_id": 872, "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \r\n", "canonical_solution": "    return all(map(list1.__contains__,list2)) ", "entry_point": "check_subset", "test": "def check(candidate):\n    assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True", "prompt_code": "def check_subset(list1,list2): \r\n"}
{"task_id": 873, "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\r\n", "canonical_solution": "  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "entry_point": "fibonacci", "test": "def check(candidate):\n    assert fibonacci(7) == 13", "prompt_code": "def fibonacci(n):\r\n"}
{"task_id": 874, "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\r\n", "canonical_solution": "    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "entry_point": "check_Concat", "test": "def check(candidate):\n    assert check_Concat(\"abcabcabc\",\"abc\") == True", "prompt_code": "def check_Concat(str1,str2):\r\n"}
{"task_id": 875, "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\r\n", "canonical_solution": "  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ", "entry_point": "min_difference", "test": "def check(candidate):\n    assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1", "prompt_code": "def min_difference(test_list):\r\n"}
{"task_id": 876, "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\r\n", "canonical_solution": "   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "entry_point": "lcm", "test": "def check(candidate):\n    assert lcm(4,6) == 12", "prompt_code": "def lcm(x, y):\r\n"}
{"task_id": 877, "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \r\n", "canonical_solution": "    str = ''.join(sorted(str)) \r\n    return (str) ", "entry_point": "sort_String", "test": "def check(candidate):\n    assert sort_String(\"cba\") == \"abc\"", "prompt_code": "def sort_String(str) : \r\n"}
{"task_id": 878, "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\r\n", "canonical_solution": "  res = all(ele in K for ele in test_tuple)\r\n  return (res) ", "entry_point": "check_tuples", "test": "def check(candidate):\n    assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True", "prompt_code": "def check_tuples(test_tuple, K):\r\n"}
{"task_id": 879, "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\nimport re\r\ndef text_match(text):\r\n", "canonical_solution": "  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "entry_point": "text_match", "test": "def check(candidate):\n    assert text_match(\"aabbbbd\") == 'Not matched!'", "prompt_code": "import re\r\ndef text_match(text):\r\n"}
{"task_id": 880, "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \r\n", "canonical_solution": "    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ", "entry_point": "Check_Solution", "test": "def check(candidate):\n    assert Check_Solution(2,5,2) == \"2 solutions\"", "prompt_code": "def Check_Solution(a,b,c) : \r\n"}
{"task_id": 881, "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\r\n", "canonical_solution": "    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "entry_point": "sum_even_odd", "test": "def check(candidate):\n    assert sum_even_odd([1,3,5,7,4,1,6,8])==5", "prompt_code": "def sum_even_odd(list1):\r\n"}
{"task_id": 882, "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\r\n", "canonical_solution": "  perimeter=2*(b*h)\r\n  return perimeter", "entry_point": "parallelogram_perimeter", "test": "def check(candidate):\n    assert parallelogram_perimeter(10,20)==400", "prompt_code": "def parallelogram_perimeter(b,h):\r\n"}
{"task_id": 883, "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\r\n", "canonical_solution": " result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "entry_point": "div_of_nums", "test": "def check(candidate):\n    assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]", "prompt_code": "def div_of_nums(nums,m,n):\r\n"}
{"task_id": 884, "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \r\n", "canonical_solution": "    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "def check(candidate):\n    assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ", "prompt_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n"}
{"task_id": 885, "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \r\n", "canonical_solution": "    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "entry_point": "is_Isomorphic", "test": "def check(candidate):\n    assert is_Isomorphic(\"paper\",\"title\") == True", "prompt_code": "def is_Isomorphic(str1,str2):          \r\n"}
{"task_id": 886, "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\r\n", "canonical_solution": "    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ", "entry_point": "sum_num", "test": "def check(candidate):\n    assert sum_num((8, 2, 3, 0, 7))==4.0", "prompt_code": "def sum_num(numbers):\r\n"}
{"task_id": 887, "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \r\n", "canonical_solution": "    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "entry_point": "is_odd", "test": "def check(candidate):\n    assert is_odd(5) == True", "prompt_code": "def is_odd(n) : \r\n"}
{"task_id": 888, "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "entry_point": "substract_elements", "test": "def check(candidate):\n    assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))", "prompt_code": "def substract_elements(test_tup1, test_tup2):\r\n"}
{"task_id": 889, "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\r\n", "canonical_solution": "    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists ", "entry_point": "reverse_list_lists", "test": "def check(candidate):\n    assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]", "prompt_code": "def reverse_list_lists(lists):\r\n"}
{"task_id": 890, "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \r\n", "canonical_solution": "    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "entry_point": "find_Extra", "test": "def check(candidate):\n    assert find_Extra([1,2,3,4],[1,2,3],3) == 3", "prompt_code": "def find_Extra(arr1,arr2,n) : \r\n"}
{"task_id": 891, "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \r\n", "canonical_solution": "    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "entry_point": "same_Length", "test": "def check(candidate):\n    assert same_Length(12,1) == False", "prompt_code": "def same_Length(A,B): \r\n"}
{"task_id": 892, "prompt": "Write a function to remove multiple spaces in a string.\nimport re\r\ndef remove_spaces(text):\r\n", "canonical_solution": " return (re.sub(' +',' ',text))", "entry_point": "remove_spaces", "test": "def check(candidate):\n    assert remove_spaces('python  program')==('python program')", "prompt_code": "import re\r\ndef remove_spaces(text):\r\n"}
{"task_id": 893, "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \r\n", "canonical_solution": "    return [item[-1] for item in lst] ", "entry_point": "Extract", "test": "def check(candidate):\n    assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]", "prompt_code": "def Extract(lst): \r\n"}
{"task_id": 894, "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\r\n", "canonical_solution": "  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) ", "entry_point": "float_to_tuple", "test": "def check(candidate):\n    assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)", "prompt_code": "def float_to_tuple(test_str):\r\n"}
{"task_id": 895, "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\r\n", "canonical_solution": "    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]", "entry_point": "max_sum_subseq", "test": "def check(candidate):\n    assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26", "prompt_code": "def max_sum_subseq(A):\r\n"}
{"task_id": 896, "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\r\n", "canonical_solution": "   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)", "entry_point": "last", "test": "def check(candidate):\n    assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ", "prompt_code": "def last(n):\r\n"}
{"task_id": 897, "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \r\n", "canonical_solution": "    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "entry_point": "is_Word_Present", "test": "def check(candidate):\n    assert is_Word_Present(\"machine learning\",\"machine\") == True", "prompt_code": "def is_Word_Present(sentence,word): \r\n"}
{"task_id": 898, "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\nfrom itertools import groupby \r\ndef extract_elements(numbers, n):\r\n", "canonical_solution": "    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result", "entry_point": "extract_elements", "test": "def check(candidate):\n    assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]", "prompt_code": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n"}
{"task_id": 899, "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \r\n", "canonical_solution": "    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True", "entry_point": "check", "test": "def check(candidate):\n    assert check([3,2,1,2,3,4],6) == True", "prompt_code": "def check(arr,n): \r\n"}
{"task_id": 900, "prompt": "Write a function where a string will start with a specific number.\nimport re\r\ndef match_num(string):\r\n", "canonical_solution": "    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "entry_point": "match_num", "test": "def check(candidate):\n    assert match_num('5-2345861')==True", "prompt_code": "import re\r\ndef match_num(string):\r\n"}
{"task_id": 901, "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\r\n", "canonical_solution": "    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "entry_point": "smallest_multiple", "test": "def check(candidate):\n    assert smallest_multiple(13)==360360", "prompt_code": "def smallest_multiple(n):\r\n"}
{"task_id": 902, "prompt": "Write a function to combine two dictionaries by adding values for common keys.\nfrom collections import Counter\r\ndef add_dict(d1,d2):\r\n", "canonical_solution": "   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict", "entry_point": "add_dict", "test": "def check(candidate):\n    assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ", "prompt_code": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n"}
{"task_id": 903, "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \r\n", "canonical_solution": "    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "entry_point": "count_Unset_Bits", "test": "def check(candidate):\n    assert count_Unset_Bits(2) == 1", "prompt_code": "def count_Unset_Bits(n) :  \r\n"}
{"task_id": 904, "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\r\n", "canonical_solution": "  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "entry_point": "even_num", "test": "def check(candidate):\n    assert even_num(13.5)==False", "prompt_code": "def even_num(x):\r\n"}
{"task_id": 905, "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \r\n", "canonical_solution": "    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ", "entry_point": "factorial", "test": "def check(candidate):\n    assert sum_of_square(4) == 70", "prompt_code": "def factorial(start,end): \r\n"}
{"task_id": 906, "prompt": "Write a function to extract year, month and date from a url by using regex.\nimport re\r\ndef extract_date(url):\r\n", "canonical_solution": "        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "entry_point": "extract_date", "test": "def check(candidate):\n    assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]", "prompt_code": "import re\r\ndef extract_date(url):\r\n"}
{"task_id": 907, "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\r\n", "canonical_solution": " List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]", "entry_point": "lucky_num", "test": "def check(candidate):\n    assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ", "prompt_code": "def lucky_num(n):\r\n"}
{"task_id": 908, "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \r\n", "canonical_solution": "\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1", "entry_point": "find_fixed_point", "test": "def check(candidate):\n    assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3", "prompt_code": "def find_fixed_point(arr, n): \r\n"}
{"task_id": 909, "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\r\n", "canonical_solution": "    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x", "entry_point": "previous_palindrome", "test": "def check(candidate):\n    assert previous_palindrome(99)==88", "prompt_code": "def previous_palindrome(num):\r\n"}
{"task_id": 910, "prompt": "Write a function to validate a gregorian date.\nimport datetime\r\ndef check_date(m, d, y):\r\n", "canonical_solution": "    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "entry_point": "check_date", "test": "def check(candidate):\n    assert check_date(11,11,2002)==True", "prompt_code": "import datetime\r\ndef check_date(m, d, y):\r\n"}
{"task_id": 911, "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\r\n", "canonical_solution": "    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "entry_point": "maximum_product", "test": "def check(candidate):\n    assert maximum_product( [12, 74, 9, 50, 61, 41])==225700", "prompt_code": "def maximum_product(nums):\r\n"}
{"task_id": 912, "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \r\n", "canonical_solution": "\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))", "entry_point": "binomial_coeff", "test": "def check(candidate):\n    assert int(lobb_num(5, 3)) == 35", "prompt_code": "def binomial_coeff(n, k): \r\n"}
{"task_id": 913, "prompt": "Write a function to check for a number at the end of a string.\nimport re\r\ndef end_num(string):\r\n", "canonical_solution": "    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "entry_point": "end_num", "test": "def check(candidate):\n    assert end_num('abcdef')==False", "prompt_code": "import re\r\ndef end_num(string):\r\n"}
{"task_id": 914, "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \r\n", "canonical_solution": "    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "entry_point": "is_Two_Alter", "test": "def check(candidate):\n    assert is_Two_Alter(\"abab\") == True", "prompt_code": "def is_Two_Alter(s):  \r\n"}
{"task_id": 915, "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\r\n", "canonical_solution": "  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ", "entry_point": "rearrange_numbs", "test": "def check(candidate):\n    assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]", "prompt_code": "def rearrange_numbs(array_nums):\r\n"}
{"task_id": 916, "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \r\n", "canonical_solution": "\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False", "entry_point": "find_triplet_array", "test": "def check(candidate):\n    assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)", "prompt_code": "def find_triplet_array(A, arr_size, sum): \r\n"}
{"task_id": 917, "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\nimport re\r\ndef text_uppercase_lowercase(text):\r\n", "canonical_solution": "        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')", "entry_point": "text_uppercase_lowercase", "test": "def check(candidate):\n    assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')", "prompt_code": "import re\r\ndef text_uppercase_lowercase(text):\r\n"}
{"task_id": 918, "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \r\n", "canonical_solution": "    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ", "entry_point": "coin_change", "test": "def check(candidate):\n    assert coin_change([1, 2, 3],3,4)==4", "prompt_code": "def coin_change(S, m, n): \r\n"}
{"task_id": 919, "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\r\n", "canonical_solution": "    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "entry_point": "multiply_list", "test": "def check(candidate):\n    assert multiply_list([1,-2,3]) == -6", "prompt_code": "def multiply_list(items):\r\n"}
{"task_id": 920, "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\r\n", "canonical_solution": "  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ", "entry_point": "remove_tuple", "test": "def check(candidate):\n    assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'", "prompt_code": "def remove_tuple(test_list):\r\n"}
{"task_id": 921, "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\r\n", "canonical_solution": "  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) ", "entry_point": "chunk_tuples", "test": "def check(candidate):\n    assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]", "prompt_code": "def chunk_tuples(test_tup, N):\r\n"}
{"task_id": 922, "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \r\n", "canonical_solution": "    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   ", "entry_point": "max_product", "test": "def check(candidate):\n    assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)", "prompt_code": "def max_product(arr): \r\n"}
{"task_id": 923, "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\r\n", "canonical_solution": "\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))", "entry_point": "super_seq", "test": "def check(candidate):\n    assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9", "prompt_code": "def super_seq(X, Y, m, n):\r\n"}
{"task_id": 924, "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\r\n", "canonical_solution": "    if x > y:\r\n        return x\r\n    return y", "entry_point": "max_of_two", "test": "def check(candidate):\n    assert max_of_two(10,20)==20", "prompt_code": "def max_of_two( x, y ):\r\n"}
{"task_id": 925, "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\r\n", "canonical_solution": "    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "entry_point": "mutiple_tuple", "test": "def check(candidate):\n    assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864", "prompt_code": "def mutiple_tuple(nums):\r\n"}
{"task_id": 926, "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \r\n", "canonical_solution": "\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "entry_point": "binomial_coeffi", "test": "def check(candidate):\n    assert rencontres_number(7, 2) == 924", "prompt_code": "def binomial_coeffi(n, k): \r\n"}
{"task_id": 927, "prompt": "Write a function to calculate the height of the given binary tree.\nclass Node: \r\n\tdef __init__(self, data): \r\n", "canonical_solution": "\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1", "entry_point": "__init__", "test": "def check(candidate):\n    assert (max_height(root)) == 3", "prompt_code": "class Node: \r\n\tdef __init__(self, data): \r\n"}
{"task_id": 928, "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nimport re\r\ndef change_date_format(dt):\r\n", "canonical_solution": "        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)", "entry_point": "change_date_format", "test": "def check(candidate):\n    assert change_date_format('2026-01-02')=='02-01-2026'", "prompt_code": "import re\r\ndef change_date_format(dt):\r\n"}
{"task_id": 929, "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \r\n", "canonical_solution": "  count = tuplex.count(value)\r\n  return count", "entry_point": "count_tuplex", "test": "def check(candidate):\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3", "prompt_code": "def count_tuplex(tuplex,value):  \r\n"}
{"task_id": 930, "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\nimport re\r\ndef text_match(text):\r\n", "canonical_solution": "        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')", "entry_point": "text_match", "test": "def check(candidate):\n    assert text_match(\"msb\") == 'Not matched!'", "prompt_code": "import re\r\ndef text_match(text):\r\n"}
{"task_id": 931, "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\nimport math \r\ndef sum_series(number):\r\n", "canonical_solution": " total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total", "entry_point": "sum_series", "test": "def check(candidate):\n    assert sum_series(7)==784", "prompt_code": "import math \r\ndef sum_series(number):\r\n"}
{"task_id": 932, "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\r\n", "canonical_solution": "    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp", "entry_point": "remove_duplic_list", "test": "def check(candidate):\n    assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']", "prompt_code": "def remove_duplic_list(l):\r\n"}
{"task_id": 933, "prompt": "Write a function to convert camel case string to snake case string by using regex.\nimport re\r\ndef camel_to_snake(text):\r\n", "canonical_solution": "  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "entry_point": "camel_to_snake", "test": "def check(candidate):\n    assert camel_to_snake('GoogleAssistant') == 'google_assistant'", "prompt_code": "import re\r\ndef camel_to_snake(text):\r\n"}
{"task_id": 934, "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \r\n", "canonical_solution": "\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "entry_point": "dealnnoy_num", "test": "def check(candidate):\n    assert dealnnoy_num(3, 4) == 129", "prompt_code": "def dealnnoy_num(n, m): \r\n"}
{"task_id": 935, "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\r\n", "canonical_solution": " total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "entry_point": "series_sum", "test": "def check(candidate):\n    assert series_sum(6)==91", "prompt_code": "def series_sum(number):\r\n"}
{"task_id": 936, "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\r\n", "canonical_solution": "  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) ", "entry_point": "re_arrange_tuples", "test": "def check(candidate):\n    assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]", "prompt_code": "def re_arrange_tuples(test_list, ord_list):\r\n"}
{"task_id": 937, "prompt": "Write a function to count the most common character in a given string.\nfrom collections import Counter \r\ndef max_char(str1):\r\n", "canonical_solution": "    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char", "entry_point": "max_char", "test": "def check(candidate):\n    assert max_char(\"hello world\")==('l')", "prompt_code": "from collections import Counter \r\ndef max_char(str1):\r\n"}
{"task_id": 938, "prompt": "Write a function to find three closest elements from three sorted arrays.\nimport sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n", "canonical_solution": "\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]", "entry_point": "find_closet", "test": "def check(candidate):\n    assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)", "prompt_code": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n"}
{"task_id": 939, "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\r\n", "canonical_solution": " sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models", "entry_point": "sorted_models", "test": "def check(candidate):\n    assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]", "prompt_code": "def sorted_models(models):\r\n"}
{"task_id": 940, "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\r\n", "canonical_solution": "    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n", "entry_point": "heap_sort", "test": "def check(candidate):\n    assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]", "prompt_code": "def heap_sort(arr):\r\n"}
{"task_id": 941, "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\r\n", "canonical_solution": "  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "entry_point": "count_elim", "test": "def check(candidate):\n    assert count_elim([10,20,30,(10,20),40])==3", "prompt_code": "def count_elim(num):\r\n"}
{"task_id": 942, "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\r\n", "canonical_solution": "  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ", "entry_point": "check_element", "test": "def check(candidate):\n    assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True", "prompt_code": "def check_element(test_tup, check_list):\r\n"}
{"task_id": 943, "prompt": "Write a function to combine two given sorted lists using heapq module.\nfrom heapq import merge\r\ndef combine_lists(num1,num2):\r\n", "canonical_solution": "  combine_lists=list(merge(num1, num2))\r\n  return combine_lists", "entry_point": "combine_lists", "test": "def check(candidate):\n    assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]", "prompt_code": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n"}
{"task_id": 944, "prompt": "Write a function to separate and print the numbers and their position of a given string.\nimport re\r\ndef num_position(text):\r\n", "canonical_solution": " for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "entry_point": "num_position", "test": "def check(candidate):\n    assert num_position(\"there are 70 flats in this apartment\")==10", "prompt_code": "import re\r\ndef num_position(text):\r\n"}
{"task_id": 945, "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\r\n", "canonical_solution": "  s = set(t)\r\n  return (s) ", "entry_point": "tuple_to_set", "test": "def check(candidate):\n    assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}", "prompt_code": "def tuple_to_set(t):\r\n"}
{"task_id": 946, "prompt": "Write a function to find the most common elements and their counts of a specified text.\nfrom collections import Counter \r\ndef most_common_elem(s,a):\r\n", "canonical_solution": "  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem", "entry_point": "most_common_elem", "test": "def check(candidate):\n    assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ", "prompt_code": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n"}
{"task_id": 947, "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\r\n", "canonical_solution": "    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min", "entry_point": "len_log", "test": "def check(candidate):\n    assert len_log([\"win\",\"lose\",\"great\"]) == 3", "prompt_code": "def len_log(list1):\r\n"}
{"task_id": 948, "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\r\n", "canonical_solution": "  item = tup1[index]\r\n  return item", "entry_point": "get_item", "test": "def check(candidate):\n    assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')", "prompt_code": "def get_item(tup1,index):\r\n"}
{"task_id": 949, "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\r\n", "canonical_solution": "  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))", "entry_point": "count_digs", "test": "def check(candidate):\n    assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'", "prompt_code": "def count_digs(tup):\r\n"}
{"task_id": 950, "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\r\n", "canonical_solution": " if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign", "entry_point": "chinese_zodiac", "test": "def check(candidate):\n    assert chinese_zodiac(1997)==('Ox')", "prompt_code": "def chinese_zodiac(year):\r\n"}
{"task_id": 951, "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\r\n", "canonical_solution": "  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) ", "entry_point": "max_similar_indices", "test": "def check(candidate):\n    assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]", "prompt_code": "def max_similar_indices(test_list1, test_list2):\r\n"}
{"task_id": 952, "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \r\n", "canonical_solution": "\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ", "entry_point": "nCr_mod_p", "test": "def check(candidate):\n    assert nCr_mod_p(10, 2, 13) == 6", "prompt_code": "def nCr_mod_p(n, r, p): \r\n"}
{"task_id": 953, "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \r\n", "canonical_solution": "    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "entry_point": "subset", "test": "def check(candidate):\n    assert subset([1, 2, 3, 4],4) == 1", "prompt_code": "def subset(ar, n): \r\n"}
{"task_id": 954, "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \r\n", "canonical_solution": " if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None", "entry_point": "profit_amount", "test": "def check(candidate):\n    assert profit_amount(1500,1200)==300", "prompt_code": "def profit_amount(actual_cost,sale_amount): \r\n"}
{"task_id": 955, "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\r\n", "canonical_solution": "    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "entry_point": "is_abundant", "test": "def check(candidate):\n    assert is_abundant(12)==True", "prompt_code": "def is_abundant(n):\r\n"}
{"task_id": 956, "prompt": "Write a function to split the given string at uppercase letters by using regex.\nimport re\r\ndef split_list(text):\r\n", "canonical_solution": "  return (re.findall('[A-Z][^A-Z]*', text))", "entry_point": "split_list", "test": "def check(candidate):\n    assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']", "prompt_code": "import re\r\ndef split_list(text):\r\n"}
{"task_id": 957, "prompt": "Write a python function to get the position of rightmost set bit.\nimport math\r\ndef get_First_Set_Bit_Pos(n):\r\n", "canonical_solution": "     return math.log2(n&-n)+1", "entry_point": "get_First_Set_Bit_Pos", "test": "def check(candidate):\n    assert get_First_Set_Bit_Pos(12) == 3", "prompt_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n"}
{"task_id": 958, "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\r\n", "canonical_solution": "        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num", "entry_point": "int_to_roman", "test": "def check(candidate):\n    assert int_to_roman(1)==(\"I\")", "prompt_code": "def int_to_roman( num):\r\n"}
{"task_id": 959, "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \r\n", "canonical_solution": "    return sum(lst) / len(lst) ", "entry_point": "Average", "test": "def check(candidate):\n    assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75", "prompt_code": "def Average(lst): \r\n"}
{"task_id": 960, "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\r\n", "canonical_solution": "    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "entry_point": "get_noOfways", "test": "def check(candidate):\n    assert get_noOfways(4)==3", "prompt_code": "def get_noOfways(n):\r\n"}
{"task_id": 961, "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\r\n", "canonical_solution": "        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val", "entry_point": "roman_to_int", "test": "def check(candidate):\n    assert roman_to_int('MMMCMLXXXVI')==3986", "prompt_code": "def roman_to_int(s):\r\n"}
{"task_id": 962, "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \r\n", "canonical_solution": "    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ", "entry_point": "sum_Natural", "test": "def check(candidate):\n    assert sum_Even(2,5) == 6", "prompt_code": "def sum_Natural(n): \r\n"}
{"task_id": 963, "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\r\n", "canonical_solution": "    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)", "entry_point": "discriminant_value", "test": "def check(candidate):\n    assert discriminant_value(4,8,2)==(\"Two solutions\",32)", "prompt_code": "def discriminant_value(x,y,z):\r\n"}
{"task_id": 964, "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \r\n", "canonical_solution": "    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "entry_point": "word_len", "test": "def check(candidate):\n    assert word_len(\"program\") == False", "prompt_code": "def word_len(s): \r\n"}
{"task_id": 965, "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\r\n", "canonical_solution": "        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "entry_point": "camel_to_snake", "test": "def check(candidate):\n    assert camel_to_snake('PythonProgram')==('python_program')", "prompt_code": "def camel_to_snake(text):\r\n"}
{"task_id": 966, "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n", "canonical_solution": "   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1", "entry_point": "remove_empty", "test": "def check(candidate):\n    assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ", "prompt_code": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n"}
{"task_id": 967, "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \r\n", "canonical_solution": "  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") ", "entry_point": "check", "test": "def check(candidate):\n    assert check(\"SEEquoiaL\") == 'accepted'", "prompt_code": "def check(string): \r\n"}
{"task_id": 968, "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\r\n", "canonical_solution": "    x = min(B - 1,N)\r\n    return (A*x) // B", "entry_point": "floor_Max", "test": "def check(candidate):\n    assert floor_Max(11,10,9) == 9", "prompt_code": "def floor_Max(A,B,N):\r\n"}
{"task_id": 969, "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\r\n", "canonical_solution": "  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ", "entry_point": "join_tuples", "test": "def check(candidate):\n    assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]", "prompt_code": "def join_tuples(test_list):\r\n"}
{"task_id": 970, "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\r\n", "canonical_solution": "    if x < y:\r\n        return x\r\n    return y", "entry_point": "min_of_two", "test": "def check(candidate):\n    assert min_of_two(10,20)==10", "prompt_code": "def min_of_two( x, y ):\r\n"}
{"task_id": 971, "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \r\n", "canonical_solution": "\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "entry_point": "maximum_segments", "test": "def check(candidate):\n    assert maximum_segments(7, 5, 2, 5) == 2", "prompt_code": "def maximum_segments(n, a, b, c) : \r\n"}
{"task_id": 972, "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\r\n", "canonical_solution": "  res = test_tup1 + test_tup2\r\n  return (res) ", "entry_point": "concatenate_nested", "test": "def check(candidate):\n    assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)", "prompt_code": "def concatenate_nested(test_tup1, test_tup2):\r\n"}
{"task_id": 973, "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\r\n", "canonical_solution": "    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ", "entry_point": "left_rotate", "test": "def check(candidate):\n    assert left_rotate(\"python\",2) == \"thonpy\"   ", "prompt_code": "def left_rotate(s,d):\r\n"}
{"task_id": 974, "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \r\n", "canonical_solution": "\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]", "entry_point": "min_sum_path", "test": "def check(candidate):\n    assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6", "prompt_code": "def min_sum_path(A): \r\n"}
